
Radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007178  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08007308  08007308  00008308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d8  080076d8  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  080076d8  080076d8  000086d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076e0  080076e0  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076e0  080076e0  000086e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076e4  080076e4  000086e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080076e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d8  2**0
                  CONTENTS
 10 .bss          00000294  200001d8  200001d8  000091d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000046c  2000046c  000091d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f28c  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000209d  00000000  00000000  00018494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  0001a538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a7f  00000000  00000000  0001b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c411  00000000  00000000  0001bd27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001085d  00000000  00000000  00038138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a66a3  00000000  00000000  00048995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ef038  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004978  00000000  00000000  000ef07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000f39f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072f0 	.word	0x080072f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080072f0 	.word	0x080072f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b08b      	sub	sp, #44	@ 0x2c
 8000bac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fbf3 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f849 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f923 	bl	8000e00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bba:	f000 f8f1 	bl	8000da0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000bbe:	f000 f87f 	bl	8000cc0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000bc2:	f000 f8b5 	bl	8000d30 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  char* saludo = "Nueva sesion:\n\r";
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <main+0x90>)
 8000bc8:	61fb      	str	r3, [r7, #28]
  HAL_UART_Transmit_IT(&huart2, (uint8_t*) saludo, strlen(saludo));
 8000bca:	69f8      	ldr	r0, [r7, #28]
 8000bcc:	f7ff fb50 	bl	8000270 <strlen>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	69f9      	ldr	r1, [r7, #28]
 8000bd8:	4818      	ldr	r0, [pc, #96]	@ (8000c3c <main+0x94>)
 8000bda:	f002 fd87 	bl	80036ec <HAL_UART_Transmit_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (time != 0) {
 8000bde:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <main+0x98>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0fa      	beq.n	8000bde <main+0x36>
		  char buffer[20];
		  float speed = calculate_speed(time);
 8000be8:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <main+0x98>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f95a 	bl	8000ea8 <calculate_speed>
 8000bf4:	ed87 0a06 	vstr	s0, [r7, #24]
		  sprintf(buffer, "%ds - %.3fcm/s\n\r", time, speed);
 8000bf8:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <main+0x98>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	461c      	mov	r4, r3
 8000c00:	69b8      	ldr	r0, [r7, #24]
 8000c02:	f7ff fca1 	bl	8000548 <__aeabi_f2d>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	1d38      	adds	r0, r7, #4
 8000c0c:	e9cd 2300 	strd	r2, r3, [sp]
 8000c10:	4622      	mov	r2, r4
 8000c12:	490c      	ldr	r1, [pc, #48]	@ (8000c44 <main+0x9c>)
 8000c14:	f004 fa3e 	bl	8005094 <siprintf>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*) buffer, strlen(buffer));
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fb28 	bl	8000270 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4619      	mov	r1, r3
 8000c28:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <main+0x94>)
 8000c2a:	f002 fd5f 	bl	80036ec <HAL_UART_Transmit_IT>
		  time = 0;
 8000c2e:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <main+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	801a      	strh	r2, [r3, #0]
	  if (time != 0) {
 8000c34:	e7d3      	b.n	8000bde <main+0x36>
 8000c36:	bf00      	nop
 8000c38:	08007308 	.word	0x08007308
 8000c3c:	2000028c 	.word	0x2000028c
 8000c40:	20000314 	.word	0x20000314
 8000c44:	08007318 	.word	0x08007318

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b090      	sub	sp, #64	@ 0x40
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0318 	add.w	r3, r7, #24
 8000c52:	2228      	movs	r2, #40	@ 0x28
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 fa7f 	bl	800515a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c72:	2310      	movs	r3, #16
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 ff14 	bl	8001aac <HAL_RCC_OscConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c8a:	f000 f935 	bl	8000ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8e:	230f      	movs	r3, #15
 8000c90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 ff3e 	bl	8002b28 <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cb2:	f000 f921 	bl	8000ef8 <Error_Handler>
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3740      	adds	r7, #64	@ 0x40
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <MX_TIM6_Init+0x68>)
 8000cd2:	4a16      	ldr	r2, [pc, #88]	@ (8000d2c <MX_TIM6_Init+0x6c>)
 8000cd4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_TIM6_Init+0x68>)
 8000cd8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000cdc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cde:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <MX_TIM6_Init+0x68>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <MX_TIM6_Init+0x68>)
 8000ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <MX_TIM6_Init+0x68>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cf2:	480d      	ldr	r0, [pc, #52]	@ (8000d28 <MX_TIM6_Init+0x68>)
 8000cf4:	f002 f938 	bl	8002f68 <HAL_TIM_Base_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000cfe:	f000 f8fb 	bl	8000ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <MX_TIM6_Init+0x68>)
 8000d10:	f002 fc12 	bl	8003538 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000d1a:	f000 f8ed 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200001f4 	.word	0x200001f4
 8000d2c:	40001000 	.word	0x40001000

08000d30 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d40:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <MX_TIM7_Init+0x68>)
 8000d42:	4a16      	ldr	r2, [pc, #88]	@ (8000d9c <MX_TIM7_Init+0x6c>)
 8000d44:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8000d46:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <MX_TIM7_Init+0x68>)
 8000d48:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000d4c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <MX_TIM7_Init+0x68>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000d54:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <MX_TIM7_Init+0x68>)
 8000d56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d5a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_TIM7_Init+0x68>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d62:	480d      	ldr	r0, [pc, #52]	@ (8000d98 <MX_TIM7_Init+0x68>)
 8000d64:	f002 f900 	bl	8002f68 <HAL_TIM_Base_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000d6e:	f000 f8c3 	bl	8000ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4806      	ldr	r0, [pc, #24]	@ (8000d98 <MX_TIM7_Init+0x68>)
 8000d80:	f002 fbda 	bl	8003538 <HAL_TIMEx_MasterConfigSynchronization>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000d8a:	f000 f8b5 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000240 	.word	0x20000240
 8000d9c:	40001400 	.word	0x40001400

08000da0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da4:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <MX_USART2_UART_Init+0x58>)
 8000da6:	4a15      	ldr	r2, [pc, #84]	@ (8000dfc <MX_USART2_UART_Init+0x5c>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000daa:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <MX_USART2_UART_Init+0x58>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <MX_USART2_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <MX_USART2_UART_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <MX_USART2_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <MX_USART2_UART_Init+0x58>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <MX_USART2_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <MX_USART2_UART_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <MX_USART2_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <MX_USART2_UART_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <MX_USART2_UART_Init+0x58>)
 8000de4:	f002 fc34 	bl	8003650 <HAL_UART_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dee:	f000 f883 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000028c 	.word	0x2000028c
 8000dfc:	40004400 	.word	0x40004400

08000e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e16:	4b22      	ldr	r3, [pc, #136]	@ (8000ea0 <MX_GPIO_Init+0xa0>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a21      	ldr	r2, [pc, #132]	@ (8000ea0 <MX_GPIO_Init+0xa0>)
 8000e1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e20:	6153      	str	r3, [r2, #20]
 8000e22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <MX_GPIO_Init+0xa0>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea0 <MX_GPIO_Init+0xa0>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea0 <MX_GPIO_Init+0xa0>)
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e38:	6153      	str	r3, [r2, #20]
 8000e3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <MX_GPIO_Init+0xa0>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <MX_GPIO_Init+0xa0>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	4a15      	ldr	r2, [pc, #84]	@ (8000ea0 <MX_GPIO_Init+0xa0>)
 8000e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e50:	6153      	str	r3, [r2, #20]
 8000e52:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <MX_GPIO_Init+0xa0>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB1 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8000e5e:	2312      	movs	r3, #18
 8000e60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e62:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4619      	mov	r1, r3
 8000e72:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <MX_GPIO_Init+0xa4>)
 8000e74:	f000 fc84 	bl	8001780 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2007      	movs	r0, #7
 8000e7e:	f000 fbcc 	bl	800161a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e82:	2007      	movs	r0, #7
 8000e84:	f000 fbe5 	bl	8001652 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	200a      	movs	r0, #10
 8000e8e:	f000 fbc4 	bl	800161a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000e92:	200a      	movs	r0, #10
 8000e94:	f000 fbdd 	bl	8001652 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48000400 	.word	0x48000400

08000ea8 <calculate_speed>:

/* USER CODE BEGIN 4 */
float calculate_speed(int16_t time)  {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
	time /= 1000;
 8000eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef0 <calculate_speed+0x48>)
 8000eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ebc:	1192      	asrs	r2, r2, #6
 8000ebe:	17db      	asrs	r3, r3, #31
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	80fb      	strh	r3, [r7, #6]
	float speed = distance / time;
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <calculate_speed+0x4c>)
 8000ec6:	edd3 6a00 	vldr	s13, [r3]
 8000eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eda:	edc7 7a03 	vstr	s15, [r7, #12]
}
 8000ede:	bf00      	nop
 8000ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	10624dd3 	.word	0x10624dd3
 8000ef4:	20000000 	.word	0x20000000

08000ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000efc:	b672      	cpsid	i
}
 8000efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <Error_Handler+0x8>

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <HAL_MspInit+0x44>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f48 <HAL_MspInit+0x44>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6193      	str	r3, [r2, #24]
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <HAL_MspInit+0x44>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <HAL_MspInit+0x44>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a08      	ldr	r2, [pc, #32]	@ (8000f48 <HAL_MspInit+0x44>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_MspInit+0x44>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc4 <HAL_TIM_Base_MspInit+0x78>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d114      	bne.n	8000f88 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <HAL_TIM_Base_MspInit+0x7c>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4a19      	ldr	r2, [pc, #100]	@ (8000fc8 <HAL_TIM_Base_MspInit+0x7c>)
 8000f64:	f043 0310 	orr.w	r3, r3, #16
 8000f68:	61d3      	str	r3, [r2, #28]
 8000f6a:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <HAL_TIM_Base_MspInit+0x7c>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 0310 	and.w	r3, r3, #16
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2036      	movs	r0, #54	@ 0x36
 8000f7c:	f000 fb4d 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000f80:	2036      	movs	r0, #54	@ 0x36
 8000f82:	f000 fb66 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f86:	e018      	b.n	8000fba <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000fcc <HAL_TIM_Base_MspInit+0x80>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d113      	bne.n	8000fba <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f92:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <HAL_TIM_Base_MspInit+0x7c>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc8 <HAL_TIM_Base_MspInit+0x7c>)
 8000f98:	f043 0320 	orr.w	r3, r3, #32
 8000f9c:	61d3      	str	r3, [r2, #28]
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <HAL_TIM_Base_MspInit+0x7c>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f003 0320 	and.w	r3, r3, #32
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2037      	movs	r0, #55	@ 0x37
 8000fb0:	f000 fb33 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8000fb4:	2037      	movs	r0, #55	@ 0x37
 8000fb6:	f000 fb4c 	bl	8001652 <HAL_NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40001000 	.word	0x40001000
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40001400 	.word	0x40001400

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1c      	ldr	r2, [pc, #112]	@ (8001060 <HAL_UART_MspInit+0x90>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d131      	bne.n	8001056 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8001064 <HAL_UART_MspInit+0x94>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8001064 <HAL_UART_MspInit+0x94>)
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <HAL_UART_MspInit+0x94>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <HAL_UART_MspInit+0x94>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a15      	ldr	r2, [pc, #84]	@ (8001064 <HAL_UART_MspInit+0x94>)
 8001010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001014:	6153      	str	r3, [r2, #20]
 8001016:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <HAL_UART_MspInit+0x94>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001022:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001034:	2307      	movs	r3, #7
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001042:	f000 fb9d 	bl	8001780 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2026      	movs	r0, #38	@ 0x26
 800104c:	f000 fae5 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001050:	2026      	movs	r0, #38	@ 0x26
 8001052:	f000 fafe 	bl	8001652 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	@ 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40004400 	.word	0x40004400
 8001064:	40021000 	.word	0x40021000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <NMI_Handler+0x4>

08001070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <MemManage_Handler+0x4>

08001080 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <UsageFault_Handler+0x4>

08001090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010be:	f000 f9b1 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80010cc:	2002      	movs	r0, #2
 80010ce:	f000 fcc9 	bl	8001a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	if (sensor1_crossed == 0 && __HAL_TIM_GET_COUNTER(&htim7) == 0) {
 80010d2:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <EXTI1_IRQHandler+0x34>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10d      	bne.n	80010f6 <EXTI1_IRQHandler+0x2e>
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <EXTI1_IRQHandler+0x38>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d108      	bne.n	80010f6 <EXTI1_IRQHandler+0x2e>
		TIM6->CNT = 0;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <EXTI1_IRQHandler+0x3c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(&htim6);
 80010ea:	4807      	ldr	r0, [pc, #28]	@ (8001108 <EXTI1_IRQHandler+0x40>)
 80010ec:	f001 ff94 	bl	8003018 <HAL_TIM_Base_Start>
		sensor1_crossed = 1;
 80010f0:	4b02      	ldr	r3, [pc, #8]	@ (80010fc <EXTI1_IRQHandler+0x34>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI1_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000316 	.word	0x20000316
 8001100:	20000240 	.word	0x20000240
 8001104:	40001000 	.word	0x40001000
 8001108:	200001f4 	.word	0x200001f4

0800110c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001110:	2010      	movs	r0, #16
 8001112:	f000 fca7 	bl	8001a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if (sensor1_crossed == 1) {
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <EXTI4_IRQHandler+0x34>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d10d      	bne.n	800113a <EXTI4_IRQHandler+0x2e>
	  HAL_TIM_Base_Stop(&htim6);
 800111e:	4809      	ldr	r0, [pc, #36]	@ (8001144 <EXTI4_IRQHandler+0x38>)
 8001120:	f001 ffce 	bl	80030c0 <HAL_TIM_Base_Stop>
	  HAL_TIM_Base_Start_IT(&htim7);
 8001124:	4808      	ldr	r0, [pc, #32]	@ (8001148 <EXTI4_IRQHandler+0x3c>)
 8001126:	f001 fff3 	bl	8003110 <HAL_TIM_Base_Start_IT>
	  time = TIM6->CNT;
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <EXTI4_IRQHandler+0x40>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <EXTI4_IRQHandler+0x44>)
 8001132:	801a      	strh	r2, [r3, #0]
	  sensor1_crossed = 0;
 8001134:	4b02      	ldr	r3, [pc, #8]	@ (8001140 <EXTI4_IRQHandler+0x34>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END EXTI4_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000316 	.word	0x20000316
 8001144:	200001f4 	.word	0x200001f4
 8001148:	20000240 	.word	0x20000240
 800114c:	40001000 	.word	0x40001000
 8001150:	20000314 	.word	0x20000314

08001154 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <USART2_IRQHandler+0x10>)
 800115a:	f002 fb25 	bl	80037a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000028c 	.word	0x2000028c

08001168 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <TIM6_DAC1_IRQHandler+0x10>)
 800116e:	f002 f82b 	bl	80031c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200001f4 	.word	0x200001f4

0800117c <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001180:	4803      	ldr	r0, [pc, #12]	@ (8001190 <TIM7_DAC2_IRQHandler+0x14>)
 8001182:	f002 f821 	bl	80031c8 <HAL_TIM_IRQHandler>
  HAL_TIM_Base_Stop(&htim7);
 8001186:	4802      	ldr	r0, [pc, #8]	@ (8001190 <TIM7_DAC2_IRQHandler+0x14>)
 8001188:	f001 ff9a 	bl	80030c0 <HAL_TIM_Base_Stop>

  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000240 	.word	0x20000240

08001194 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return 1;
 8001198:	2301      	movs	r3, #1
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_kill>:

int _kill(int pid, int sig)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011ae:	f004 f827 	bl	8005200 <__errno>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2216      	movs	r2, #22
 80011b6:	601a      	str	r2, [r3, #0]
  return -1;
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_exit>:

void _exit (int status)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ffe7 	bl	80011a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011d6:	bf00      	nop
 80011d8:	e7fd      	b.n	80011d6 <_exit+0x12>

080011da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	e00a      	b.n	8001202 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011ec:	f3af 8000 	nop.w
 80011f0:	4601      	mov	r1, r0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	60ba      	str	r2, [r7, #8]
 80011f8:	b2ca      	uxtb	r2, r1
 80011fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	429a      	cmp	r2, r3
 8001208:	dbf0      	blt.n	80011ec <_read+0x12>
  }

  return len;
 800120a:	687b      	ldr	r3, [r7, #4]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	e009      	b.n	800123a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	60ba      	str	r2, [r7, #8]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	429a      	cmp	r2, r3
 8001240:	dbf1      	blt.n	8001226 <_write+0x12>
  }
  return len;
 8001242:	687b      	ldr	r3, [r7, #4]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_close>:

int _close(int file)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001274:	605a      	str	r2, [r3, #4]
  return 0;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_isatty>:

int _isatty(int file)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800128c:	2301      	movs	r3, #1
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012bc:	4a14      	ldr	r2, [pc, #80]	@ (8001310 <_sbrk+0x5c>)
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <_sbrk+0x60>)
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c8:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <_sbrk+0x64>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	@ (800131c <_sbrk+0x68>)
 80012d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d207      	bcs.n	80012f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e4:	f003 ff8c 	bl	8005200 <__errno>
 80012e8:	4603      	mov	r3, r0
 80012ea:	220c      	movs	r2, #12
 80012ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e009      	b.n	8001308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f4:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fa:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	4a05      	ldr	r2, [pc, #20]	@ (8001318 <_sbrk+0x64>)
 8001304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001306:	68fb      	ldr	r3, [r7, #12]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20003000 	.word	0x20003000
 8001314:	00000400 	.word	0x00000400
 8001318:	20000318 	.word	0x20000318
 800131c:	20000470 	.word	0x20000470

08001320 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <SystemInit+0x20>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <SystemInit+0x20>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800137c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001348:	f7ff ffea 	bl	8001320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	@ (8001380 <LoopForever+0x6>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	@ (8001384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <LoopForever+0xe>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	@ (8001390 <LoopForever+0x16>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f003 ff4b 	bl	800520c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001376:	f7ff fc17 	bl	8000ba8 <main>

0800137a <LoopForever>:

LoopForever:
    b LoopForever
 800137a:	e7fe      	b.n	800137a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800137c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001388:	080076e8 	.word	0x080076e8
  ldr r2, =_sbss
 800138c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001390:	2000046c 	.word	0x2000046c

08001394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC1_2_IRQHandler>
	...

08001398 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <HAL_Init+0x28>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	@ (80013c0 <HAL_Init+0x28>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f92b 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f000 f808 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff fda6 	bl	8000f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40022000 	.word	0x40022000

080013c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_InitTick+0x54>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_InitTick+0x58>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f943 	bl	800166e <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00e      	b.n	8001410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d80a      	bhi.n	800140e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f000 f90b 	bl	800161a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001404:	4a06      	ldr	r2, [pc, #24]	@ (8001420 <HAL_InitTick+0x5c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000004 	.word	0x20000004
 800141c:	2000000c 	.word	0x2000000c
 8001420:	20000008 	.word	0x20000008

08001424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_IncTick+0x20>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_IncTick+0x24>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <HAL_IncTick+0x24>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	2000000c 	.word	0x2000000c
 8001448:	2000031c 	.word	0x2000031c

0800144c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001450:	4b03      	ldr	r3, [pc, #12]	@ (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2000031c 	.word	0x2000031c

08001464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4907      	ldr	r1, [pc, #28]	@ (8001500 <__NVIC_EnableIRQ+0x38>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	@ (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	@ (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	@ 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	@ 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d0:	d301      	bcc.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00f      	b.n	80015f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <SysTick_Config+0x40>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	210f      	movs	r1, #15
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f7ff ff8e 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <SysTick_Config+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <SysTick_Config+0x40>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff29 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff3e 	bl	80014ac <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ff8e 	bl	8001558 <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff5d 	bl	8001504 <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff31 	bl	80014c8 <__NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffa2 	bl	80015c0 <SysTick_Config>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e02e      	b.n	80016f6 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d008      	beq.n	80016b4 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2204      	movs	r2, #4
 80016a6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e020      	b.n	80016f6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 020e 	bic.w	r2, r2, #14
 80016c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016dc:	2101      	movs	r1, #1
 80016de:	fa01 f202 	lsl.w	r2, r1, r2
 80016e2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001714:	2b02      	cmp	r3, #2
 8001716:	d005      	beq.n	8001724 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2204      	movs	r2, #4
 800171c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	e027      	b.n	8001774 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 020e 	bic.w	r2, r2, #14
 8001732:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0201 	bic.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	4798      	blx	r3
    }
  }
  return status;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	e14e      	b.n	8001a2e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2101      	movs	r1, #1
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8140 	beq.w	8001a28 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d005      	beq.n	80017c0 <HAL_GPIO_Init+0x40>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d130      	bne.n	8001822 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f6:	2201      	movs	r2, #1
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	f003 0201 	and.w	r2, r3, #1
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b03      	cmp	r3, #3
 800182c:	d017      	beq.n	800185e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d123      	bne.n	80018b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	220f      	movs	r2, #15
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	691a      	ldr	r2, [r3, #16]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	6939      	ldr	r1, [r7, #16]
 80018ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0203 	and.w	r2, r3, #3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 809a 	beq.w	8001a28 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f4:	4b55      	ldr	r3, [pc, #340]	@ (8001a4c <HAL_GPIO_Init+0x2cc>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a54      	ldr	r2, [pc, #336]	@ (8001a4c <HAL_GPIO_Init+0x2cc>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b52      	ldr	r3, [pc, #328]	@ (8001a4c <HAL_GPIO_Init+0x2cc>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800190c:	4a50      	ldr	r2, [pc, #320]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3302      	adds	r3, #2
 8001914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	220f      	movs	r2, #15
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001936:	d013      	beq.n	8001960 <HAL_GPIO_Init+0x1e0>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a46      	ldr	r2, [pc, #280]	@ (8001a54 <HAL_GPIO_Init+0x2d4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00d      	beq.n	800195c <HAL_GPIO_Init+0x1dc>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a45      	ldr	r2, [pc, #276]	@ (8001a58 <HAL_GPIO_Init+0x2d8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d007      	beq.n	8001958 <HAL_GPIO_Init+0x1d8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a44      	ldr	r2, [pc, #272]	@ (8001a5c <HAL_GPIO_Init+0x2dc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d101      	bne.n	8001954 <HAL_GPIO_Init+0x1d4>
 8001950:	2303      	movs	r3, #3
 8001952:	e006      	b.n	8001962 <HAL_GPIO_Init+0x1e2>
 8001954:	2305      	movs	r3, #5
 8001956:	e004      	b.n	8001962 <HAL_GPIO_Init+0x1e2>
 8001958:	2302      	movs	r3, #2
 800195a:	e002      	b.n	8001962 <HAL_GPIO_Init+0x1e2>
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_GPIO_Init+0x1e2>
 8001960:	2300      	movs	r3, #0
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	f002 0203 	and.w	r2, r2, #3
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	4093      	lsls	r3, r2
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001972:	4937      	ldr	r1, [pc, #220]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001980:	4b37      	ldr	r3, [pc, #220]	@ (8001a60 <HAL_GPIO_Init+0x2e0>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	43db      	mvns	r3, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019a4:	4a2e      	ldr	r2, [pc, #184]	@ (8001a60 <HAL_GPIO_Init+0x2e0>)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001a60 <HAL_GPIO_Init+0x2e0>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019ce:	4a24      	ldr	r2, [pc, #144]	@ (8001a60 <HAL_GPIO_Init+0x2e0>)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019d4:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <HAL_GPIO_Init+0x2e0>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019f8:	4a19      	ldr	r2, [pc, #100]	@ (8001a60 <HAL_GPIO_Init+0x2e0>)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <HAL_GPIO_Init+0x2e0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a22:	4a0f      	ldr	r2, [pc, #60]	@ (8001a60 <HAL_GPIO_Init+0x2e0>)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f47f aea9 	bne.w	8001790 <HAL_GPIO_Init+0x10>
  }
}
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
 8001a42:	371c      	adds	r7, #28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010000 	.word	0x40010000
 8001a54:	48000400 	.word	0x48000400
 8001a58:	48000800 	.word	0x48000800
 8001a5c:	48000c00 	.word	0x48000c00
 8001a60:	40010400 	.word	0x40010400

08001a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a6e:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a7a:	4a05      	ldr	r2, [pc, #20]	@ (8001a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f806 	bl	8001a94 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001abc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f001 b823 	b.w	8002b18 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 817d 	beq.w	8001de2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ae8:	4bbc      	ldr	r3, [pc, #752]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d00c      	beq.n	8001b0e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af4:	4bb9      	ldr	r3, [pc, #740]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d15c      	bne.n	8001bba <HAL_RCC_OscConfig+0x10e>
 8001b00:	4bb6      	ldr	r3, [pc, #728]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b0c:	d155      	bne.n	8001bba <HAL_RCC_OscConfig+0x10e>
 8001b0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b12:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b22:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	095b      	lsrs	r3, r3, #5
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d102      	bne.n	8001b40 <HAL_RCC_OscConfig+0x94>
 8001b3a:	4ba8      	ldr	r3, [pc, #672]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	e015      	b.n	8001b6c <HAL_RCC_OscConfig+0xc0>
 8001b40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b44:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001b54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b58:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001b5c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001b68:	4b9c      	ldr	r3, [pc, #624]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b70:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001b74:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001b78:	fa92 f2a2 	rbit	r2, r2
 8001b7c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001b80:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	f042 0220 	orr.w	r2, r2, #32
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f002 021f 	and.w	r2, r2, #31
 8001b94:	2101      	movs	r1, #1
 8001b96:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 811f 	beq.w	8001de0 <HAL_RCC_OscConfig+0x334>
 8001ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 8116 	bne.w	8001de0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f000 bfaf 	b.w	8002b18 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x12e>
 8001bcc:	4b83      	ldr	r3, [pc, #524]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a82      	ldr	r2, [pc, #520]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e036      	b.n	8001c48 <HAL_RCC_OscConfig+0x19c>
 8001bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x158>
 8001bea:	4b7c      	ldr	r3, [pc, #496]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a7b      	ldr	r2, [pc, #492]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001bf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b79      	ldr	r3, [pc, #484]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a78      	ldr	r2, [pc, #480]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001bfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e021      	b.n	8001c48 <HAL_RCC_OscConfig+0x19c>
 8001c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x184>
 8001c16:	4b71      	ldr	r3, [pc, #452]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a70      	ldr	r2, [pc, #448]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b6e      	ldr	r3, [pc, #440]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6d      	ldr	r2, [pc, #436]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0x19c>
 8001c30:	4b6a      	ldr	r3, [pc, #424]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a69      	ldr	r2, [pc, #420]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b67      	ldr	r3, [pc, #412]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a66      	ldr	r2, [pc, #408]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c46:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c48:	4b64      	ldr	r3, [pc, #400]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4c:	f023 020f 	bic.w	r2, r3, #15
 8001c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	495f      	ldr	r1, [pc, #380]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d059      	beq.n	8001d26 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7ff fbeb 	bl	800144c <HAL_GetTick>
 8001c76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff fbe6 	bl	800144c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b64      	cmp	r3, #100	@ 0x64
 8001c8a:	d902      	bls.n	8001c92 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	f000 bf43 	b.w	8002b18 <HAL_RCC_OscConfig+0x106c>
 8001c92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c96:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001ca6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	095b      	lsrs	r3, r3, #5
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d102      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x218>
 8001cbe:	4b47      	ldr	r3, [pc, #284]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	e015      	b.n	8001cf0 <HAL_RCC_OscConfig+0x244>
 8001cc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cc8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001cd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cdc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001ce0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001cec:	4b3b      	ldr	r3, [pc, #236]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cf4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001cf8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001cfc:	fa92 f2a2 	rbit	r2, r2
 8001d00:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001d04:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001d08:	fab2 f282 	clz	r2, r2
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	f042 0220 	orr.w	r2, r2, #32
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	f002 021f 	and.w	r2, r2, #31
 8001d18:	2101      	movs	r1, #1
 8001d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ab      	beq.n	8001c7c <HAL_RCC_OscConfig+0x1d0>
 8001d24:	e05d      	b.n	8001de2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7ff fb91 	bl	800144c <HAL_GetTick>
 8001d2a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fb8c 	bl	800144c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b64      	cmp	r3, #100	@ 0x64
 8001d3e:	d902      	bls.n	8001d46 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	f000 bee9 	b.w	8002b18 <HAL_RCC_OscConfig+0x106c>
 8001d46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d4a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001d5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	095b      	lsrs	r3, r3, #5
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <HAL_RCC_OscConfig+0x2cc>
 8001d72:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	e015      	b.n	8001da4 <HAL_RCC_OscConfig+0x2f8>
 8001d78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d7c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001d8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d90:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001d94:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001da0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <HAL_RCC_OscConfig+0x330>)
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001da8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001dac:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001db0:	fa92 f2a2 	rbit	r2, r2
 8001db4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001db8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001dbc:	fab2 f282 	clz	r2, r2
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	f042 0220 	orr.w	r2, r2, #32
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	f002 021f 	and.w	r2, r2, #31
 8001dcc:	2101      	movs	r1, #1
 8001dce:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ab      	bne.n	8001d30 <HAL_RCC_OscConfig+0x284>
 8001dd8:	e003      	b.n	8001de2 <HAL_RCC_OscConfig+0x336>
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 817d 	beq.w	80020f2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001df8:	4ba6      	ldr	r3, [pc, #664]	@ (8002094 <HAL_RCC_OscConfig+0x5e8>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00b      	beq.n	8001e1c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e04:	4ba3      	ldr	r3, [pc, #652]	@ (8002094 <HAL_RCC_OscConfig+0x5e8>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d172      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x44a>
 8001e10:	4ba0      	ldr	r3, [pc, #640]	@ (8002094 <HAL_RCC_OscConfig+0x5e8>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d16c      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x44a>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001e2e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d102      	bne.n	8001e4c <HAL_RCC_OscConfig+0x3a0>
 8001e46:	4b93      	ldr	r3, [pc, #588]	@ (8002094 <HAL_RCC_OscConfig+0x5e8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	e013      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c8>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001e64:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001e68:	fa93 f3a3 	rbit	r3, r3
 8001e6c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001e70:	4b88      	ldr	r3, [pc, #544]	@ (8002094 <HAL_RCC_OscConfig+0x5e8>)
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	2202      	movs	r2, #2
 8001e76:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001e7a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001e7e:	fa92 f2a2 	rbit	r2, r2
 8001e82:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001e86:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001e8a:	fab2 f282 	clz	r2, r2
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	f042 0220 	orr.w	r2, r2, #32
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	f002 021f 	and.w	r2, r2, #31
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_RCC_OscConfig+0x410>
 8001ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eaa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d002      	beq.n	8001ebc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f000 be2e 	b.w	8002b18 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b75      	ldr	r3, [pc, #468]	@ (8002094 <HAL_RCC_OscConfig+0x5e8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	21f8      	movs	r1, #248	@ 0xf8
 8001ed2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001eda:	fa91 f1a1 	rbit	r1, r1
 8001ede:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001ee2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001ee6:	fab1 f181 	clz	r1, r1
 8001eea:	b2c9      	uxtb	r1, r1
 8001eec:	408b      	lsls	r3, r1
 8001eee:	4969      	ldr	r1, [pc, #420]	@ (8002094 <HAL_RCC_OscConfig+0x5e8>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef4:	e0fd      	b.n	80020f2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8088 	beq.w	8002018 <HAL_RCC_OscConfig+0x56c>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001f1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f28:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2301      	movs	r3, #1
 8001f32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff fa8a 	bl	800144c <HAL_GetTick>
 8001f38:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f3e:	f7ff fa85 	bl	800144c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d902      	bls.n	8001f54 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	f000 bde2 	b.w	8002b18 <HAL_RCC_OscConfig+0x106c>
 8001f54:	2302      	movs	r3, #2
 8001f56:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001f66:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	095b      	lsrs	r3, r3, #5
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d102      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4d8>
 8001f7e:	4b45      	ldr	r3, [pc, #276]	@ (8002094 <HAL_RCC_OscConfig+0x5e8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	e013      	b.n	8001fac <HAL_RCC_OscConfig+0x500>
 8001f84:	2302      	movs	r3, #2
 8001f86:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001f96:	2302      	movs	r3, #2
 8001f98:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001f9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8002094 <HAL_RCC_OscConfig+0x5e8>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fac:	2202      	movs	r2, #2
 8001fae:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001fb2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001fb6:	fa92 f2a2 	rbit	r2, r2
 8001fba:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001fbe:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001fc2:	fab2 f282 	clz	r2, r2
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	f042 0220 	orr.w	r2, r2, #32
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	f002 021f 	and.w	r2, r2, #31
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0af      	beq.n	8001f3e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fde:	4b2d      	ldr	r3, [pc, #180]	@ (8002094 <HAL_RCC_OscConfig+0x5e8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	21f8      	movs	r1, #248	@ 0xf8
 8001ff4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001ffc:	fa91 f1a1 	rbit	r1, r1
 8002000:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002004:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002008:	fab1 f181 	clz	r1, r1
 800200c:	b2c9      	uxtb	r1, r1
 800200e:	408b      	lsls	r3, r1
 8002010:	4920      	ldr	r1, [pc, #128]	@ (8002094 <HAL_RCC_OscConfig+0x5e8>)
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
 8002016:	e06c      	b.n	80020f2 <HAL_RCC_OscConfig+0x646>
 8002018:	2301      	movs	r3, #1
 800201a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800202a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002038:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	461a      	mov	r2, r3
 8002040:	2300      	movs	r3, #0
 8002042:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fa02 	bl	800144c <HAL_GetTick>
 8002048:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204e:	f7ff f9fd 	bl	800144c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d902      	bls.n	8002064 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	f000 bd5a 	b.w	8002b18 <HAL_RCC_OscConfig+0x106c>
 8002064:	2302      	movs	r3, #2
 8002066:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002076:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d104      	bne.n	8002098 <HAL_RCC_OscConfig+0x5ec>
 800208e:	4b01      	ldr	r3, [pc, #4]	@ (8002094 <HAL_RCC_OscConfig+0x5e8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	e015      	b.n	80020c0 <HAL_RCC_OscConfig+0x614>
 8002094:	40021000 	.word	0x40021000
 8002098:	2302      	movs	r3, #2
 800209a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80020aa:	2302      	movs	r3, #2
 80020ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80020b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80020bc:	4bc8      	ldr	r3, [pc, #800]	@ (80023e0 <HAL_RCC_OscConfig+0x934>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c0:	2202      	movs	r2, #2
 80020c2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80020c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80020ca:	fa92 f2a2 	rbit	r2, r2
 80020ce:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80020d2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80020d6:	fab2 f282 	clz	r2, r2
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	f042 0220 	orr.w	r2, r2, #32
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	f002 021f 	and.w	r2, r2, #31
 80020e6:	2101      	movs	r1, #1
 80020e8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ad      	bne.n	800204e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8110 	beq.w	8002328 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d079      	beq.n	800220c <HAL_RCC_OscConfig+0x760>
 8002118:	2301      	movs	r3, #1
 800211a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800212a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	4bab      	ldr	r3, [pc, #684]	@ (80023e4 <HAL_RCC_OscConfig+0x938>)
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	461a      	mov	r2, r3
 800213e:	2301      	movs	r3, #1
 8002140:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002142:	f7ff f983 	bl	800144c <HAL_GetTick>
 8002146:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214a:	e00a      	b.n	8002162 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214c:	f7ff f97e 	bl	800144c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d902      	bls.n	8002162 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	f000 bcdb 	b.w	8002b18 <HAL_RCC_OscConfig+0x106c>
 8002162:	2302      	movs	r3, #2
 8002164:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002178:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800217c:	2202      	movs	r2, #2
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002184:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	fa93 f2a3 	rbit	r2, r3
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021a0:	2202      	movs	r2, #2
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	fa93 f2a3 	rbit	r2, r3
 80021b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021bc:	4b88      	ldr	r3, [pc, #544]	@ (80023e0 <HAL_RCC_OscConfig+0x934>)
 80021be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021c8:	2102      	movs	r1, #2
 80021ca:	6019      	str	r1, [r3, #0]
 80021cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	fa93 f1a3 	rbit	r1, r3
 80021da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021e2:	6019      	str	r1, [r3, #0]
  return result;
 80021e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	2101      	movs	r1, #1
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	4013      	ands	r3, r2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0a0      	beq.n	800214c <HAL_RCC_OscConfig+0x6a0>
 800220a:	e08d      	b.n	8002328 <HAL_RCC_OscConfig+0x87c>
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002214:	2201      	movs	r2, #1
 8002216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	fa93 f2a3 	rbit	r2, r3
 8002226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800222e:	601a      	str	r2, [r3, #0]
  return result;
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002238:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	4b68      	ldr	r3, [pc, #416]	@ (80023e4 <HAL_RCC_OscConfig+0x938>)
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	461a      	mov	r2, r3
 800224a:	2300      	movs	r3, #0
 800224c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224e:	f7ff f8fd 	bl	800144c <HAL_GetTick>
 8002252:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002256:	e00a      	b.n	800226e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002258:	f7ff f8f8 	bl	800144c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d902      	bls.n	800226e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	f000 bc55 	b.w	8002b18 <HAL_RCC_OscConfig+0x106c>
 800226e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002272:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002276:	2202      	movs	r2, #2
 8002278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fa93 f2a3 	rbit	r2, r3
 8002288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002296:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800229a:	2202      	movs	r2, #2
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	fa93 f2a3 	rbit	r2, r3
 80022ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022be:	2202      	movs	r2, #2
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f2a3 	rbit	r2, r3
 80022d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80022d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022da:	4b41      	ldr	r3, [pc, #260]	@ (80023e0 <HAL_RCC_OscConfig+0x934>)
 80022dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80022e6:	2102      	movs	r1, #2
 80022e8:	6019      	str	r1, [r3, #0]
 80022ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ee:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	fa93 f1a3 	rbit	r1, r3
 80022f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002300:	6019      	str	r1, [r3, #0]
  return result;
 8002302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002306:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d197      	bne.n	8002258 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 81a1 	beq.w	8002680 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002344:	4b26      	ldr	r3, [pc, #152]	@ (80023e0 <HAL_RCC_OscConfig+0x934>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d116      	bne.n	800237e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002350:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <HAL_RCC_OscConfig+0x934>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	4a22      	ldr	r2, [pc, #136]	@ (80023e0 <HAL_RCC_OscConfig+0x934>)
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800235a:	61d3      	str	r3, [r2, #28]
 800235c:	4b20      	ldr	r3, [pc, #128]	@ (80023e0 <HAL_RCC_OscConfig+0x934>)
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002368:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002372:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002376:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002378:	2301      	movs	r3, #1
 800237a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <HAL_RCC_OscConfig+0x93c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d11a      	bne.n	80023c0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238a:	4b17      	ldr	r3, [pc, #92]	@ (80023e8 <HAL_RCC_OscConfig+0x93c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a16      	ldr	r2, [pc, #88]	@ (80023e8 <HAL_RCC_OscConfig+0x93c>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002394:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002396:	f7ff f859 	bl	800144c <HAL_GetTick>
 800239a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	e009      	b.n	80023b4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a0:	f7ff f854 	bl	800144c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b64      	cmp	r3, #100	@ 0x64
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e3b1      	b.n	8002b18 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b4:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <HAL_RCC_OscConfig+0x93c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0ef      	beq.n	80023a0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d10d      	bne.n	80023ec <HAL_RCC_OscConfig+0x940>
 80023d0:	4b03      	ldr	r3, [pc, #12]	@ (80023e0 <HAL_RCC_OscConfig+0x934>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a02      	ldr	r2, [pc, #8]	@ (80023e0 <HAL_RCC_OscConfig+0x934>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6213      	str	r3, [r2, #32]
 80023dc:	e03c      	b.n	8002458 <HAL_RCC_OscConfig+0x9ac>
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	10908120 	.word	0x10908120
 80023e8:	40007000 	.word	0x40007000
 80023ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10c      	bne.n	8002416 <HAL_RCC_OscConfig+0x96a>
 80023fc:	4bc1      	ldr	r3, [pc, #772]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4ac0      	ldr	r2, [pc, #768]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	4bbe      	ldr	r3, [pc, #760]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4abd      	ldr	r2, [pc, #756]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 800240e:	f023 0304 	bic.w	r3, r3, #4
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	e020      	b.n	8002458 <HAL_RCC_OscConfig+0x9ac>
 8002416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b05      	cmp	r3, #5
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x994>
 8002426:	4bb7      	ldr	r3, [pc, #732]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4ab6      	ldr	r2, [pc, #728]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	6213      	str	r3, [r2, #32]
 8002432:	4bb4      	ldr	r3, [pc, #720]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4ab3      	ldr	r2, [pc, #716]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6213      	str	r3, [r2, #32]
 800243e:	e00b      	b.n	8002458 <HAL_RCC_OscConfig+0x9ac>
 8002440:	4bb0      	ldr	r3, [pc, #704]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4aaf      	ldr	r2, [pc, #700]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	4bad      	ldr	r3, [pc, #692]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4aac      	ldr	r2, [pc, #688]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 8002452:	f023 0304 	bic.w	r3, r3, #4
 8002456:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8081 	beq.w	800256c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7fe ffef 	bl	800144c <HAL_GetTick>
 800246e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002472:	e00b      	b.n	800248c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002474:	f7fe ffea 	bl	800144c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e345      	b.n	8002b18 <HAL_RCC_OscConfig+0x106c>
 800248c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002490:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002494:	2202      	movs	r2, #2
 8002496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	fa93 f2a3 	rbit	r2, r3
 80024a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024aa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024b8:	2202      	movs	r2, #2
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	fa93 f2a3 	rbit	r2, r3
 80024ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ce:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80024d2:	601a      	str	r2, [r3, #0]
  return result;
 80024d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80024dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d102      	bne.n	80024f8 <HAL_RCC_OscConfig+0xa4c>
 80024f2:	4b84      	ldr	r3, [pc, #528]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	e013      	b.n	8002520 <HAL_RCC_OscConfig+0xa74>
 80024f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002500:	2202      	movs	r2, #2
 8002502:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002508:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	fa93 f2a3 	rbit	r2, r3
 8002512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002516:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	4b79      	ldr	r3, [pc, #484]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002524:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002528:	2102      	movs	r1, #2
 800252a:	6011      	str	r1, [r2, #0]
 800252c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002530:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	fa92 f1a2 	rbit	r1, r2
 800253a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800253e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002542:	6011      	str	r1, [r2, #0]
  return result;
 8002544:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002548:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	fab2 f282 	clz	r2, r2
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f002 021f 	and.w	r2, r2, #31
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d084      	beq.n	8002474 <HAL_RCC_OscConfig+0x9c8>
 800256a:	e07f      	b.n	800266c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256c:	f7fe ff6e 	bl	800144c <HAL_GetTick>
 8002570:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002574:	e00b      	b.n	800258e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe ff69 	bl	800144c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e2c4      	b.n	8002b18 <HAL_RCC_OscConfig+0x106c>
 800258e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002592:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002596:	2202      	movs	r2, #2
 8002598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	fa93 f2a3 	rbit	r2, r3
 80025a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ac:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025ba:	2202      	movs	r2, #2
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fa93 f2a3 	rbit	r2, r3
 80025cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80025d4:	601a      	str	r2, [r3, #0]
  return result;
 80025d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025da:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80025de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f043 0302 	orr.w	r3, r3, #2
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d102      	bne.n	80025fa <HAL_RCC_OscConfig+0xb4e>
 80025f4:	4b43      	ldr	r3, [pc, #268]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	e013      	b.n	8002622 <HAL_RCC_OscConfig+0xb76>
 80025fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002602:	2202      	movs	r2, #2
 8002604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	fa93 f2a3 	rbit	r2, r3
 8002614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002618:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	4b39      	ldr	r3, [pc, #228]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002626:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800262a:	2102      	movs	r1, #2
 800262c:	6011      	str	r1, [r2, #0]
 800262e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002632:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	fa92 f1a2 	rbit	r1, r2
 800263c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002640:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002644:	6011      	str	r1, [r2, #0]
  return result;
 8002646:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800264a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	fab2 f282 	clz	r2, r2
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	f002 021f 	and.w	r2, r2, #31
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f202 	lsl.w	r2, r1, r2
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d184      	bne.n	8002576 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800266c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002670:	2b01      	cmp	r3, #1
 8002672:	d105      	bne.n	8002680 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002674:	4b23      	ldr	r3, [pc, #140]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	4a22      	ldr	r2, [pc, #136]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 800267a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800267e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002684:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8242 	beq.w	8002b16 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002692:	4b1c      	ldr	r3, [pc, #112]	@ (8002704 <HAL_RCC_OscConfig+0xc58>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b08      	cmp	r3, #8
 800269c:	f000 8213 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	f040 8162 	bne.w	8002976 <HAL_RCC_OscConfig+0xeca>
 80026b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	fa93 f2a3 	rbit	r2, r3
 80026ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026d6:	601a      	str	r2, [r3, #0]
  return result;
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	461a      	mov	r2, r3
 80026f4:	2300      	movs	r3, #0
 80026f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fea8 	bl	800144c <HAL_GetTick>
 80026fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002700:	e00c      	b.n	800271c <HAL_RCC_OscConfig+0xc70>
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002708:	f7fe fea0 	bl	800144c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e1fd      	b.n	8002b18 <HAL_RCC_OscConfig+0x106c>
 800271c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002720:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002724:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	fa93 f2a3 	rbit	r2, r3
 8002738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002740:	601a      	str	r2, [r3, #0]
  return result;
 8002742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002746:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800274a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b01      	cmp	r3, #1
 800275e:	d102      	bne.n	8002766 <HAL_RCC_OscConfig+0xcba>
 8002760:	4bb0      	ldr	r3, [pc, #704]	@ (8002a24 <HAL_RCC_OscConfig+0xf78>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	e027      	b.n	80027b6 <HAL_RCC_OscConfig+0xd0a>
 8002766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800276e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002778:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fa93 f2a3 	rbit	r2, r3
 8002782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002786:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002790:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002794:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	fa93 f2a3 	rbit	r2, r3
 80027a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ac:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	4b9c      	ldr	r3, [pc, #624]	@ (8002a24 <HAL_RCC_OscConfig+0xf78>)
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ba:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027be:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027c2:	6011      	str	r1, [r2, #0]
 80027c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027c8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	fa92 f1a2 	rbit	r1, r2
 80027d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027d6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80027da:	6011      	str	r1, [r2, #0]
  return result;
 80027dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027e0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	fab2 f282 	clz	r2, r2
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	f042 0220 	orr.w	r2, r2, #32
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	f002 021f 	and.w	r2, r2, #31
 80027f6:	2101      	movs	r1, #1
 80027f8:	fa01 f202 	lsl.w	r2, r1, r2
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d182      	bne.n	8002708 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002802:	4b88      	ldr	r3, [pc, #544]	@ (8002a24 <HAL_RCC_OscConfig+0xf78>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800280a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	430b      	orrs	r3, r1
 8002824:	497f      	ldr	r1, [pc, #508]	@ (8002a24 <HAL_RCC_OscConfig+0xf78>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
 800282a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002832:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	fa93 f2a3 	rbit	r2, r3
 8002846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800284e:	601a      	str	r2, [r3, #0]
  return result;
 8002850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002854:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002858:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002864:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	461a      	mov	r2, r3
 800286c:	2301      	movs	r3, #1
 800286e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe fdec 	bl	800144c <HAL_GetTick>
 8002874:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002878:	e009      	b.n	800288e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe fde7 	bl	800144c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e144      	b.n	8002b18 <HAL_RCC_OscConfig+0x106c>
 800288e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002892:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002896:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800289a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	fa93 f2a3 	rbit	r2, r3
 80028aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ae:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028b2:	601a      	str	r2, [r3, #0]
  return result;
 80028b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d102      	bne.n	80028d8 <HAL_RCC_OscConfig+0xe2c>
 80028d2:	4b54      	ldr	r3, [pc, #336]	@ (8002a24 <HAL_RCC_OscConfig+0xf78>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	e027      	b.n	8002928 <HAL_RCC_OscConfig+0xe7c>
 80028d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028dc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80028e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ea:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fa93 f2a3 	rbit	r2, r3
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002902:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002906:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002910:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	fa93 f2a3 	rbit	r2, r3
 800291a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	4b3f      	ldr	r3, [pc, #252]	@ (8002a24 <HAL_RCC_OscConfig+0xf78>)
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800292c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002930:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002934:	6011      	str	r1, [r2, #0]
 8002936:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800293a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	fa92 f1a2 	rbit	r1, r2
 8002944:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002948:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800294c:	6011      	str	r1, [r2, #0]
  return result;
 800294e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002952:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	fab2 f282 	clz	r2, r2
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	f042 0220 	orr.w	r2, r2, #32
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	f002 021f 	and.w	r2, r2, #31
 8002968:	2101      	movs	r1, #1
 800296a:	fa01 f202 	lsl.w	r2, r1, r2
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d082      	beq.n	800287a <HAL_RCC_OscConfig+0xdce>
 8002974:	e0cf      	b.n	8002b16 <HAL_RCC_OscConfig+0x106a>
 8002976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800297e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002988:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	fa93 f2a3 	rbit	r2, r3
 8002992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002996:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800299a:	601a      	str	r2, [r3, #0]
  return result;
 800299c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	461a      	mov	r2, r3
 80029b8:	2300      	movs	r3, #0
 80029ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fe fd46 	bl	800144c <HAL_GetTick>
 80029c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c4:	e009      	b.n	80029da <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c6:	f7fe fd41 	bl	800144c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e09e      	b.n	8002b18 <HAL_RCC_OscConfig+0x106c>
 80029da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029de:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ec:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	fa93 f2a3 	rbit	r2, r3
 80029f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80029fe:	601a      	str	r2, [r3, #0]
  return result;
 8002a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a04:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d104      	bne.n	8002a28 <HAL_RCC_OscConfig+0xf7c>
 8002a1e:	4b01      	ldr	r3, [pc, #4]	@ (8002a24 <HAL_RCC_OscConfig+0xf78>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	e029      	b.n	8002a78 <HAL_RCC_OscConfig+0xfcc>
 8002a24:	40021000 	.word	0x40021000
 8002a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	fa93 f2a3 	rbit	r2, r3
 8002a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a48:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a52:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a60:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	4b2b      	ldr	r3, [pc, #172]	@ (8002b24 <HAL_RCC_OscConfig+0x1078>)
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a7c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a80:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a84:	6011      	str	r1, [r2, #0]
 8002a86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a8a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	fa92 f1a2 	rbit	r1, r2
 8002a94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a98:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a9c:	6011      	str	r1, [r2, #0]
  return result;
 8002a9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aa2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	fab2 f282 	clz	r2, r2
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f042 0220 	orr.w	r2, r2, #32
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	f002 021f 	and.w	r2, r2, #31
 8002ab8:	2101      	movs	r1, #1
 8002aba:	fa01 f202 	lsl.w	r2, r1, r2
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d180      	bne.n	80029c6 <HAL_RCC_OscConfig+0xf1a>
 8002ac4:	e027      	b.n	8002b16 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e01e      	b.n	8002b18 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ada:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <HAL_RCC_OscConfig+0x1078>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ae2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002ae6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d10b      	bne.n	8002b12 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002afa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002afe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d001      	beq.n	8002b16 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000

08002b28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b09e      	sub	sp, #120	@ 0x78
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e162      	b.n	8002e06 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b40:	4b90      	ldr	r3, [pc, #576]	@ (8002d84 <HAL_RCC_ClockConfig+0x25c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d910      	bls.n	8002b70 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b8d      	ldr	r3, [pc, #564]	@ (8002d84 <HAL_RCC_ClockConfig+0x25c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 0207 	bic.w	r2, r3, #7
 8002b56:	498b      	ldr	r1, [pc, #556]	@ (8002d84 <HAL_RCC_ClockConfig+0x25c>)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b89      	ldr	r3, [pc, #548]	@ (8002d84 <HAL_RCC_ClockConfig+0x25c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e14a      	b.n	8002e06 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b7c:	4b82      	ldr	r3, [pc, #520]	@ (8002d88 <HAL_RCC_ClockConfig+0x260>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	497f      	ldr	r1, [pc, #508]	@ (8002d88 <HAL_RCC_ClockConfig+0x260>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80dc 	beq.w	8002d54 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d13c      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xf6>
 8002ba4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ba8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002bb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d102      	bne.n	8002bce <HAL_RCC_ClockConfig+0xa6>
 8002bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8002d88 <HAL_RCC_ClockConfig+0x260>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	e00f      	b.n	8002bee <HAL_RCC_ClockConfig+0xc6>
 8002bce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002be0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002be2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bea:	4b67      	ldr	r3, [pc, #412]	@ (8002d88 <HAL_RCC_ClockConfig+0x260>)
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bf2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002bf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bf6:	fa92 f2a2 	rbit	r2, r2
 8002bfa:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002bfc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002bfe:	fab2 f282 	clz	r2, r2
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	f042 0220 	orr.w	r2, r2, #32
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	f002 021f 	and.w	r2, r2, #31
 8002c0e:	2101      	movs	r1, #1
 8002c10:	fa01 f202 	lsl.w	r2, r1, r2
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d17b      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e0f3      	b.n	8002e06 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d13c      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x178>
 8002c26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c2a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d102      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x128>
 8002c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d88 <HAL_RCC_ClockConfig+0x260>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	e00f      	b.n	8002c70 <HAL_RCC_ClockConfig+0x148>
 8002c50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c62:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c6c:	4b46      	ldr	r3, [pc, #280]	@ (8002d88 <HAL_RCC_ClockConfig+0x260>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c74:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c78:	fa92 f2a2 	rbit	r2, r2
 8002c7c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002c7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c80:	fab2 f282 	clz	r2, r2
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	f042 0220 	orr.w	r2, r2, #32
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	f002 021f 	and.w	r2, r2, #31
 8002c90:	2101      	movs	r1, #1
 8002c92:	fa01 f202 	lsl.w	r2, r1, r2
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d13a      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0b2      	b.n	8002e06 <HAL_RCC_ClockConfig+0x2de>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d102      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x1a0>
 8002cc2:	4b31      	ldr	r3, [pc, #196]	@ (8002d88 <HAL_RCC_ClockConfig+0x260>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	e00d      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1bc>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	623b      	str	r3, [r7, #32]
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	4b29      	ldr	r3, [pc, #164]	@ (8002d88 <HAL_RCC_ClockConfig+0x260>)
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	61ba      	str	r2, [r7, #24]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	fa92 f2a2 	rbit	r2, r2
 8002cee:	617a      	str	r2, [r7, #20]
  return result;
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	fab2 f282 	clz	r2, r2
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	f042 0220 	orr.w	r2, r2, #32
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	f002 021f 	and.w	r2, r2, #31
 8002d02:	2101      	movs	r1, #1
 8002d04:	fa01 f202 	lsl.w	r2, r1, r2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e079      	b.n	8002e06 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d12:	4b1d      	ldr	r3, [pc, #116]	@ (8002d88 <HAL_RCC_ClockConfig+0x260>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	491a      	ldr	r1, [pc, #104]	@ (8002d88 <HAL_RCC_ClockConfig+0x260>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d24:	f7fe fb92 	bl	800144c <HAL_GetTick>
 8002d28:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2c:	f7fe fb8e 	bl	800144c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e061      	b.n	8002e06 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <HAL_RCC_ClockConfig+0x260>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 020c 	and.w	r2, r3, #12
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d1eb      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_RCC_ClockConfig+0x25c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d214      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <HAL_RCC_ClockConfig+0x25c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 0207 	bic.w	r2, r3, #7
 8002d6a:	4906      	ldr	r1, [pc, #24]	@ (8002d84 <HAL_RCC_ClockConfig+0x25c>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b04      	ldr	r3, [pc, #16]	@ (8002d84 <HAL_RCC_ClockConfig+0x25c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e040      	b.n	8002e06 <HAL_RCC_ClockConfig+0x2de>
 8002d84:	40022000 	.word	0x40022000
 8002d88:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d98:	4b1d      	ldr	r3, [pc, #116]	@ (8002e10 <HAL_RCC_ClockConfig+0x2e8>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	491a      	ldr	r1, [pc, #104]	@ (8002e10 <HAL_RCC_ClockConfig+0x2e8>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db6:	4b16      	ldr	r3, [pc, #88]	@ (8002e10 <HAL_RCC_ClockConfig+0x2e8>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4912      	ldr	r1, [pc, #72]	@ (8002e10 <HAL_RCC_ClockConfig+0x2e8>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dca:	f000 f829 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dce:	4601      	mov	r1, r0
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e10 <HAL_RCC_ClockConfig+0x2e8>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dd8:	22f0      	movs	r2, #240	@ 0xf0
 8002dda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	fa92 f2a2 	rbit	r2, r2
 8002de2:	60fa      	str	r2, [r7, #12]
  return result;
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	fab2 f282 	clz	r2, r2
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	40d3      	lsrs	r3, r2
 8002dee:	4a09      	ldr	r2, [pc, #36]	@ (8002e14 <HAL_RCC_ClockConfig+0x2ec>)
 8002df0:	5cd3      	ldrb	r3, [r2, r3]
 8002df2:	fa21 f303 	lsr.w	r3, r1, r3
 8002df6:	4a08      	ldr	r2, [pc, #32]	@ (8002e18 <HAL_RCC_ClockConfig+0x2f0>)
 8002df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002dfa:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <HAL_RCC_ClockConfig+0x2f4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe fae0 	bl	80013c4 <HAL_InitTick>
  
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3778      	adds	r7, #120	@ 0x78
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	0800732c 	.word	0x0800732c
 8002e18:	20000004 	.word	0x20000004
 8002e1c:	20000008 	.word	0x20000008

08002e20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	2300      	movs	r3, #0
 8002e34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d002      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x30>
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCC_GetSysClockFreq+0x36>
 8002e4e:	e026      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e50:	4b19      	ldr	r3, [pc, #100]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e52:	613b      	str	r3, [r7, #16]
      break;
 8002e54:	e026      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	0c9b      	lsrs	r3, r3, #18
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	4a17      	ldr	r2, [pc, #92]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e60:	5cd3      	ldrb	r3, [r2, r3]
 8002e62:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e64:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	4a14      	ldr	r2, [pc, #80]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e6e:	5cd3      	ldrb	r3, [r2, r3]
 8002e70:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e7c:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e004      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a0c      	ldr	r2, [pc, #48]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	613b      	str	r3, [r7, #16]
      break;
 8002e9c:	e002      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e9e:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ea0:	613b      	str	r3, [r7, #16]
      break;
 8002ea2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea4:	693b      	ldr	r3, [r7, #16]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	007a1200 	.word	0x007a1200
 8002ebc:	08007344 	.word	0x08007344
 8002ec0:	08007354 	.word	0x08007354
 8002ec4:	003d0900 	.word	0x003d0900

08002ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	@ (8002edc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000004 	.word	0x20000004

08002ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ee6:	f7ff ffef 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8002eea:	4601      	mov	r1, r0
 8002eec:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ef4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002ef8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	fa92 f2a2 	rbit	r2, r2
 8002f00:	603a      	str	r2, [r7, #0]
  return result;
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	fab2 f282 	clz	r2, r2
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	40d3      	lsrs	r3, r2
 8002f0c:	4a04      	ldr	r2, [pc, #16]	@ (8002f20 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f0e:	5cd3      	ldrb	r3, [r2, r3]
 8002f10:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	0800733c 	.word	0x0800733c

08002f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f2a:	f7ff ffcd 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8002f2e:	4601      	mov	r1, r0
 8002f30:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002f38:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002f3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	fa92 f2a2 	rbit	r2, r2
 8002f44:	603a      	str	r2, [r7, #0]
  return result;
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	fab2 f282 	clz	r2, r2
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	40d3      	lsrs	r3, r2
 8002f50:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f52:	5cd3      	ldrb	r3, [r2, r3]
 8002f54:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000
 8002f64:	0800733c 	.word	0x0800733c

08002f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e049      	b.n	800300e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fd ffdc 	bl	8000f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f000 fa42 	bl	8003430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d001      	beq.n	8003030 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e038      	b.n	80030a2 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1c      	ldr	r2, [pc, #112]	@ (80030b0 <HAL_TIM_Base_Start+0x98>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00e      	beq.n	8003060 <HAL_TIM_Base_Start+0x48>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800304a:	d009      	beq.n	8003060 <HAL_TIM_Base_Start+0x48>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a18      	ldr	r2, [pc, #96]	@ (80030b4 <HAL_TIM_Base_Start+0x9c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d004      	beq.n	8003060 <HAL_TIM_Base_Start+0x48>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a17      	ldr	r2, [pc, #92]	@ (80030b8 <HAL_TIM_Base_Start+0xa0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d115      	bne.n	800308c <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	4b15      	ldr	r3, [pc, #84]	@ (80030bc <HAL_TIM_Base_Start+0xa4>)
 8003068:	4013      	ands	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b06      	cmp	r3, #6
 8003070:	d015      	beq.n	800309e <HAL_TIM_Base_Start+0x86>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003078:	d011      	beq.n	800309e <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308a:	e008      	b.n	800309e <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e000      	b.n	80030a0 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40012c00 	.word	0x40012c00
 80030b4:	40000400 	.word	0x40000400
 80030b8:	40014000 	.word	0x40014000
 80030bc:	00010007 	.word	0x00010007

080030c0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6a1a      	ldr	r2, [r3, #32]
 80030ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10f      	bne.n	80030f8 <HAL_TIM_Base_Stop+0x38>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6a1a      	ldr	r2, [r3, #32]
 80030de:	f240 4344 	movw	r3, #1092	@ 0x444
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d107      	bne.n	80030f8 <HAL_TIM_Base_Stop+0x38>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d001      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e040      	b.n	80031aa <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1c      	ldr	r2, [pc, #112]	@ (80031b8 <HAL_TIM_Base_Start_IT+0xa8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00e      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x58>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003152:	d009      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x58>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a18      	ldr	r2, [pc, #96]	@ (80031bc <HAL_TIM_Base_Start_IT+0xac>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x58>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a17      	ldr	r2, [pc, #92]	@ (80031c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d115      	bne.n	8003194 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	4b15      	ldr	r3, [pc, #84]	@ (80031c4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003170:	4013      	ands	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b06      	cmp	r3, #6
 8003178:	d015      	beq.n	80031a6 <HAL_TIM_Base_Start_IT+0x96>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003180:	d011      	beq.n	80031a6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0201 	orr.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003192:	e008      	b.n	80031a6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	e000      	b.n	80031a8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40012c00 	.word	0x40012c00
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40014000 	.word	0x40014000
 80031c4:	00010007 	.word	0x00010007

080031c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d020      	beq.n	800322c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01b      	beq.n	800322c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0202 	mvn.w	r2, #2
 80031fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f8ee 	bl	80033f4 <HAL_TIM_IC_CaptureCallback>
 8003218:	e005      	b.n	8003226 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f8e0 	bl	80033e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f8f1 	bl	8003408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d020      	beq.n	8003278 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01b      	beq.n	8003278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0204 	mvn.w	r2, #4
 8003248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2202      	movs	r2, #2
 800324e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f8c8 	bl	80033f4 <HAL_TIM_IC_CaptureCallback>
 8003264:	e005      	b.n	8003272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8ba 	bl	80033e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f8cb 	bl	8003408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d020      	beq.n	80032c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01b      	beq.n	80032c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0208 	mvn.w	r2, #8
 8003294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2204      	movs	r2, #4
 800329a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8a2 	bl	80033f4 <HAL_TIM_IC_CaptureCallback>
 80032b0:	e005      	b.n	80032be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f894 	bl	80033e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f8a5 	bl	8003408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d020      	beq.n	8003310 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01b      	beq.n	8003310 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0210 	mvn.w	r2, #16
 80032e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2208      	movs	r2, #8
 80032e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f87c 	bl	80033f4 <HAL_TIM_IC_CaptureCallback>
 80032fc:	e005      	b.n	800330a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f86e 	bl	80033e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f87f 	bl	8003408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00c      	beq.n	8003334 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0201 	mvn.w	r2, #1
 800332c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f84c 	bl	80033cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00c      	beq.n	8003358 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f968 	bl	8003628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00c      	beq.n	800337c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f960 	bl	800363c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00c      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f83e 	bl	800341c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0220 	mvn.w	r2, #32
 80033bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f928 	bl	8003614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a38      	ldr	r2, [pc, #224]	@ (8003524 <TIM_Base_SetConfig+0xf4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d007      	beq.n	8003458 <TIM_Base_SetConfig+0x28>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344e:	d003      	beq.n	8003458 <TIM_Base_SetConfig+0x28>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a35      	ldr	r2, [pc, #212]	@ (8003528 <TIM_Base_SetConfig+0xf8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d108      	bne.n	800346a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800345e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a2d      	ldr	r2, [pc, #180]	@ (8003524 <TIM_Base_SetConfig+0xf4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <TIM_Base_SetConfig+0x6a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003478:	d00f      	beq.n	800349a <TIM_Base_SetConfig+0x6a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2a      	ldr	r2, [pc, #168]	@ (8003528 <TIM_Base_SetConfig+0xf8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00b      	beq.n	800349a <TIM_Base_SetConfig+0x6a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a29      	ldr	r2, [pc, #164]	@ (800352c <TIM_Base_SetConfig+0xfc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d007      	beq.n	800349a <TIM_Base_SetConfig+0x6a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a28      	ldr	r2, [pc, #160]	@ (8003530 <TIM_Base_SetConfig+0x100>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d003      	beq.n	800349a <TIM_Base_SetConfig+0x6a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a27      	ldr	r2, [pc, #156]	@ (8003534 <TIM_Base_SetConfig+0x104>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d108      	bne.n	80034ac <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a14      	ldr	r2, [pc, #80]	@ (8003524 <TIM_Base_SetConfig+0xf4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00b      	beq.n	80034f0 <TIM_Base_SetConfig+0xc0>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a14      	ldr	r2, [pc, #80]	@ (800352c <TIM_Base_SetConfig+0xfc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d007      	beq.n	80034f0 <TIM_Base_SetConfig+0xc0>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a13      	ldr	r2, [pc, #76]	@ (8003530 <TIM_Base_SetConfig+0x100>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d003      	beq.n	80034f0 <TIM_Base_SetConfig+0xc0>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a12      	ldr	r2, [pc, #72]	@ (8003534 <TIM_Base_SetConfig+0x104>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d103      	bne.n	80034f8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d105      	bne.n	8003516 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f023 0201 	bic.w	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	611a      	str	r2, [r3, #16]
  }
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40012c00 	.word	0x40012c00
 8003528:	40000400 	.word	0x40000400
 800352c:	40014000 	.word	0x40014000
 8003530:	40014400 	.word	0x40014400
 8003534:	40014800 	.word	0x40014800

08003538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800354c:	2302      	movs	r3, #2
 800354e:	e054      	b.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a24      	ldr	r2, [pc, #144]	@ (8003608 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d108      	bne.n	800358c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003580:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a17      	ldr	r2, [pc, #92]	@ (8003608 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00e      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b8:	d009      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a13      	ldr	r2, [pc, #76]	@ (800360c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a11      	ldr	r2, [pc, #68]	@ (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d10c      	bne.n	80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40000400 	.word	0x40000400
 8003610:	40014000 	.word	0x40014000

08003614 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e040      	b.n	80036e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fcac 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	@ 0x24
 800367c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fcc2 	bl	8004020 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fb89 	bl	8003db4 <UART_SetConfig>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e01b      	b.n	80036e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fd41 	bl	8004164 <UART_CheckIdleState>
 80036e2:	4603      	mov	r3, r0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b08b      	sub	sp, #44	@ 0x2c
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d147      	bne.n	8003792 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_UART_Transmit_IT+0x22>
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e040      	b.n	8003794 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	88fa      	ldrh	r2, [r7, #6]
 800371c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2221      	movs	r2, #33	@ 0x21
 800373a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003744:	d107      	bne.n	8003756 <HAL_UART_Transmit_IT+0x6a>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a13      	ldr	r2, [pc, #76]	@ (80037a0 <HAL_UART_Transmit_IT+0xb4>)
 8003752:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003754:	e002      	b.n	800375c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a12      	ldr	r2, [pc, #72]	@ (80037a4 <HAL_UART_Transmit_IT+0xb8>)
 800375a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	613b      	str	r3, [r7, #16]
   return(result);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	623b      	str	r3, [r7, #32]
 800377c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377e:	69f9      	ldr	r1, [r7, #28]
 8003780:	6a3a      	ldr	r2, [r7, #32]
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	61bb      	str	r3, [r7, #24]
   return(result);
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e6      	bne.n	800375c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	372c      	adds	r7, #44	@ 0x2c
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	08004539 	.word	0x08004539
 80037a4:	08004483 	.word	0x08004483

080037a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b0ba      	sub	sp, #232	@ 0xe8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80037d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80037d6:	4013      	ands	r3, r2
 80037d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80037dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d115      	bne.n	8003810 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80037e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00f      	beq.n	8003810 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d009      	beq.n	8003810 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 82ab 	beq.w	8003d5c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	4798      	blx	r3
      }
      return;
 800380e:	e2a5      	b.n	8003d5c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003810:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 8117 	beq.w	8003a48 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800381a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003826:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800382a:	4b85      	ldr	r3, [pc, #532]	@ (8003a40 <HAL_UART_IRQHandler+0x298>)
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 810a 	beq.w	8003a48 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d011      	beq.n	8003864 <HAL_UART_IRQHandler+0xbc>
 8003840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2201      	movs	r2, #1
 8003852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800385a:	f043 0201 	orr.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d011      	beq.n	8003894 <HAL_UART_IRQHandler+0xec>
 8003870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00b      	beq.n	8003894 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2202      	movs	r2, #2
 8003882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800388a:	f043 0204 	orr.w	r2, r3, #4
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d011      	beq.n	80038c4 <HAL_UART_IRQHandler+0x11c>
 80038a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00b      	beq.n	80038c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2204      	movs	r2, #4
 80038b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ba:	f043 0202 	orr.w	r2, r3, #2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d017      	beq.n	8003900 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d105      	bne.n	80038e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80038dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00b      	beq.n	8003900 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2208      	movs	r2, #8
 80038ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038f6:	f043 0208 	orr.w	r2, r3, #8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003908:	2b00      	cmp	r3, #0
 800390a:	d012      	beq.n	8003932 <HAL_UART_IRQHandler+0x18a>
 800390c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003910:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00c      	beq.n	8003932 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003920:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003928:	f043 0220 	orr.w	r2, r3, #32
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8211 	beq.w	8003d60 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800393e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00d      	beq.n	8003966 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800394a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800396c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397a:	2b40      	cmp	r3, #64	@ 0x40
 800397c:	d005      	beq.n	800398a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800397e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003982:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003986:	2b00      	cmp	r3, #0
 8003988:	d04f      	beq.n	8003a2a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fcff 	bl	800438e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399a:	2b40      	cmp	r3, #64	@ 0x40
 800399c:	d141      	bne.n	8003a22 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3308      	adds	r3, #8
 80039a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3308      	adds	r3, #8
 80039c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1d9      	bne.n	800399e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d013      	beq.n	8003a1a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f6:	4a13      	ldr	r2, [pc, #76]	@ (8003a44 <HAL_UART_IRQHandler+0x29c>)
 80039f8:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd fe7f 	bl	8001702 <HAL_DMA_Abort_IT>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d017      	beq.n	8003a3a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a14:	4610      	mov	r0, r2
 8003a16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	e00f      	b.n	8003a3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f9b4 	bl	8003d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	e00b      	b.n	8003a3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f9b0 	bl	8003d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	e007      	b.n	8003a3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f9ac 	bl	8003d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003a38:	e192      	b.n	8003d60 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3a:	bf00      	nop
    return;
 8003a3c:	e190      	b.n	8003d60 <HAL_UART_IRQHandler+0x5b8>
 8003a3e:	bf00      	nop
 8003a40:	04000120 	.word	0x04000120
 8003a44:	08004457 	.word	0x08004457

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	f040 814b 	bne.w	8003ce8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8144 	beq.w	8003ce8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 813d 	beq.w	8003ce8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2210      	movs	r2, #16
 8003a74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a80:	2b40      	cmp	r3, #64	@ 0x40
 8003a82:	f040 80b5 	bne.w	8003bf0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a92:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8164 	beq.w	8003d64 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	f080 815c 	bcs.w	8003d64 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ab2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	f000 8086 	beq.w	8003bce <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ada:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ade:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003aec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003af0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003af8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1da      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3308      	adds	r3, #8
 8003b12:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b30:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b34:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e1      	bne.n	8003b0c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3308      	adds	r3, #8
 8003b68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b6c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b6e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e3      	bne.n	8003b48 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b9e:	f023 0310 	bic.w	r3, r3, #16
 8003ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bb2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e4      	bne.n	8003b8e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fd fd5c 	bl	8001686 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f8d7 	bl	8003d9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bee:	e0b9      	b.n	8003d64 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80ab 	beq.w	8003d68 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003c12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80a6 	beq.w	8003d68 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c40:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e4      	bne.n	8003c1c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3308      	adds	r3, #8
 8003c58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	623b      	str	r3, [r7, #32]
   return(result);
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3308      	adds	r3, #8
 8003c72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c76:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e3      	bne.n	8003c52 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0310 	bic.w	r3, r3, #16
 8003cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	69b9      	ldr	r1, [r7, #24]
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e4      	bne.n	8003c9e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f85b 	bl	8003d9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ce6:	e03f      	b.n	8003d68 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00e      	beq.n	8003d12 <HAL_UART_IRQHandler+0x56a>
 8003cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fc9e 	bl	800464c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d10:	e02d      	b.n	8003d6e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00e      	beq.n	8003d3c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01c      	beq.n	8003d6c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4798      	blx	r3
    }
    return;
 8003d3a:	e017      	b.n	8003d6c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d012      	beq.n	8003d6e <HAL_UART_IRQHandler+0x5c6>
 8003d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00c      	beq.n	8003d6e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fc4f 	bl	80045f8 <UART_EndTransmit_IT>
    return;
 8003d5a:	e008      	b.n	8003d6e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003d5c:	bf00      	nop
 8003d5e:	e006      	b.n	8003d6e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003d60:	bf00      	nop
 8003d62:	e004      	b.n	8003d6e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003d64:	bf00      	nop
 8003d66:	e002      	b.n	8003d6e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003d68:	bf00      	nop
 8003d6a:	e000      	b.n	8003d6e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003d6c:	bf00      	nop
  }

}
 8003d6e:	37e8      	adds	r7, #232	@ 0xe8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4b8a      	ldr	r3, [pc, #552]	@ (8004008 <UART_SetConfig+0x254>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	6979      	ldr	r1, [r7, #20]
 8003de8:	430b      	orrs	r3, r1
 8003dea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a78      	ldr	r2, [pc, #480]	@ (800400c <UART_SetConfig+0x258>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d120      	bne.n	8003e72 <UART_SetConfig+0xbe>
 8003e30:	4b77      	ldr	r3, [pc, #476]	@ (8004010 <UART_SetConfig+0x25c>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d817      	bhi.n	8003e6c <UART_SetConfig+0xb8>
 8003e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e44 <UART_SetConfig+0x90>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003e55 	.word	0x08003e55
 8003e48:	08003e61 	.word	0x08003e61
 8003e4c:	08003e67 	.word	0x08003e67
 8003e50:	08003e5b 	.word	0x08003e5b
 8003e54:	2300      	movs	r3, #0
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e01d      	b.n	8003e96 <UART_SetConfig+0xe2>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e01a      	b.n	8003e96 <UART_SetConfig+0xe2>
 8003e60:	2304      	movs	r3, #4
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e017      	b.n	8003e96 <UART_SetConfig+0xe2>
 8003e66:	2308      	movs	r3, #8
 8003e68:	77fb      	strb	r3, [r7, #31]
 8003e6a:	e014      	b.n	8003e96 <UART_SetConfig+0xe2>
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e011      	b.n	8003e96 <UART_SetConfig+0xe2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a67      	ldr	r2, [pc, #412]	@ (8004014 <UART_SetConfig+0x260>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d102      	bne.n	8003e82 <UART_SetConfig+0xce>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	77fb      	strb	r3, [r7, #31]
 8003e80:	e009      	b.n	8003e96 <UART_SetConfig+0xe2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a64      	ldr	r2, [pc, #400]	@ (8004018 <UART_SetConfig+0x264>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d102      	bne.n	8003e92 <UART_SetConfig+0xde>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	77fb      	strb	r3, [r7, #31]
 8003e90:	e001      	b.n	8003e96 <UART_SetConfig+0xe2>
 8003e92:	2310      	movs	r3, #16
 8003e94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e9e:	d15a      	bne.n	8003f56 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003ea0:	7ffb      	ldrb	r3, [r7, #31]
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d827      	bhi.n	8003ef6 <UART_SetConfig+0x142>
 8003ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8003eac <UART_SetConfig+0xf8>)
 8003ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003ed9 	.word	0x08003ed9
 8003eb4:	08003ee1 	.word	0x08003ee1
 8003eb8:	08003ef7 	.word	0x08003ef7
 8003ebc:	08003ee7 	.word	0x08003ee7
 8003ec0:	08003ef7 	.word	0x08003ef7
 8003ec4:	08003ef7 	.word	0x08003ef7
 8003ec8:	08003ef7 	.word	0x08003ef7
 8003ecc:	08003eef 	.word	0x08003eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed0:	f7ff f806 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 8003ed4:	61b8      	str	r0, [r7, #24]
        break;
 8003ed6:	e013      	b.n	8003f00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed8:	f7ff f824 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 8003edc:	61b8      	str	r0, [r7, #24]
        break;
 8003ede:	e00f      	b.n	8003f00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee0:	4b4e      	ldr	r3, [pc, #312]	@ (800401c <UART_SetConfig+0x268>)
 8003ee2:	61bb      	str	r3, [r7, #24]
        break;
 8003ee4:	e00c      	b.n	8003f00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee6:	f7fe ff9b 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8003eea:	61b8      	str	r0, [r7, #24]
        break;
 8003eec:	e008      	b.n	8003f00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ef2:	61bb      	str	r3, [r7, #24]
        break;
 8003ef4:	e004      	b.n	8003f00 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	77bb      	strb	r3, [r7, #30]
        break;
 8003efe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d074      	beq.n	8003ff0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	005a      	lsls	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	441a      	add	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b0f      	cmp	r3, #15
 8003f20:	d916      	bls.n	8003f50 <UART_SetConfig+0x19c>
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f28:	d212      	bcs.n	8003f50 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	f023 030f 	bic.w	r3, r3, #15
 8003f32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	89fb      	ldrh	r3, [r7, #14]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	89fa      	ldrh	r2, [r7, #14]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	e04f      	b.n	8003ff0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	77bb      	strb	r3, [r7, #30]
 8003f54:	e04c      	b.n	8003ff0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f56:	7ffb      	ldrb	r3, [r7, #31]
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d828      	bhi.n	8003fae <UART_SetConfig+0x1fa>
 8003f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f64 <UART_SetConfig+0x1b0>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08003f89 	.word	0x08003f89
 8003f68:	08003f91 	.word	0x08003f91
 8003f6c:	08003f99 	.word	0x08003f99
 8003f70:	08003faf 	.word	0x08003faf
 8003f74:	08003f9f 	.word	0x08003f9f
 8003f78:	08003faf 	.word	0x08003faf
 8003f7c:	08003faf 	.word	0x08003faf
 8003f80:	08003faf 	.word	0x08003faf
 8003f84:	08003fa7 	.word	0x08003fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f88:	f7fe ffaa 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 8003f8c:	61b8      	str	r0, [r7, #24]
        break;
 8003f8e:	e013      	b.n	8003fb8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f90:	f7fe ffc8 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 8003f94:	61b8      	str	r0, [r7, #24]
        break;
 8003f96:	e00f      	b.n	8003fb8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f98:	4b20      	ldr	r3, [pc, #128]	@ (800401c <UART_SetConfig+0x268>)
 8003f9a:	61bb      	str	r3, [r7, #24]
        break;
 8003f9c:	e00c      	b.n	8003fb8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f9e:	f7fe ff3f 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8003fa2:	61b8      	str	r0, [r7, #24]
        break;
 8003fa4:	e008      	b.n	8003fb8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003faa:	61bb      	str	r3, [r7, #24]
        break;
 8003fac:	e004      	b.n	8003fb8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	77bb      	strb	r3, [r7, #30]
        break;
 8003fb6:	bf00      	nop
    }

    if (pclk != 0U)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d018      	beq.n	8003ff0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	085a      	lsrs	r2, r3, #1
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	441a      	add	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b0f      	cmp	r3, #15
 8003fd6:	d909      	bls.n	8003fec <UART_SetConfig+0x238>
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fde:	d205      	bcs.n	8003fec <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	e001      	b.n	8003ff0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ffc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	efff69f3 	.word	0xefff69f3
 800400c:	40013800 	.word	0x40013800
 8004010:	40021000 	.word	0x40021000
 8004014:	40004400 	.word	0x40004400
 8004018:	40004800 	.word	0x40004800
 800401c:	007a1200 	.word	0x007a1200

08004020 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	f003 0310 	and.w	r3, r3, #16
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01a      	beq.n	8004136 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800411e:	d10a      	bne.n	8004136 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	605a      	str	r2, [r3, #4]
  }
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b098      	sub	sp, #96	@ 0x60
 8004168:	af02      	add	r7, sp, #8
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004174:	f7fd f96a 	bl	800144c <HAL_GetTick>
 8004178:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b08      	cmp	r3, #8
 8004186:	d12e      	bne.n	80041e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004188:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004190:	2200      	movs	r2, #0
 8004192:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f88c 	bl	80042b4 <UART_WaitOnFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d021      	beq.n	80041e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80041c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e6      	bne.n	80041a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e062      	b.n	80042ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d149      	bne.n	8004288 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041fc:	2200      	movs	r2, #0
 80041fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f856 	bl	80042b4 <UART_WaitOnFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d03c      	beq.n	8004288 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	623b      	str	r3, [r7, #32]
   return(result);
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800422c:	633b      	str	r3, [r7, #48]	@ 0x30
 800422e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800423a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e6      	bne.n	800420e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3308      	adds	r3, #8
 8004246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3308      	adds	r3, #8
 800425e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004260:	61fa      	str	r2, [r7, #28]
 8004262:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	69b9      	ldr	r1, [r7, #24]
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	617b      	str	r3, [r7, #20]
   return(result);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e5      	bne.n	8004240 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e011      	b.n	80042ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3758      	adds	r7, #88	@ 0x58
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c4:	e04f      	b.n	8004366 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042cc:	d04b      	beq.n	8004366 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ce:	f7fd f8bd 	bl	800144c <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d302      	bcc.n	80042e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e04e      	b.n	8004386 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d037      	beq.n	8004366 <UART_WaitOnFlagUntilTimeout+0xb2>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b80      	cmp	r3, #128	@ 0x80
 80042fa:	d034      	beq.n	8004366 <UART_WaitOnFlagUntilTimeout+0xb2>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b40      	cmp	r3, #64	@ 0x40
 8004300:	d031      	beq.n	8004366 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b08      	cmp	r3, #8
 800430e:	d110      	bne.n	8004332 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2208      	movs	r2, #8
 8004316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f838 	bl	800438e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2208      	movs	r2, #8
 8004322:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e029      	b.n	8004386 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800433c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004340:	d111      	bne.n	8004366 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800434a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f81e 	bl	800438e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e00f      	b.n	8004386 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4013      	ands	r3, r2
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	429a      	cmp	r2, r3
 8004382:	d0a0      	beq.n	80042c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800438e:	b480      	push	{r7}
 8004390:	b095      	sub	sp, #84	@ 0x54
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800439e:	e853 3f00 	ldrex	r3, [r3]
 80043a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043bc:	e841 2300 	strex	r3, r2, [r1]
 80043c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e6      	bne.n	8004396 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3308      	adds	r3, #8
 80043ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3308      	adds	r3, #8
 80043e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e5      	bne.n	80043c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004400:	2b01      	cmp	r3, #1
 8004402:	d118      	bne.n	8004436 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	60bb      	str	r3, [r7, #8]
   return(result);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f023 0310 	bic.w	r3, r3, #16
 8004418:	647b      	str	r3, [r7, #68]	@ 0x44
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004422:	61bb      	str	r3, [r7, #24]
 8004424:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6979      	ldr	r1, [r7, #20]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	613b      	str	r3, [r7, #16]
   return(result);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e6      	bne.n	8004404 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800444a:	bf00      	nop
 800444c:	3754      	adds	r7, #84	@ 0x54
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f7ff fc87 	bl	8003d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004482:	b480      	push	{r7}
 8004484:	b08f      	sub	sp, #60	@ 0x3c
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800448e:	2b21      	cmp	r3, #33	@ 0x21
 8004490:	d14c      	bne.n	800452c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d132      	bne.n	8004504 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044be:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e6      	bne.n	800449e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ee:	61bb      	str	r3, [r7, #24]
 80044f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6979      	ldr	r1, [r7, #20]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	613b      	str	r3, [r7, #16]
   return(result);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e6      	bne.n	80044d0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004502:	e013      	b.n	800452c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004508:	781a      	ldrb	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800452c:	bf00      	nop
 800452e:	373c      	adds	r7, #60	@ 0x3c
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004538:	b480      	push	{r7}
 800453a:	b091      	sub	sp, #68	@ 0x44
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004544:	2b21      	cmp	r3, #33	@ 0x21
 8004546:	d151      	bne.n	80045ec <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d132      	bne.n	80045ba <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	623b      	str	r3, [r7, #32]
   return(result);
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004568:	63bb      	str	r3, [r7, #56]	@ 0x38
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004572:	633b      	str	r3, [r7, #48]	@ 0x30
 8004574:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e6      	bne.n	8004554 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	60fb      	str	r3, [r7, #12]
   return(result);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800459a:	637b      	str	r3, [r7, #52]	@ 0x34
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	69b9      	ldr	r1, [r7, #24]
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	617b      	str	r3, [r7, #20]
   return(result);
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e6      	bne.n	8004586 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80045b8:	e018      	b.n	80045ec <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80045c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c2:	881a      	ldrh	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045cc:	b292      	uxth	r2, r2
 80045ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d4:	1c9a      	adds	r2, r3, #2
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80045ec:	bf00      	nop
 80045ee:	3744      	adds	r7, #68	@ 0x44
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	60bb      	str	r3, [r7, #8]
   return(result);
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004614:	61fb      	str	r3, [r7, #28]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	61bb      	str	r3, [r7, #24]
 8004620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	6979      	ldr	r1, [r7, #20]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	613b      	str	r3, [r7, #16]
   return(result);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e6      	bne.n	8004600 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2220      	movs	r2, #32
 8004636:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff fb98 	bl	8003d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004644:	bf00      	nop
 8004646:	3720      	adds	r7, #32
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <__cvt>:
 8004660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004664:	ec57 6b10 	vmov	r6, r7, d0
 8004668:	2f00      	cmp	r7, #0
 800466a:	460c      	mov	r4, r1
 800466c:	4619      	mov	r1, r3
 800466e:	463b      	mov	r3, r7
 8004670:	bfbb      	ittet	lt
 8004672:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004676:	461f      	movlt	r7, r3
 8004678:	2300      	movge	r3, #0
 800467a:	232d      	movlt	r3, #45	@ 0x2d
 800467c:	700b      	strb	r3, [r1, #0]
 800467e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004680:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004684:	4691      	mov	r9, r2
 8004686:	f023 0820 	bic.w	r8, r3, #32
 800468a:	bfbc      	itt	lt
 800468c:	4632      	movlt	r2, r6
 800468e:	4616      	movlt	r6, r2
 8004690:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004694:	d005      	beq.n	80046a2 <__cvt+0x42>
 8004696:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800469a:	d100      	bne.n	800469e <__cvt+0x3e>
 800469c:	3401      	adds	r4, #1
 800469e:	2102      	movs	r1, #2
 80046a0:	e000      	b.n	80046a4 <__cvt+0x44>
 80046a2:	2103      	movs	r1, #3
 80046a4:	ab03      	add	r3, sp, #12
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	ab02      	add	r3, sp, #8
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	ec47 6b10 	vmov	d0, r6, r7
 80046b0:	4653      	mov	r3, sl
 80046b2:	4622      	mov	r2, r4
 80046b4:	f000 fe5c 	bl	8005370 <_dtoa_r>
 80046b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80046bc:	4605      	mov	r5, r0
 80046be:	d119      	bne.n	80046f4 <__cvt+0x94>
 80046c0:	f019 0f01 	tst.w	r9, #1
 80046c4:	d00e      	beq.n	80046e4 <__cvt+0x84>
 80046c6:	eb00 0904 	add.w	r9, r0, r4
 80046ca:	2200      	movs	r2, #0
 80046cc:	2300      	movs	r3, #0
 80046ce:	4630      	mov	r0, r6
 80046d0:	4639      	mov	r1, r7
 80046d2:	f7fc f9f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80046d6:	b108      	cbz	r0, 80046dc <__cvt+0x7c>
 80046d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80046dc:	2230      	movs	r2, #48	@ 0x30
 80046de:	9b03      	ldr	r3, [sp, #12]
 80046e0:	454b      	cmp	r3, r9
 80046e2:	d31e      	bcc.n	8004722 <__cvt+0xc2>
 80046e4:	9b03      	ldr	r3, [sp, #12]
 80046e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80046e8:	1b5b      	subs	r3, r3, r5
 80046ea:	4628      	mov	r0, r5
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	b004      	add	sp, #16
 80046f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80046f8:	eb00 0904 	add.w	r9, r0, r4
 80046fc:	d1e5      	bne.n	80046ca <__cvt+0x6a>
 80046fe:	7803      	ldrb	r3, [r0, #0]
 8004700:	2b30      	cmp	r3, #48	@ 0x30
 8004702:	d10a      	bne.n	800471a <__cvt+0xba>
 8004704:	2200      	movs	r2, #0
 8004706:	2300      	movs	r3, #0
 8004708:	4630      	mov	r0, r6
 800470a:	4639      	mov	r1, r7
 800470c:	f7fc f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004710:	b918      	cbnz	r0, 800471a <__cvt+0xba>
 8004712:	f1c4 0401 	rsb	r4, r4, #1
 8004716:	f8ca 4000 	str.w	r4, [sl]
 800471a:	f8da 3000 	ldr.w	r3, [sl]
 800471e:	4499      	add	r9, r3
 8004720:	e7d3      	b.n	80046ca <__cvt+0x6a>
 8004722:	1c59      	adds	r1, r3, #1
 8004724:	9103      	str	r1, [sp, #12]
 8004726:	701a      	strb	r2, [r3, #0]
 8004728:	e7d9      	b.n	80046de <__cvt+0x7e>

0800472a <__exponent>:
 800472a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800472c:	2900      	cmp	r1, #0
 800472e:	bfba      	itte	lt
 8004730:	4249      	neglt	r1, r1
 8004732:	232d      	movlt	r3, #45	@ 0x2d
 8004734:	232b      	movge	r3, #43	@ 0x2b
 8004736:	2909      	cmp	r1, #9
 8004738:	7002      	strb	r2, [r0, #0]
 800473a:	7043      	strb	r3, [r0, #1]
 800473c:	dd29      	ble.n	8004792 <__exponent+0x68>
 800473e:	f10d 0307 	add.w	r3, sp, #7
 8004742:	461d      	mov	r5, r3
 8004744:	270a      	movs	r7, #10
 8004746:	461a      	mov	r2, r3
 8004748:	fbb1 f6f7 	udiv	r6, r1, r7
 800474c:	fb07 1416 	mls	r4, r7, r6, r1
 8004750:	3430      	adds	r4, #48	@ 0x30
 8004752:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004756:	460c      	mov	r4, r1
 8004758:	2c63      	cmp	r4, #99	@ 0x63
 800475a:	f103 33ff 	add.w	r3, r3, #4294967295
 800475e:	4631      	mov	r1, r6
 8004760:	dcf1      	bgt.n	8004746 <__exponent+0x1c>
 8004762:	3130      	adds	r1, #48	@ 0x30
 8004764:	1e94      	subs	r4, r2, #2
 8004766:	f803 1c01 	strb.w	r1, [r3, #-1]
 800476a:	1c41      	adds	r1, r0, #1
 800476c:	4623      	mov	r3, r4
 800476e:	42ab      	cmp	r3, r5
 8004770:	d30a      	bcc.n	8004788 <__exponent+0x5e>
 8004772:	f10d 0309 	add.w	r3, sp, #9
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	42ac      	cmp	r4, r5
 800477a:	bf88      	it	hi
 800477c:	2300      	movhi	r3, #0
 800477e:	3302      	adds	r3, #2
 8004780:	4403      	add	r3, r0
 8004782:	1a18      	subs	r0, r3, r0
 8004784:	b003      	add	sp, #12
 8004786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004788:	f813 6b01 	ldrb.w	r6, [r3], #1
 800478c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004790:	e7ed      	b.n	800476e <__exponent+0x44>
 8004792:	2330      	movs	r3, #48	@ 0x30
 8004794:	3130      	adds	r1, #48	@ 0x30
 8004796:	7083      	strb	r3, [r0, #2]
 8004798:	70c1      	strb	r1, [r0, #3]
 800479a:	1d03      	adds	r3, r0, #4
 800479c:	e7f1      	b.n	8004782 <__exponent+0x58>
	...

080047a0 <_printf_float>:
 80047a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a4:	b08d      	sub	sp, #52	@ 0x34
 80047a6:	460c      	mov	r4, r1
 80047a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80047ac:	4616      	mov	r6, r2
 80047ae:	461f      	mov	r7, r3
 80047b0:	4605      	mov	r5, r0
 80047b2:	f000 fcdb 	bl	800516c <_localeconv_r>
 80047b6:	6803      	ldr	r3, [r0, #0]
 80047b8:	9304      	str	r3, [sp, #16]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fb fd58 	bl	8000270 <strlen>
 80047c0:	2300      	movs	r3, #0
 80047c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80047c4:	f8d8 3000 	ldr.w	r3, [r8]
 80047c8:	9005      	str	r0, [sp, #20]
 80047ca:	3307      	adds	r3, #7
 80047cc:	f023 0307 	bic.w	r3, r3, #7
 80047d0:	f103 0208 	add.w	r2, r3, #8
 80047d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80047d8:	f8d4 b000 	ldr.w	fp, [r4]
 80047dc:	f8c8 2000 	str.w	r2, [r8]
 80047e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80047e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80047e8:	9307      	str	r3, [sp, #28]
 80047ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80047ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80047f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004a68 <_printf_float+0x2c8>)
 80047f8:	f04f 32ff 	mov.w	r2, #4294967295
 80047fc:	f7fc f996 	bl	8000b2c <__aeabi_dcmpun>
 8004800:	bb70      	cbnz	r0, 8004860 <_printf_float+0xc0>
 8004802:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004806:	4b98      	ldr	r3, [pc, #608]	@ (8004a68 <_printf_float+0x2c8>)
 8004808:	f04f 32ff 	mov.w	r2, #4294967295
 800480c:	f7fc f970 	bl	8000af0 <__aeabi_dcmple>
 8004810:	bb30      	cbnz	r0, 8004860 <_printf_float+0xc0>
 8004812:	2200      	movs	r2, #0
 8004814:	2300      	movs	r3, #0
 8004816:	4640      	mov	r0, r8
 8004818:	4649      	mov	r1, r9
 800481a:	f7fc f95f 	bl	8000adc <__aeabi_dcmplt>
 800481e:	b110      	cbz	r0, 8004826 <_printf_float+0x86>
 8004820:	232d      	movs	r3, #45	@ 0x2d
 8004822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004826:	4a91      	ldr	r2, [pc, #580]	@ (8004a6c <_printf_float+0x2cc>)
 8004828:	4b91      	ldr	r3, [pc, #580]	@ (8004a70 <_printf_float+0x2d0>)
 800482a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800482e:	bf94      	ite	ls
 8004830:	4690      	movls	r8, r2
 8004832:	4698      	movhi	r8, r3
 8004834:	2303      	movs	r3, #3
 8004836:	6123      	str	r3, [r4, #16]
 8004838:	f02b 0304 	bic.w	r3, fp, #4
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	f04f 0900 	mov.w	r9, #0
 8004842:	9700      	str	r7, [sp, #0]
 8004844:	4633      	mov	r3, r6
 8004846:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004848:	4621      	mov	r1, r4
 800484a:	4628      	mov	r0, r5
 800484c:	f000 f9d2 	bl	8004bf4 <_printf_common>
 8004850:	3001      	adds	r0, #1
 8004852:	f040 808d 	bne.w	8004970 <_printf_float+0x1d0>
 8004856:	f04f 30ff 	mov.w	r0, #4294967295
 800485a:	b00d      	add	sp, #52	@ 0x34
 800485c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004860:	4642      	mov	r2, r8
 8004862:	464b      	mov	r3, r9
 8004864:	4640      	mov	r0, r8
 8004866:	4649      	mov	r1, r9
 8004868:	f7fc f960 	bl	8000b2c <__aeabi_dcmpun>
 800486c:	b140      	cbz	r0, 8004880 <_printf_float+0xe0>
 800486e:	464b      	mov	r3, r9
 8004870:	2b00      	cmp	r3, #0
 8004872:	bfbc      	itt	lt
 8004874:	232d      	movlt	r3, #45	@ 0x2d
 8004876:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800487a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a74 <_printf_float+0x2d4>)
 800487c:	4b7e      	ldr	r3, [pc, #504]	@ (8004a78 <_printf_float+0x2d8>)
 800487e:	e7d4      	b.n	800482a <_printf_float+0x8a>
 8004880:	6863      	ldr	r3, [r4, #4]
 8004882:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004886:	9206      	str	r2, [sp, #24]
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	d13b      	bne.n	8004904 <_printf_float+0x164>
 800488c:	2306      	movs	r3, #6
 800488e:	6063      	str	r3, [r4, #4]
 8004890:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004894:	2300      	movs	r3, #0
 8004896:	6022      	str	r2, [r4, #0]
 8004898:	9303      	str	r3, [sp, #12]
 800489a:	ab0a      	add	r3, sp, #40	@ 0x28
 800489c:	e9cd a301 	strd	sl, r3, [sp, #4]
 80048a0:	ab09      	add	r3, sp, #36	@ 0x24
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	6861      	ldr	r1, [r4, #4]
 80048a6:	ec49 8b10 	vmov	d0, r8, r9
 80048aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80048ae:	4628      	mov	r0, r5
 80048b0:	f7ff fed6 	bl	8004660 <__cvt>
 80048b4:	9b06      	ldr	r3, [sp, #24]
 80048b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80048b8:	2b47      	cmp	r3, #71	@ 0x47
 80048ba:	4680      	mov	r8, r0
 80048bc:	d129      	bne.n	8004912 <_printf_float+0x172>
 80048be:	1cc8      	adds	r0, r1, #3
 80048c0:	db02      	blt.n	80048c8 <_printf_float+0x128>
 80048c2:	6863      	ldr	r3, [r4, #4]
 80048c4:	4299      	cmp	r1, r3
 80048c6:	dd41      	ble.n	800494c <_printf_float+0x1ac>
 80048c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80048cc:	fa5f fa8a 	uxtb.w	sl, sl
 80048d0:	3901      	subs	r1, #1
 80048d2:	4652      	mov	r2, sl
 80048d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80048d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80048da:	f7ff ff26 	bl	800472a <__exponent>
 80048de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80048e0:	1813      	adds	r3, r2, r0
 80048e2:	2a01      	cmp	r2, #1
 80048e4:	4681      	mov	r9, r0
 80048e6:	6123      	str	r3, [r4, #16]
 80048e8:	dc02      	bgt.n	80048f0 <_printf_float+0x150>
 80048ea:	6822      	ldr	r2, [r4, #0]
 80048ec:	07d2      	lsls	r2, r2, #31
 80048ee:	d501      	bpl.n	80048f4 <_printf_float+0x154>
 80048f0:	3301      	adds	r3, #1
 80048f2:	6123      	str	r3, [r4, #16]
 80048f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0a2      	beq.n	8004842 <_printf_float+0xa2>
 80048fc:	232d      	movs	r3, #45	@ 0x2d
 80048fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004902:	e79e      	b.n	8004842 <_printf_float+0xa2>
 8004904:	9a06      	ldr	r2, [sp, #24]
 8004906:	2a47      	cmp	r2, #71	@ 0x47
 8004908:	d1c2      	bne.n	8004890 <_printf_float+0xf0>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1c0      	bne.n	8004890 <_printf_float+0xf0>
 800490e:	2301      	movs	r3, #1
 8004910:	e7bd      	b.n	800488e <_printf_float+0xee>
 8004912:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004916:	d9db      	bls.n	80048d0 <_printf_float+0x130>
 8004918:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800491c:	d118      	bne.n	8004950 <_printf_float+0x1b0>
 800491e:	2900      	cmp	r1, #0
 8004920:	6863      	ldr	r3, [r4, #4]
 8004922:	dd0b      	ble.n	800493c <_printf_float+0x19c>
 8004924:	6121      	str	r1, [r4, #16]
 8004926:	b913      	cbnz	r3, 800492e <_printf_float+0x18e>
 8004928:	6822      	ldr	r2, [r4, #0]
 800492a:	07d0      	lsls	r0, r2, #31
 800492c:	d502      	bpl.n	8004934 <_printf_float+0x194>
 800492e:	3301      	adds	r3, #1
 8004930:	440b      	add	r3, r1
 8004932:	6123      	str	r3, [r4, #16]
 8004934:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004936:	f04f 0900 	mov.w	r9, #0
 800493a:	e7db      	b.n	80048f4 <_printf_float+0x154>
 800493c:	b913      	cbnz	r3, 8004944 <_printf_float+0x1a4>
 800493e:	6822      	ldr	r2, [r4, #0]
 8004940:	07d2      	lsls	r2, r2, #31
 8004942:	d501      	bpl.n	8004948 <_printf_float+0x1a8>
 8004944:	3302      	adds	r3, #2
 8004946:	e7f4      	b.n	8004932 <_printf_float+0x192>
 8004948:	2301      	movs	r3, #1
 800494a:	e7f2      	b.n	8004932 <_printf_float+0x192>
 800494c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004952:	4299      	cmp	r1, r3
 8004954:	db05      	blt.n	8004962 <_printf_float+0x1c2>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	6121      	str	r1, [r4, #16]
 800495a:	07d8      	lsls	r0, r3, #31
 800495c:	d5ea      	bpl.n	8004934 <_printf_float+0x194>
 800495e:	1c4b      	adds	r3, r1, #1
 8004960:	e7e7      	b.n	8004932 <_printf_float+0x192>
 8004962:	2900      	cmp	r1, #0
 8004964:	bfd4      	ite	le
 8004966:	f1c1 0202 	rsble	r2, r1, #2
 800496a:	2201      	movgt	r2, #1
 800496c:	4413      	add	r3, r2
 800496e:	e7e0      	b.n	8004932 <_printf_float+0x192>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	055a      	lsls	r2, r3, #21
 8004974:	d407      	bmi.n	8004986 <_printf_float+0x1e6>
 8004976:	6923      	ldr	r3, [r4, #16]
 8004978:	4642      	mov	r2, r8
 800497a:	4631      	mov	r1, r6
 800497c:	4628      	mov	r0, r5
 800497e:	47b8      	blx	r7
 8004980:	3001      	adds	r0, #1
 8004982:	d12b      	bne.n	80049dc <_printf_float+0x23c>
 8004984:	e767      	b.n	8004856 <_printf_float+0xb6>
 8004986:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800498a:	f240 80dd 	bls.w	8004b48 <_printf_float+0x3a8>
 800498e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004992:	2200      	movs	r2, #0
 8004994:	2300      	movs	r3, #0
 8004996:	f7fc f897 	bl	8000ac8 <__aeabi_dcmpeq>
 800499a:	2800      	cmp	r0, #0
 800499c:	d033      	beq.n	8004a06 <_printf_float+0x266>
 800499e:	4a37      	ldr	r2, [pc, #220]	@ (8004a7c <_printf_float+0x2dc>)
 80049a0:	2301      	movs	r3, #1
 80049a2:	4631      	mov	r1, r6
 80049a4:	4628      	mov	r0, r5
 80049a6:	47b8      	blx	r7
 80049a8:	3001      	adds	r0, #1
 80049aa:	f43f af54 	beq.w	8004856 <_printf_float+0xb6>
 80049ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80049b2:	4543      	cmp	r3, r8
 80049b4:	db02      	blt.n	80049bc <_printf_float+0x21c>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	07d8      	lsls	r0, r3, #31
 80049ba:	d50f      	bpl.n	80049dc <_printf_float+0x23c>
 80049bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049c0:	4631      	mov	r1, r6
 80049c2:	4628      	mov	r0, r5
 80049c4:	47b8      	blx	r7
 80049c6:	3001      	adds	r0, #1
 80049c8:	f43f af45 	beq.w	8004856 <_printf_float+0xb6>
 80049cc:	f04f 0900 	mov.w	r9, #0
 80049d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80049d4:	f104 0a1a 	add.w	sl, r4, #26
 80049d8:	45c8      	cmp	r8, r9
 80049da:	dc09      	bgt.n	80049f0 <_printf_float+0x250>
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	079b      	lsls	r3, r3, #30
 80049e0:	f100 8103 	bmi.w	8004bea <_printf_float+0x44a>
 80049e4:	68e0      	ldr	r0, [r4, #12]
 80049e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049e8:	4298      	cmp	r0, r3
 80049ea:	bfb8      	it	lt
 80049ec:	4618      	movlt	r0, r3
 80049ee:	e734      	b.n	800485a <_printf_float+0xba>
 80049f0:	2301      	movs	r3, #1
 80049f2:	4652      	mov	r2, sl
 80049f4:	4631      	mov	r1, r6
 80049f6:	4628      	mov	r0, r5
 80049f8:	47b8      	blx	r7
 80049fa:	3001      	adds	r0, #1
 80049fc:	f43f af2b 	beq.w	8004856 <_printf_float+0xb6>
 8004a00:	f109 0901 	add.w	r9, r9, #1
 8004a04:	e7e8      	b.n	80049d8 <_printf_float+0x238>
 8004a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	dc39      	bgt.n	8004a80 <_printf_float+0x2e0>
 8004a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8004a7c <_printf_float+0x2dc>)
 8004a0e:	2301      	movs	r3, #1
 8004a10:	4631      	mov	r1, r6
 8004a12:	4628      	mov	r0, r5
 8004a14:	47b8      	blx	r7
 8004a16:	3001      	adds	r0, #1
 8004a18:	f43f af1d 	beq.w	8004856 <_printf_float+0xb6>
 8004a1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004a20:	ea59 0303 	orrs.w	r3, r9, r3
 8004a24:	d102      	bne.n	8004a2c <_printf_float+0x28c>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	07d9      	lsls	r1, r3, #31
 8004a2a:	d5d7      	bpl.n	80049dc <_printf_float+0x23c>
 8004a2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a30:	4631      	mov	r1, r6
 8004a32:	4628      	mov	r0, r5
 8004a34:	47b8      	blx	r7
 8004a36:	3001      	adds	r0, #1
 8004a38:	f43f af0d 	beq.w	8004856 <_printf_float+0xb6>
 8004a3c:	f04f 0a00 	mov.w	sl, #0
 8004a40:	f104 0b1a 	add.w	fp, r4, #26
 8004a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a46:	425b      	negs	r3, r3
 8004a48:	4553      	cmp	r3, sl
 8004a4a:	dc01      	bgt.n	8004a50 <_printf_float+0x2b0>
 8004a4c:	464b      	mov	r3, r9
 8004a4e:	e793      	b.n	8004978 <_printf_float+0x1d8>
 8004a50:	2301      	movs	r3, #1
 8004a52:	465a      	mov	r2, fp
 8004a54:	4631      	mov	r1, r6
 8004a56:	4628      	mov	r0, r5
 8004a58:	47b8      	blx	r7
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	f43f aefb 	beq.w	8004856 <_printf_float+0xb6>
 8004a60:	f10a 0a01 	add.w	sl, sl, #1
 8004a64:	e7ee      	b.n	8004a44 <_printf_float+0x2a4>
 8004a66:	bf00      	nop
 8004a68:	7fefffff 	.word	0x7fefffff
 8004a6c:	08007364 	.word	0x08007364
 8004a70:	08007368 	.word	0x08007368
 8004a74:	0800736c 	.word	0x0800736c
 8004a78:	08007370 	.word	0x08007370
 8004a7c:	08007374 	.word	0x08007374
 8004a80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a82:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a86:	4553      	cmp	r3, sl
 8004a88:	bfa8      	it	ge
 8004a8a:	4653      	movge	r3, sl
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	4699      	mov	r9, r3
 8004a90:	dc36      	bgt.n	8004b00 <_printf_float+0x360>
 8004a92:	f04f 0b00 	mov.w	fp, #0
 8004a96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a9a:	f104 021a 	add.w	r2, r4, #26
 8004a9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004aa0:	9306      	str	r3, [sp, #24]
 8004aa2:	eba3 0309 	sub.w	r3, r3, r9
 8004aa6:	455b      	cmp	r3, fp
 8004aa8:	dc31      	bgt.n	8004b0e <_printf_float+0x36e>
 8004aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aac:	459a      	cmp	sl, r3
 8004aae:	dc3a      	bgt.n	8004b26 <_printf_float+0x386>
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	07da      	lsls	r2, r3, #31
 8004ab4:	d437      	bmi.n	8004b26 <_printf_float+0x386>
 8004ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ab8:	ebaa 0903 	sub.w	r9, sl, r3
 8004abc:	9b06      	ldr	r3, [sp, #24]
 8004abe:	ebaa 0303 	sub.w	r3, sl, r3
 8004ac2:	4599      	cmp	r9, r3
 8004ac4:	bfa8      	it	ge
 8004ac6:	4699      	movge	r9, r3
 8004ac8:	f1b9 0f00 	cmp.w	r9, #0
 8004acc:	dc33      	bgt.n	8004b36 <_printf_float+0x396>
 8004ace:	f04f 0800 	mov.w	r8, #0
 8004ad2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ad6:	f104 0b1a 	add.w	fp, r4, #26
 8004ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004adc:	ebaa 0303 	sub.w	r3, sl, r3
 8004ae0:	eba3 0309 	sub.w	r3, r3, r9
 8004ae4:	4543      	cmp	r3, r8
 8004ae6:	f77f af79 	ble.w	80049dc <_printf_float+0x23c>
 8004aea:	2301      	movs	r3, #1
 8004aec:	465a      	mov	r2, fp
 8004aee:	4631      	mov	r1, r6
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b8      	blx	r7
 8004af4:	3001      	adds	r0, #1
 8004af6:	f43f aeae 	beq.w	8004856 <_printf_float+0xb6>
 8004afa:	f108 0801 	add.w	r8, r8, #1
 8004afe:	e7ec      	b.n	8004ada <_printf_float+0x33a>
 8004b00:	4642      	mov	r2, r8
 8004b02:	4631      	mov	r1, r6
 8004b04:	4628      	mov	r0, r5
 8004b06:	47b8      	blx	r7
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d1c2      	bne.n	8004a92 <_printf_float+0x2f2>
 8004b0c:	e6a3      	b.n	8004856 <_printf_float+0xb6>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	4631      	mov	r1, r6
 8004b12:	4628      	mov	r0, r5
 8004b14:	9206      	str	r2, [sp, #24]
 8004b16:	47b8      	blx	r7
 8004b18:	3001      	adds	r0, #1
 8004b1a:	f43f ae9c 	beq.w	8004856 <_printf_float+0xb6>
 8004b1e:	9a06      	ldr	r2, [sp, #24]
 8004b20:	f10b 0b01 	add.w	fp, fp, #1
 8004b24:	e7bb      	b.n	8004a9e <_printf_float+0x2fe>
 8004b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b8      	blx	r7
 8004b30:	3001      	adds	r0, #1
 8004b32:	d1c0      	bne.n	8004ab6 <_printf_float+0x316>
 8004b34:	e68f      	b.n	8004856 <_printf_float+0xb6>
 8004b36:	9a06      	ldr	r2, [sp, #24]
 8004b38:	464b      	mov	r3, r9
 8004b3a:	4442      	add	r2, r8
 8004b3c:	4631      	mov	r1, r6
 8004b3e:	4628      	mov	r0, r5
 8004b40:	47b8      	blx	r7
 8004b42:	3001      	adds	r0, #1
 8004b44:	d1c3      	bne.n	8004ace <_printf_float+0x32e>
 8004b46:	e686      	b.n	8004856 <_printf_float+0xb6>
 8004b48:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b4c:	f1ba 0f01 	cmp.w	sl, #1
 8004b50:	dc01      	bgt.n	8004b56 <_printf_float+0x3b6>
 8004b52:	07db      	lsls	r3, r3, #31
 8004b54:	d536      	bpl.n	8004bc4 <_printf_float+0x424>
 8004b56:	2301      	movs	r3, #1
 8004b58:	4642      	mov	r2, r8
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	47b8      	blx	r7
 8004b60:	3001      	adds	r0, #1
 8004b62:	f43f ae78 	beq.w	8004856 <_printf_float+0xb6>
 8004b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b8      	blx	r7
 8004b70:	3001      	adds	r0, #1
 8004b72:	f43f ae70 	beq.w	8004856 <_printf_float+0xb6>
 8004b76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b82:	f7fb ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b86:	b9c0      	cbnz	r0, 8004bba <_printf_float+0x41a>
 8004b88:	4653      	mov	r3, sl
 8004b8a:	f108 0201 	add.w	r2, r8, #1
 8004b8e:	4631      	mov	r1, r6
 8004b90:	4628      	mov	r0, r5
 8004b92:	47b8      	blx	r7
 8004b94:	3001      	adds	r0, #1
 8004b96:	d10c      	bne.n	8004bb2 <_printf_float+0x412>
 8004b98:	e65d      	b.n	8004856 <_printf_float+0xb6>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	465a      	mov	r2, fp
 8004b9e:	4631      	mov	r1, r6
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	47b8      	blx	r7
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	f43f ae56 	beq.w	8004856 <_printf_float+0xb6>
 8004baa:	f108 0801 	add.w	r8, r8, #1
 8004bae:	45d0      	cmp	r8, sl
 8004bb0:	dbf3      	blt.n	8004b9a <_printf_float+0x3fa>
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004bb8:	e6df      	b.n	800497a <_printf_float+0x1da>
 8004bba:	f04f 0800 	mov.w	r8, #0
 8004bbe:	f104 0b1a 	add.w	fp, r4, #26
 8004bc2:	e7f4      	b.n	8004bae <_printf_float+0x40e>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	4642      	mov	r2, r8
 8004bc8:	e7e1      	b.n	8004b8e <_printf_float+0x3ee>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	464a      	mov	r2, r9
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	47b8      	blx	r7
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	f43f ae3e 	beq.w	8004856 <_printf_float+0xb6>
 8004bda:	f108 0801 	add.w	r8, r8, #1
 8004bde:	68e3      	ldr	r3, [r4, #12]
 8004be0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004be2:	1a5b      	subs	r3, r3, r1
 8004be4:	4543      	cmp	r3, r8
 8004be6:	dcf0      	bgt.n	8004bca <_printf_float+0x42a>
 8004be8:	e6fc      	b.n	80049e4 <_printf_float+0x244>
 8004bea:	f04f 0800 	mov.w	r8, #0
 8004bee:	f104 0919 	add.w	r9, r4, #25
 8004bf2:	e7f4      	b.n	8004bde <_printf_float+0x43e>

08004bf4 <_printf_common>:
 8004bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	4616      	mov	r6, r2
 8004bfa:	4698      	mov	r8, r3
 8004bfc:	688a      	ldr	r2, [r1, #8]
 8004bfe:	690b      	ldr	r3, [r1, #16]
 8004c00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c04:	4293      	cmp	r3, r2
 8004c06:	bfb8      	it	lt
 8004c08:	4613      	movlt	r3, r2
 8004c0a:	6033      	str	r3, [r6, #0]
 8004c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c10:	4607      	mov	r7, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	b10a      	cbz	r2, 8004c1a <_printf_common+0x26>
 8004c16:	3301      	adds	r3, #1
 8004c18:	6033      	str	r3, [r6, #0]
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	0699      	lsls	r1, r3, #26
 8004c1e:	bf42      	ittt	mi
 8004c20:	6833      	ldrmi	r3, [r6, #0]
 8004c22:	3302      	addmi	r3, #2
 8004c24:	6033      	strmi	r3, [r6, #0]
 8004c26:	6825      	ldr	r5, [r4, #0]
 8004c28:	f015 0506 	ands.w	r5, r5, #6
 8004c2c:	d106      	bne.n	8004c3c <_printf_common+0x48>
 8004c2e:	f104 0a19 	add.w	sl, r4, #25
 8004c32:	68e3      	ldr	r3, [r4, #12]
 8004c34:	6832      	ldr	r2, [r6, #0]
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	42ab      	cmp	r3, r5
 8004c3a:	dc26      	bgt.n	8004c8a <_printf_common+0x96>
 8004c3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c40:	6822      	ldr	r2, [r4, #0]
 8004c42:	3b00      	subs	r3, #0
 8004c44:	bf18      	it	ne
 8004c46:	2301      	movne	r3, #1
 8004c48:	0692      	lsls	r2, r2, #26
 8004c4a:	d42b      	bmi.n	8004ca4 <_printf_common+0xb0>
 8004c4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c50:	4641      	mov	r1, r8
 8004c52:	4638      	mov	r0, r7
 8004c54:	47c8      	blx	r9
 8004c56:	3001      	adds	r0, #1
 8004c58:	d01e      	beq.n	8004c98 <_printf_common+0xa4>
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	6922      	ldr	r2, [r4, #16]
 8004c5e:	f003 0306 	and.w	r3, r3, #6
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	bf02      	ittt	eq
 8004c66:	68e5      	ldreq	r5, [r4, #12]
 8004c68:	6833      	ldreq	r3, [r6, #0]
 8004c6a:	1aed      	subeq	r5, r5, r3
 8004c6c:	68a3      	ldr	r3, [r4, #8]
 8004c6e:	bf0c      	ite	eq
 8004c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c74:	2500      	movne	r5, #0
 8004c76:	4293      	cmp	r3, r2
 8004c78:	bfc4      	itt	gt
 8004c7a:	1a9b      	subgt	r3, r3, r2
 8004c7c:	18ed      	addgt	r5, r5, r3
 8004c7e:	2600      	movs	r6, #0
 8004c80:	341a      	adds	r4, #26
 8004c82:	42b5      	cmp	r5, r6
 8004c84:	d11a      	bne.n	8004cbc <_printf_common+0xc8>
 8004c86:	2000      	movs	r0, #0
 8004c88:	e008      	b.n	8004c9c <_printf_common+0xa8>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4652      	mov	r2, sl
 8004c8e:	4641      	mov	r1, r8
 8004c90:	4638      	mov	r0, r7
 8004c92:	47c8      	blx	r9
 8004c94:	3001      	adds	r0, #1
 8004c96:	d103      	bne.n	8004ca0 <_printf_common+0xac>
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca0:	3501      	adds	r5, #1
 8004ca2:	e7c6      	b.n	8004c32 <_printf_common+0x3e>
 8004ca4:	18e1      	adds	r1, r4, r3
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	2030      	movs	r0, #48	@ 0x30
 8004caa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cae:	4422      	add	r2, r4
 8004cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cb8:	3302      	adds	r3, #2
 8004cba:	e7c7      	b.n	8004c4c <_printf_common+0x58>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	47c8      	blx	r9
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d0e6      	beq.n	8004c98 <_printf_common+0xa4>
 8004cca:	3601      	adds	r6, #1
 8004ccc:	e7d9      	b.n	8004c82 <_printf_common+0x8e>
	...

08004cd0 <_printf_i>:
 8004cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd4:	7e0f      	ldrb	r7, [r1, #24]
 8004cd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004cd8:	2f78      	cmp	r7, #120	@ 0x78
 8004cda:	4691      	mov	r9, r2
 8004cdc:	4680      	mov	r8, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	469a      	mov	sl, r3
 8004ce2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ce6:	d807      	bhi.n	8004cf8 <_printf_i+0x28>
 8004ce8:	2f62      	cmp	r7, #98	@ 0x62
 8004cea:	d80a      	bhi.n	8004d02 <_printf_i+0x32>
 8004cec:	2f00      	cmp	r7, #0
 8004cee:	f000 80d2 	beq.w	8004e96 <_printf_i+0x1c6>
 8004cf2:	2f58      	cmp	r7, #88	@ 0x58
 8004cf4:	f000 80b9 	beq.w	8004e6a <_printf_i+0x19a>
 8004cf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d00:	e03a      	b.n	8004d78 <_printf_i+0xa8>
 8004d02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d06:	2b15      	cmp	r3, #21
 8004d08:	d8f6      	bhi.n	8004cf8 <_printf_i+0x28>
 8004d0a:	a101      	add	r1, pc, #4	@ (adr r1, 8004d10 <_printf_i+0x40>)
 8004d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d10:	08004d69 	.word	0x08004d69
 8004d14:	08004d7d 	.word	0x08004d7d
 8004d18:	08004cf9 	.word	0x08004cf9
 8004d1c:	08004cf9 	.word	0x08004cf9
 8004d20:	08004cf9 	.word	0x08004cf9
 8004d24:	08004cf9 	.word	0x08004cf9
 8004d28:	08004d7d 	.word	0x08004d7d
 8004d2c:	08004cf9 	.word	0x08004cf9
 8004d30:	08004cf9 	.word	0x08004cf9
 8004d34:	08004cf9 	.word	0x08004cf9
 8004d38:	08004cf9 	.word	0x08004cf9
 8004d3c:	08004e7d 	.word	0x08004e7d
 8004d40:	08004da7 	.word	0x08004da7
 8004d44:	08004e37 	.word	0x08004e37
 8004d48:	08004cf9 	.word	0x08004cf9
 8004d4c:	08004cf9 	.word	0x08004cf9
 8004d50:	08004e9f 	.word	0x08004e9f
 8004d54:	08004cf9 	.word	0x08004cf9
 8004d58:	08004da7 	.word	0x08004da7
 8004d5c:	08004cf9 	.word	0x08004cf9
 8004d60:	08004cf9 	.word	0x08004cf9
 8004d64:	08004e3f 	.word	0x08004e3f
 8004d68:	6833      	ldr	r3, [r6, #0]
 8004d6a:	1d1a      	adds	r2, r3, #4
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6032      	str	r2, [r6, #0]
 8004d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e09d      	b.n	8004eb8 <_printf_i+0x1e8>
 8004d7c:	6833      	ldr	r3, [r6, #0]
 8004d7e:	6820      	ldr	r0, [r4, #0]
 8004d80:	1d19      	adds	r1, r3, #4
 8004d82:	6031      	str	r1, [r6, #0]
 8004d84:	0606      	lsls	r6, r0, #24
 8004d86:	d501      	bpl.n	8004d8c <_printf_i+0xbc>
 8004d88:	681d      	ldr	r5, [r3, #0]
 8004d8a:	e003      	b.n	8004d94 <_printf_i+0xc4>
 8004d8c:	0645      	lsls	r5, r0, #25
 8004d8e:	d5fb      	bpl.n	8004d88 <_printf_i+0xb8>
 8004d90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d94:	2d00      	cmp	r5, #0
 8004d96:	da03      	bge.n	8004da0 <_printf_i+0xd0>
 8004d98:	232d      	movs	r3, #45	@ 0x2d
 8004d9a:	426d      	negs	r5, r5
 8004d9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004da0:	4859      	ldr	r0, [pc, #356]	@ (8004f08 <_printf_i+0x238>)
 8004da2:	230a      	movs	r3, #10
 8004da4:	e011      	b.n	8004dca <_printf_i+0xfa>
 8004da6:	6821      	ldr	r1, [r4, #0]
 8004da8:	6833      	ldr	r3, [r6, #0]
 8004daa:	0608      	lsls	r0, r1, #24
 8004dac:	f853 5b04 	ldr.w	r5, [r3], #4
 8004db0:	d402      	bmi.n	8004db8 <_printf_i+0xe8>
 8004db2:	0649      	lsls	r1, r1, #25
 8004db4:	bf48      	it	mi
 8004db6:	b2ad      	uxthmi	r5, r5
 8004db8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dba:	4853      	ldr	r0, [pc, #332]	@ (8004f08 <_printf_i+0x238>)
 8004dbc:	6033      	str	r3, [r6, #0]
 8004dbe:	bf14      	ite	ne
 8004dc0:	230a      	movne	r3, #10
 8004dc2:	2308      	moveq	r3, #8
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004dca:	6866      	ldr	r6, [r4, #4]
 8004dcc:	60a6      	str	r6, [r4, #8]
 8004dce:	2e00      	cmp	r6, #0
 8004dd0:	bfa2      	ittt	ge
 8004dd2:	6821      	ldrge	r1, [r4, #0]
 8004dd4:	f021 0104 	bicge.w	r1, r1, #4
 8004dd8:	6021      	strge	r1, [r4, #0]
 8004dda:	b90d      	cbnz	r5, 8004de0 <_printf_i+0x110>
 8004ddc:	2e00      	cmp	r6, #0
 8004dde:	d04b      	beq.n	8004e78 <_printf_i+0x1a8>
 8004de0:	4616      	mov	r6, r2
 8004de2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004de6:	fb03 5711 	mls	r7, r3, r1, r5
 8004dea:	5dc7      	ldrb	r7, [r0, r7]
 8004dec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004df0:	462f      	mov	r7, r5
 8004df2:	42bb      	cmp	r3, r7
 8004df4:	460d      	mov	r5, r1
 8004df6:	d9f4      	bls.n	8004de2 <_printf_i+0x112>
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d10b      	bne.n	8004e14 <_printf_i+0x144>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	07df      	lsls	r7, r3, #31
 8004e00:	d508      	bpl.n	8004e14 <_printf_i+0x144>
 8004e02:	6923      	ldr	r3, [r4, #16]
 8004e04:	6861      	ldr	r1, [r4, #4]
 8004e06:	4299      	cmp	r1, r3
 8004e08:	bfde      	ittt	le
 8004e0a:	2330      	movle	r3, #48	@ 0x30
 8004e0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e14:	1b92      	subs	r2, r2, r6
 8004e16:	6122      	str	r2, [r4, #16]
 8004e18:	f8cd a000 	str.w	sl, [sp]
 8004e1c:	464b      	mov	r3, r9
 8004e1e:	aa03      	add	r2, sp, #12
 8004e20:	4621      	mov	r1, r4
 8004e22:	4640      	mov	r0, r8
 8004e24:	f7ff fee6 	bl	8004bf4 <_printf_common>
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d14a      	bne.n	8004ec2 <_printf_i+0x1f2>
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	b004      	add	sp, #16
 8004e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	f043 0320 	orr.w	r3, r3, #32
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	4833      	ldr	r0, [pc, #204]	@ (8004f0c <_printf_i+0x23c>)
 8004e40:	2778      	movs	r7, #120	@ 0x78
 8004e42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	6831      	ldr	r1, [r6, #0]
 8004e4a:	061f      	lsls	r7, r3, #24
 8004e4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e50:	d402      	bmi.n	8004e58 <_printf_i+0x188>
 8004e52:	065f      	lsls	r7, r3, #25
 8004e54:	bf48      	it	mi
 8004e56:	b2ad      	uxthmi	r5, r5
 8004e58:	6031      	str	r1, [r6, #0]
 8004e5a:	07d9      	lsls	r1, r3, #31
 8004e5c:	bf44      	itt	mi
 8004e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8004e62:	6023      	strmi	r3, [r4, #0]
 8004e64:	b11d      	cbz	r5, 8004e6e <_printf_i+0x19e>
 8004e66:	2310      	movs	r3, #16
 8004e68:	e7ac      	b.n	8004dc4 <_printf_i+0xf4>
 8004e6a:	4827      	ldr	r0, [pc, #156]	@ (8004f08 <_printf_i+0x238>)
 8004e6c:	e7e9      	b.n	8004e42 <_printf_i+0x172>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	f023 0320 	bic.w	r3, r3, #32
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	e7f6      	b.n	8004e66 <_printf_i+0x196>
 8004e78:	4616      	mov	r6, r2
 8004e7a:	e7bd      	b.n	8004df8 <_printf_i+0x128>
 8004e7c:	6833      	ldr	r3, [r6, #0]
 8004e7e:	6825      	ldr	r5, [r4, #0]
 8004e80:	6961      	ldr	r1, [r4, #20]
 8004e82:	1d18      	adds	r0, r3, #4
 8004e84:	6030      	str	r0, [r6, #0]
 8004e86:	062e      	lsls	r6, r5, #24
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	d501      	bpl.n	8004e90 <_printf_i+0x1c0>
 8004e8c:	6019      	str	r1, [r3, #0]
 8004e8e:	e002      	b.n	8004e96 <_printf_i+0x1c6>
 8004e90:	0668      	lsls	r0, r5, #25
 8004e92:	d5fb      	bpl.n	8004e8c <_printf_i+0x1bc>
 8004e94:	8019      	strh	r1, [r3, #0]
 8004e96:	2300      	movs	r3, #0
 8004e98:	6123      	str	r3, [r4, #16]
 8004e9a:	4616      	mov	r6, r2
 8004e9c:	e7bc      	b.n	8004e18 <_printf_i+0x148>
 8004e9e:	6833      	ldr	r3, [r6, #0]
 8004ea0:	1d1a      	adds	r2, r3, #4
 8004ea2:	6032      	str	r2, [r6, #0]
 8004ea4:	681e      	ldr	r6, [r3, #0]
 8004ea6:	6862      	ldr	r2, [r4, #4]
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	4630      	mov	r0, r6
 8004eac:	f7fb f990 	bl	80001d0 <memchr>
 8004eb0:	b108      	cbz	r0, 8004eb6 <_printf_i+0x1e6>
 8004eb2:	1b80      	subs	r0, r0, r6
 8004eb4:	6060      	str	r0, [r4, #4]
 8004eb6:	6863      	ldr	r3, [r4, #4]
 8004eb8:	6123      	str	r3, [r4, #16]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ec0:	e7aa      	b.n	8004e18 <_printf_i+0x148>
 8004ec2:	6923      	ldr	r3, [r4, #16]
 8004ec4:	4632      	mov	r2, r6
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	4640      	mov	r0, r8
 8004eca:	47d0      	blx	sl
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d0ad      	beq.n	8004e2c <_printf_i+0x15c>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	079b      	lsls	r3, r3, #30
 8004ed4:	d413      	bmi.n	8004efe <_printf_i+0x22e>
 8004ed6:	68e0      	ldr	r0, [r4, #12]
 8004ed8:	9b03      	ldr	r3, [sp, #12]
 8004eda:	4298      	cmp	r0, r3
 8004edc:	bfb8      	it	lt
 8004ede:	4618      	movlt	r0, r3
 8004ee0:	e7a6      	b.n	8004e30 <_printf_i+0x160>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	4632      	mov	r2, r6
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	4640      	mov	r0, r8
 8004eea:	47d0      	blx	sl
 8004eec:	3001      	adds	r0, #1
 8004eee:	d09d      	beq.n	8004e2c <_printf_i+0x15c>
 8004ef0:	3501      	adds	r5, #1
 8004ef2:	68e3      	ldr	r3, [r4, #12]
 8004ef4:	9903      	ldr	r1, [sp, #12]
 8004ef6:	1a5b      	subs	r3, r3, r1
 8004ef8:	42ab      	cmp	r3, r5
 8004efa:	dcf2      	bgt.n	8004ee2 <_printf_i+0x212>
 8004efc:	e7eb      	b.n	8004ed6 <_printf_i+0x206>
 8004efe:	2500      	movs	r5, #0
 8004f00:	f104 0619 	add.w	r6, r4, #25
 8004f04:	e7f5      	b.n	8004ef2 <_printf_i+0x222>
 8004f06:	bf00      	nop
 8004f08:	08007376 	.word	0x08007376
 8004f0c:	08007387 	.word	0x08007387

08004f10 <std>:
 8004f10:	2300      	movs	r3, #0
 8004f12:	b510      	push	{r4, lr}
 8004f14:	4604      	mov	r4, r0
 8004f16:	e9c0 3300 	strd	r3, r3, [r0]
 8004f1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f1e:	6083      	str	r3, [r0, #8]
 8004f20:	8181      	strh	r1, [r0, #12]
 8004f22:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f24:	81c2      	strh	r2, [r0, #14]
 8004f26:	6183      	str	r3, [r0, #24]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	2208      	movs	r2, #8
 8004f2c:	305c      	adds	r0, #92	@ 0x5c
 8004f2e:	f000 f914 	bl	800515a <memset>
 8004f32:	4b0d      	ldr	r3, [pc, #52]	@ (8004f68 <std+0x58>)
 8004f34:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f36:	4b0d      	ldr	r3, [pc, #52]	@ (8004f6c <std+0x5c>)
 8004f38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <std+0x60>)
 8004f3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f74 <std+0x64>)
 8004f40:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f42:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <std+0x68>)
 8004f44:	6224      	str	r4, [r4, #32]
 8004f46:	429c      	cmp	r4, r3
 8004f48:	d006      	beq.n	8004f58 <std+0x48>
 8004f4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f4e:	4294      	cmp	r4, r2
 8004f50:	d002      	beq.n	8004f58 <std+0x48>
 8004f52:	33d0      	adds	r3, #208	@ 0xd0
 8004f54:	429c      	cmp	r4, r3
 8004f56:	d105      	bne.n	8004f64 <std+0x54>
 8004f58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f60:	f000 b978 	b.w	8005254 <__retarget_lock_init_recursive>
 8004f64:	bd10      	pop	{r4, pc}
 8004f66:	bf00      	nop
 8004f68:	080050d5 	.word	0x080050d5
 8004f6c:	080050f7 	.word	0x080050f7
 8004f70:	0800512f 	.word	0x0800512f
 8004f74:	08005153 	.word	0x08005153
 8004f78:	20000320 	.word	0x20000320

08004f7c <stdio_exit_handler>:
 8004f7c:	4a02      	ldr	r2, [pc, #8]	@ (8004f88 <stdio_exit_handler+0xc>)
 8004f7e:	4903      	ldr	r1, [pc, #12]	@ (8004f8c <stdio_exit_handler+0x10>)
 8004f80:	4803      	ldr	r0, [pc, #12]	@ (8004f90 <stdio_exit_handler+0x14>)
 8004f82:	f000 b869 	b.w	8005058 <_fwalk_sglue>
 8004f86:	bf00      	nop
 8004f88:	20000010 	.word	0x20000010
 8004f8c:	08006bb5 	.word	0x08006bb5
 8004f90:	20000020 	.word	0x20000020

08004f94 <cleanup_stdio>:
 8004f94:	6841      	ldr	r1, [r0, #4]
 8004f96:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc8 <cleanup_stdio+0x34>)
 8004f98:	4299      	cmp	r1, r3
 8004f9a:	b510      	push	{r4, lr}
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	d001      	beq.n	8004fa4 <cleanup_stdio+0x10>
 8004fa0:	f001 fe08 	bl	8006bb4 <_fflush_r>
 8004fa4:	68a1      	ldr	r1, [r4, #8]
 8004fa6:	4b09      	ldr	r3, [pc, #36]	@ (8004fcc <cleanup_stdio+0x38>)
 8004fa8:	4299      	cmp	r1, r3
 8004faa:	d002      	beq.n	8004fb2 <cleanup_stdio+0x1e>
 8004fac:	4620      	mov	r0, r4
 8004fae:	f001 fe01 	bl	8006bb4 <_fflush_r>
 8004fb2:	68e1      	ldr	r1, [r4, #12]
 8004fb4:	4b06      	ldr	r3, [pc, #24]	@ (8004fd0 <cleanup_stdio+0x3c>)
 8004fb6:	4299      	cmp	r1, r3
 8004fb8:	d004      	beq.n	8004fc4 <cleanup_stdio+0x30>
 8004fba:	4620      	mov	r0, r4
 8004fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc0:	f001 bdf8 	b.w	8006bb4 <_fflush_r>
 8004fc4:	bd10      	pop	{r4, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000320 	.word	0x20000320
 8004fcc:	20000388 	.word	0x20000388
 8004fd0:	200003f0 	.word	0x200003f0

08004fd4 <global_stdio_init.part.0>:
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005004 <global_stdio_init.part.0+0x30>)
 8004fd8:	4c0b      	ldr	r4, [pc, #44]	@ (8005008 <global_stdio_init.part.0+0x34>)
 8004fda:	4a0c      	ldr	r2, [pc, #48]	@ (800500c <global_stdio_init.part.0+0x38>)
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	4620      	mov	r0, r4
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2104      	movs	r1, #4
 8004fe4:	f7ff ff94 	bl	8004f10 <std>
 8004fe8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004fec:	2201      	movs	r2, #1
 8004fee:	2109      	movs	r1, #9
 8004ff0:	f7ff ff8e 	bl	8004f10 <std>
 8004ff4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ffe:	2112      	movs	r1, #18
 8005000:	f7ff bf86 	b.w	8004f10 <std>
 8005004:	20000458 	.word	0x20000458
 8005008:	20000320 	.word	0x20000320
 800500c:	08004f7d 	.word	0x08004f7d

08005010 <__sfp_lock_acquire>:
 8005010:	4801      	ldr	r0, [pc, #4]	@ (8005018 <__sfp_lock_acquire+0x8>)
 8005012:	f000 b920 	b.w	8005256 <__retarget_lock_acquire_recursive>
 8005016:	bf00      	nop
 8005018:	20000461 	.word	0x20000461

0800501c <__sfp_lock_release>:
 800501c:	4801      	ldr	r0, [pc, #4]	@ (8005024 <__sfp_lock_release+0x8>)
 800501e:	f000 b91b 	b.w	8005258 <__retarget_lock_release_recursive>
 8005022:	bf00      	nop
 8005024:	20000461 	.word	0x20000461

08005028 <__sinit>:
 8005028:	b510      	push	{r4, lr}
 800502a:	4604      	mov	r4, r0
 800502c:	f7ff fff0 	bl	8005010 <__sfp_lock_acquire>
 8005030:	6a23      	ldr	r3, [r4, #32]
 8005032:	b11b      	cbz	r3, 800503c <__sinit+0x14>
 8005034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005038:	f7ff bff0 	b.w	800501c <__sfp_lock_release>
 800503c:	4b04      	ldr	r3, [pc, #16]	@ (8005050 <__sinit+0x28>)
 800503e:	6223      	str	r3, [r4, #32]
 8005040:	4b04      	ldr	r3, [pc, #16]	@ (8005054 <__sinit+0x2c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f5      	bne.n	8005034 <__sinit+0xc>
 8005048:	f7ff ffc4 	bl	8004fd4 <global_stdio_init.part.0>
 800504c:	e7f2      	b.n	8005034 <__sinit+0xc>
 800504e:	bf00      	nop
 8005050:	08004f95 	.word	0x08004f95
 8005054:	20000458 	.word	0x20000458

08005058 <_fwalk_sglue>:
 8005058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800505c:	4607      	mov	r7, r0
 800505e:	4688      	mov	r8, r1
 8005060:	4614      	mov	r4, r2
 8005062:	2600      	movs	r6, #0
 8005064:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005068:	f1b9 0901 	subs.w	r9, r9, #1
 800506c:	d505      	bpl.n	800507a <_fwalk_sglue+0x22>
 800506e:	6824      	ldr	r4, [r4, #0]
 8005070:	2c00      	cmp	r4, #0
 8005072:	d1f7      	bne.n	8005064 <_fwalk_sglue+0xc>
 8005074:	4630      	mov	r0, r6
 8005076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800507a:	89ab      	ldrh	r3, [r5, #12]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d907      	bls.n	8005090 <_fwalk_sglue+0x38>
 8005080:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005084:	3301      	adds	r3, #1
 8005086:	d003      	beq.n	8005090 <_fwalk_sglue+0x38>
 8005088:	4629      	mov	r1, r5
 800508a:	4638      	mov	r0, r7
 800508c:	47c0      	blx	r8
 800508e:	4306      	orrs	r6, r0
 8005090:	3568      	adds	r5, #104	@ 0x68
 8005092:	e7e9      	b.n	8005068 <_fwalk_sglue+0x10>

08005094 <siprintf>:
 8005094:	b40e      	push	{r1, r2, r3}
 8005096:	b500      	push	{lr}
 8005098:	b09c      	sub	sp, #112	@ 0x70
 800509a:	ab1d      	add	r3, sp, #116	@ 0x74
 800509c:	9002      	str	r0, [sp, #8]
 800509e:	9006      	str	r0, [sp, #24]
 80050a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050a4:	4809      	ldr	r0, [pc, #36]	@ (80050cc <siprintf+0x38>)
 80050a6:	9107      	str	r1, [sp, #28]
 80050a8:	9104      	str	r1, [sp, #16]
 80050aa:	4909      	ldr	r1, [pc, #36]	@ (80050d0 <siprintf+0x3c>)
 80050ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80050b0:	9105      	str	r1, [sp, #20]
 80050b2:	6800      	ldr	r0, [r0, #0]
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	a902      	add	r1, sp, #8
 80050b8:	f001 fbfc 	bl	80068b4 <_svfiprintf_r>
 80050bc:	9b02      	ldr	r3, [sp, #8]
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	b01c      	add	sp, #112	@ 0x70
 80050c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80050c8:	b003      	add	sp, #12
 80050ca:	4770      	bx	lr
 80050cc:	2000001c 	.word	0x2000001c
 80050d0:	ffff0208 	.word	0xffff0208

080050d4 <__sread>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	460c      	mov	r4, r1
 80050d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050dc:	f000 f86c 	bl	80051b8 <_read_r>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	bfab      	itete	ge
 80050e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80050e6:	89a3      	ldrhlt	r3, [r4, #12]
 80050e8:	181b      	addge	r3, r3, r0
 80050ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80050ee:	bfac      	ite	ge
 80050f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80050f2:	81a3      	strhlt	r3, [r4, #12]
 80050f4:	bd10      	pop	{r4, pc}

080050f6 <__swrite>:
 80050f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050fa:	461f      	mov	r7, r3
 80050fc:	898b      	ldrh	r3, [r1, #12]
 80050fe:	05db      	lsls	r3, r3, #23
 8005100:	4605      	mov	r5, r0
 8005102:	460c      	mov	r4, r1
 8005104:	4616      	mov	r6, r2
 8005106:	d505      	bpl.n	8005114 <__swrite+0x1e>
 8005108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800510c:	2302      	movs	r3, #2
 800510e:	2200      	movs	r2, #0
 8005110:	f000 f840 	bl	8005194 <_lseek_r>
 8005114:	89a3      	ldrh	r3, [r4, #12]
 8005116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800511a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800511e:	81a3      	strh	r3, [r4, #12]
 8005120:	4632      	mov	r2, r6
 8005122:	463b      	mov	r3, r7
 8005124:	4628      	mov	r0, r5
 8005126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800512a:	f000 b857 	b.w	80051dc <_write_r>

0800512e <__sseek>:
 800512e:	b510      	push	{r4, lr}
 8005130:	460c      	mov	r4, r1
 8005132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005136:	f000 f82d 	bl	8005194 <_lseek_r>
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	bf15      	itete	ne
 8005140:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005142:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005146:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800514a:	81a3      	strheq	r3, [r4, #12]
 800514c:	bf18      	it	ne
 800514e:	81a3      	strhne	r3, [r4, #12]
 8005150:	bd10      	pop	{r4, pc}

08005152 <__sclose>:
 8005152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005156:	f000 b80d 	b.w	8005174 <_close_r>

0800515a <memset>:
 800515a:	4402      	add	r2, r0
 800515c:	4603      	mov	r3, r0
 800515e:	4293      	cmp	r3, r2
 8005160:	d100      	bne.n	8005164 <memset+0xa>
 8005162:	4770      	bx	lr
 8005164:	f803 1b01 	strb.w	r1, [r3], #1
 8005168:	e7f9      	b.n	800515e <memset+0x4>
	...

0800516c <_localeconv_r>:
 800516c:	4800      	ldr	r0, [pc, #0]	@ (8005170 <_localeconv_r+0x4>)
 800516e:	4770      	bx	lr
 8005170:	2000015c 	.word	0x2000015c

08005174 <_close_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4d06      	ldr	r5, [pc, #24]	@ (8005190 <_close_r+0x1c>)
 8005178:	2300      	movs	r3, #0
 800517a:	4604      	mov	r4, r0
 800517c:	4608      	mov	r0, r1
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	f7fc f864 	bl	800124c <_close>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d102      	bne.n	800518e <_close_r+0x1a>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	b103      	cbz	r3, 800518e <_close_r+0x1a>
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	2000045c 	.word	0x2000045c

08005194 <_lseek_r>:
 8005194:	b538      	push	{r3, r4, r5, lr}
 8005196:	4d07      	ldr	r5, [pc, #28]	@ (80051b4 <_lseek_r+0x20>)
 8005198:	4604      	mov	r4, r0
 800519a:	4608      	mov	r0, r1
 800519c:	4611      	mov	r1, r2
 800519e:	2200      	movs	r2, #0
 80051a0:	602a      	str	r2, [r5, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	f7fc f879 	bl	800129a <_lseek>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	d102      	bne.n	80051b2 <_lseek_r+0x1e>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	b103      	cbz	r3, 80051b2 <_lseek_r+0x1e>
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	2000045c 	.word	0x2000045c

080051b8 <_read_r>:
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	4d07      	ldr	r5, [pc, #28]	@ (80051d8 <_read_r+0x20>)
 80051bc:	4604      	mov	r4, r0
 80051be:	4608      	mov	r0, r1
 80051c0:	4611      	mov	r1, r2
 80051c2:	2200      	movs	r2, #0
 80051c4:	602a      	str	r2, [r5, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f7fc f807 	bl	80011da <_read>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	d102      	bne.n	80051d6 <_read_r+0x1e>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	b103      	cbz	r3, 80051d6 <_read_r+0x1e>
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	bd38      	pop	{r3, r4, r5, pc}
 80051d8:	2000045c 	.word	0x2000045c

080051dc <_write_r>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	4d07      	ldr	r5, [pc, #28]	@ (80051fc <_write_r+0x20>)
 80051e0:	4604      	mov	r4, r0
 80051e2:	4608      	mov	r0, r1
 80051e4:	4611      	mov	r1, r2
 80051e6:	2200      	movs	r2, #0
 80051e8:	602a      	str	r2, [r5, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	f7fc f812 	bl	8001214 <_write>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d102      	bne.n	80051fa <_write_r+0x1e>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	b103      	cbz	r3, 80051fa <_write_r+0x1e>
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	2000045c 	.word	0x2000045c

08005200 <__errno>:
 8005200:	4b01      	ldr	r3, [pc, #4]	@ (8005208 <__errno+0x8>)
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	2000001c 	.word	0x2000001c

0800520c <__libc_init_array>:
 800520c:	b570      	push	{r4, r5, r6, lr}
 800520e:	4d0d      	ldr	r5, [pc, #52]	@ (8005244 <__libc_init_array+0x38>)
 8005210:	4c0d      	ldr	r4, [pc, #52]	@ (8005248 <__libc_init_array+0x3c>)
 8005212:	1b64      	subs	r4, r4, r5
 8005214:	10a4      	asrs	r4, r4, #2
 8005216:	2600      	movs	r6, #0
 8005218:	42a6      	cmp	r6, r4
 800521a:	d109      	bne.n	8005230 <__libc_init_array+0x24>
 800521c:	4d0b      	ldr	r5, [pc, #44]	@ (800524c <__libc_init_array+0x40>)
 800521e:	4c0c      	ldr	r4, [pc, #48]	@ (8005250 <__libc_init_array+0x44>)
 8005220:	f002 f866 	bl	80072f0 <_init>
 8005224:	1b64      	subs	r4, r4, r5
 8005226:	10a4      	asrs	r4, r4, #2
 8005228:	2600      	movs	r6, #0
 800522a:	42a6      	cmp	r6, r4
 800522c:	d105      	bne.n	800523a <__libc_init_array+0x2e>
 800522e:	bd70      	pop	{r4, r5, r6, pc}
 8005230:	f855 3b04 	ldr.w	r3, [r5], #4
 8005234:	4798      	blx	r3
 8005236:	3601      	adds	r6, #1
 8005238:	e7ee      	b.n	8005218 <__libc_init_array+0xc>
 800523a:	f855 3b04 	ldr.w	r3, [r5], #4
 800523e:	4798      	blx	r3
 8005240:	3601      	adds	r6, #1
 8005242:	e7f2      	b.n	800522a <__libc_init_array+0x1e>
 8005244:	080076e0 	.word	0x080076e0
 8005248:	080076e0 	.word	0x080076e0
 800524c:	080076e0 	.word	0x080076e0
 8005250:	080076e4 	.word	0x080076e4

08005254 <__retarget_lock_init_recursive>:
 8005254:	4770      	bx	lr

08005256 <__retarget_lock_acquire_recursive>:
 8005256:	4770      	bx	lr

08005258 <__retarget_lock_release_recursive>:
 8005258:	4770      	bx	lr

0800525a <quorem>:
 800525a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525e:	6903      	ldr	r3, [r0, #16]
 8005260:	690c      	ldr	r4, [r1, #16]
 8005262:	42a3      	cmp	r3, r4
 8005264:	4607      	mov	r7, r0
 8005266:	db7e      	blt.n	8005366 <quorem+0x10c>
 8005268:	3c01      	subs	r4, #1
 800526a:	f101 0814 	add.w	r8, r1, #20
 800526e:	00a3      	lsls	r3, r4, #2
 8005270:	f100 0514 	add.w	r5, r0, #20
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005280:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005284:	3301      	adds	r3, #1
 8005286:	429a      	cmp	r2, r3
 8005288:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800528c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005290:	d32e      	bcc.n	80052f0 <quorem+0x96>
 8005292:	f04f 0a00 	mov.w	sl, #0
 8005296:	46c4      	mov	ip, r8
 8005298:	46ae      	mov	lr, r5
 800529a:	46d3      	mov	fp, sl
 800529c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80052a0:	b298      	uxth	r0, r3
 80052a2:	fb06 a000 	mla	r0, r6, r0, sl
 80052a6:	0c02      	lsrs	r2, r0, #16
 80052a8:	0c1b      	lsrs	r3, r3, #16
 80052aa:	fb06 2303 	mla	r3, r6, r3, r2
 80052ae:	f8de 2000 	ldr.w	r2, [lr]
 80052b2:	b280      	uxth	r0, r0
 80052b4:	b292      	uxth	r2, r2
 80052b6:	1a12      	subs	r2, r2, r0
 80052b8:	445a      	add	r2, fp
 80052ba:	f8de 0000 	ldr.w	r0, [lr]
 80052be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80052c8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80052cc:	b292      	uxth	r2, r2
 80052ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80052d2:	45e1      	cmp	r9, ip
 80052d4:	f84e 2b04 	str.w	r2, [lr], #4
 80052d8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80052dc:	d2de      	bcs.n	800529c <quorem+0x42>
 80052de:	9b00      	ldr	r3, [sp, #0]
 80052e0:	58eb      	ldr	r3, [r5, r3]
 80052e2:	b92b      	cbnz	r3, 80052f0 <quorem+0x96>
 80052e4:	9b01      	ldr	r3, [sp, #4]
 80052e6:	3b04      	subs	r3, #4
 80052e8:	429d      	cmp	r5, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	d32f      	bcc.n	800534e <quorem+0xf4>
 80052ee:	613c      	str	r4, [r7, #16]
 80052f0:	4638      	mov	r0, r7
 80052f2:	f001 f97b 	bl	80065ec <__mcmp>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	db25      	blt.n	8005346 <quorem+0xec>
 80052fa:	4629      	mov	r1, r5
 80052fc:	2000      	movs	r0, #0
 80052fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8005302:	f8d1 c000 	ldr.w	ip, [r1]
 8005306:	fa1f fe82 	uxth.w	lr, r2
 800530a:	fa1f f38c 	uxth.w	r3, ip
 800530e:	eba3 030e 	sub.w	r3, r3, lr
 8005312:	4403      	add	r3, r0
 8005314:	0c12      	lsrs	r2, r2, #16
 8005316:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800531a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800531e:	b29b      	uxth	r3, r3
 8005320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005324:	45c1      	cmp	r9, r8
 8005326:	f841 3b04 	str.w	r3, [r1], #4
 800532a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800532e:	d2e6      	bcs.n	80052fe <quorem+0xa4>
 8005330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005334:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005338:	b922      	cbnz	r2, 8005344 <quorem+0xea>
 800533a:	3b04      	subs	r3, #4
 800533c:	429d      	cmp	r5, r3
 800533e:	461a      	mov	r2, r3
 8005340:	d30b      	bcc.n	800535a <quorem+0x100>
 8005342:	613c      	str	r4, [r7, #16]
 8005344:	3601      	adds	r6, #1
 8005346:	4630      	mov	r0, r6
 8005348:	b003      	add	sp, #12
 800534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	3b04      	subs	r3, #4
 8005352:	2a00      	cmp	r2, #0
 8005354:	d1cb      	bne.n	80052ee <quorem+0x94>
 8005356:	3c01      	subs	r4, #1
 8005358:	e7c6      	b.n	80052e8 <quorem+0x8e>
 800535a:	6812      	ldr	r2, [r2, #0]
 800535c:	3b04      	subs	r3, #4
 800535e:	2a00      	cmp	r2, #0
 8005360:	d1ef      	bne.n	8005342 <quorem+0xe8>
 8005362:	3c01      	subs	r4, #1
 8005364:	e7ea      	b.n	800533c <quorem+0xe2>
 8005366:	2000      	movs	r0, #0
 8005368:	e7ee      	b.n	8005348 <quorem+0xee>
 800536a:	0000      	movs	r0, r0
 800536c:	0000      	movs	r0, r0
	...

08005370 <_dtoa_r>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	69c7      	ldr	r7, [r0, #28]
 8005376:	b099      	sub	sp, #100	@ 0x64
 8005378:	ed8d 0b02 	vstr	d0, [sp, #8]
 800537c:	ec55 4b10 	vmov	r4, r5, d0
 8005380:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005382:	9109      	str	r1, [sp, #36]	@ 0x24
 8005384:	4683      	mov	fp, r0
 8005386:	920e      	str	r2, [sp, #56]	@ 0x38
 8005388:	9313      	str	r3, [sp, #76]	@ 0x4c
 800538a:	b97f      	cbnz	r7, 80053ac <_dtoa_r+0x3c>
 800538c:	2010      	movs	r0, #16
 800538e:	f000 fdfd 	bl	8005f8c <malloc>
 8005392:	4602      	mov	r2, r0
 8005394:	f8cb 001c 	str.w	r0, [fp, #28]
 8005398:	b920      	cbnz	r0, 80053a4 <_dtoa_r+0x34>
 800539a:	4ba7      	ldr	r3, [pc, #668]	@ (8005638 <_dtoa_r+0x2c8>)
 800539c:	21ef      	movs	r1, #239	@ 0xef
 800539e:	48a7      	ldr	r0, [pc, #668]	@ (800563c <_dtoa_r+0x2cc>)
 80053a0:	f001 fc68 	bl	8006c74 <__assert_func>
 80053a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80053a8:	6007      	str	r7, [r0, #0]
 80053aa:	60c7      	str	r7, [r0, #12]
 80053ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80053b0:	6819      	ldr	r1, [r3, #0]
 80053b2:	b159      	cbz	r1, 80053cc <_dtoa_r+0x5c>
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	604a      	str	r2, [r1, #4]
 80053b8:	2301      	movs	r3, #1
 80053ba:	4093      	lsls	r3, r2
 80053bc:	608b      	str	r3, [r1, #8]
 80053be:	4658      	mov	r0, fp
 80053c0:	f000 feda 	bl	8006178 <_Bfree>
 80053c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	1e2b      	subs	r3, r5, #0
 80053ce:	bfb9      	ittee	lt
 80053d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80053d4:	9303      	strlt	r3, [sp, #12]
 80053d6:	2300      	movge	r3, #0
 80053d8:	6033      	strge	r3, [r6, #0]
 80053da:	9f03      	ldr	r7, [sp, #12]
 80053dc:	4b98      	ldr	r3, [pc, #608]	@ (8005640 <_dtoa_r+0x2d0>)
 80053de:	bfbc      	itt	lt
 80053e0:	2201      	movlt	r2, #1
 80053e2:	6032      	strlt	r2, [r6, #0]
 80053e4:	43bb      	bics	r3, r7
 80053e6:	d112      	bne.n	800540e <_dtoa_r+0x9e>
 80053e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80053ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80053f4:	4323      	orrs	r3, r4
 80053f6:	f000 854d 	beq.w	8005e94 <_dtoa_r+0xb24>
 80053fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80053fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005654 <_dtoa_r+0x2e4>
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 854f 	beq.w	8005ea4 <_dtoa_r+0xb34>
 8005406:	f10a 0303 	add.w	r3, sl, #3
 800540a:	f000 bd49 	b.w	8005ea0 <_dtoa_r+0xb30>
 800540e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005412:	2200      	movs	r2, #0
 8005414:	ec51 0b17 	vmov	r0, r1, d7
 8005418:	2300      	movs	r3, #0
 800541a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800541e:	f7fb fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 8005422:	4680      	mov	r8, r0
 8005424:	b158      	cbz	r0, 800543e <_dtoa_r+0xce>
 8005426:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005428:	2301      	movs	r3, #1
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800542e:	b113      	cbz	r3, 8005436 <_dtoa_r+0xc6>
 8005430:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005432:	4b84      	ldr	r3, [pc, #528]	@ (8005644 <_dtoa_r+0x2d4>)
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005658 <_dtoa_r+0x2e8>
 800543a:	f000 bd33 	b.w	8005ea4 <_dtoa_r+0xb34>
 800543e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005442:	aa16      	add	r2, sp, #88	@ 0x58
 8005444:	a917      	add	r1, sp, #92	@ 0x5c
 8005446:	4658      	mov	r0, fp
 8005448:	f001 f980 	bl	800674c <__d2b>
 800544c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005450:	4681      	mov	r9, r0
 8005452:	2e00      	cmp	r6, #0
 8005454:	d077      	beq.n	8005546 <_dtoa_r+0x1d6>
 8005456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005458:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800545c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005464:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005468:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800546c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005470:	4619      	mov	r1, r3
 8005472:	2200      	movs	r2, #0
 8005474:	4b74      	ldr	r3, [pc, #464]	@ (8005648 <_dtoa_r+0x2d8>)
 8005476:	f7fa ff07 	bl	8000288 <__aeabi_dsub>
 800547a:	a369      	add	r3, pc, #420	@ (adr r3, 8005620 <_dtoa_r+0x2b0>)
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f7fb f8ba 	bl	80005f8 <__aeabi_dmul>
 8005484:	a368      	add	r3, pc, #416	@ (adr r3, 8005628 <_dtoa_r+0x2b8>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	f7fa feff 	bl	800028c <__adddf3>
 800548e:	4604      	mov	r4, r0
 8005490:	4630      	mov	r0, r6
 8005492:	460d      	mov	r5, r1
 8005494:	f7fb f846 	bl	8000524 <__aeabi_i2d>
 8005498:	a365      	add	r3, pc, #404	@ (adr r3, 8005630 <_dtoa_r+0x2c0>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fb f8ab 	bl	80005f8 <__aeabi_dmul>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4620      	mov	r0, r4
 80054a8:	4629      	mov	r1, r5
 80054aa:	f7fa feef 	bl	800028c <__adddf3>
 80054ae:	4604      	mov	r4, r0
 80054b0:	460d      	mov	r5, r1
 80054b2:	f7fb fb51 	bl	8000b58 <__aeabi_d2iz>
 80054b6:	2200      	movs	r2, #0
 80054b8:	4607      	mov	r7, r0
 80054ba:	2300      	movs	r3, #0
 80054bc:	4620      	mov	r0, r4
 80054be:	4629      	mov	r1, r5
 80054c0:	f7fb fb0c 	bl	8000adc <__aeabi_dcmplt>
 80054c4:	b140      	cbz	r0, 80054d8 <_dtoa_r+0x168>
 80054c6:	4638      	mov	r0, r7
 80054c8:	f7fb f82c 	bl	8000524 <__aeabi_i2d>
 80054cc:	4622      	mov	r2, r4
 80054ce:	462b      	mov	r3, r5
 80054d0:	f7fb fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 80054d4:	b900      	cbnz	r0, 80054d8 <_dtoa_r+0x168>
 80054d6:	3f01      	subs	r7, #1
 80054d8:	2f16      	cmp	r7, #22
 80054da:	d851      	bhi.n	8005580 <_dtoa_r+0x210>
 80054dc:	4b5b      	ldr	r3, [pc, #364]	@ (800564c <_dtoa_r+0x2dc>)
 80054de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054ea:	f7fb faf7 	bl	8000adc <__aeabi_dcmplt>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d048      	beq.n	8005584 <_dtoa_r+0x214>
 80054f2:	3f01      	subs	r7, #1
 80054f4:	2300      	movs	r3, #0
 80054f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80054f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80054fa:	1b9b      	subs	r3, r3, r6
 80054fc:	1e5a      	subs	r2, r3, #1
 80054fe:	bf44      	itt	mi
 8005500:	f1c3 0801 	rsbmi	r8, r3, #1
 8005504:	2300      	movmi	r3, #0
 8005506:	9208      	str	r2, [sp, #32]
 8005508:	bf54      	ite	pl
 800550a:	f04f 0800 	movpl.w	r8, #0
 800550e:	9308      	strmi	r3, [sp, #32]
 8005510:	2f00      	cmp	r7, #0
 8005512:	db39      	blt.n	8005588 <_dtoa_r+0x218>
 8005514:	9b08      	ldr	r3, [sp, #32]
 8005516:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005518:	443b      	add	r3, r7
 800551a:	9308      	str	r3, [sp, #32]
 800551c:	2300      	movs	r3, #0
 800551e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005522:	2b09      	cmp	r3, #9
 8005524:	d864      	bhi.n	80055f0 <_dtoa_r+0x280>
 8005526:	2b05      	cmp	r3, #5
 8005528:	bfc4      	itt	gt
 800552a:	3b04      	subgt	r3, #4
 800552c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800552e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005530:	f1a3 0302 	sub.w	r3, r3, #2
 8005534:	bfcc      	ite	gt
 8005536:	2400      	movgt	r4, #0
 8005538:	2401      	movle	r4, #1
 800553a:	2b03      	cmp	r3, #3
 800553c:	d863      	bhi.n	8005606 <_dtoa_r+0x296>
 800553e:	e8df f003 	tbb	[pc, r3]
 8005542:	372a      	.short	0x372a
 8005544:	5535      	.short	0x5535
 8005546:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800554a:	441e      	add	r6, r3
 800554c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005550:	2b20      	cmp	r3, #32
 8005552:	bfc1      	itttt	gt
 8005554:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005558:	409f      	lslgt	r7, r3
 800555a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800555e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005562:	bfd6      	itet	le
 8005564:	f1c3 0320 	rsble	r3, r3, #32
 8005568:	ea47 0003 	orrgt.w	r0, r7, r3
 800556c:	fa04 f003 	lslle.w	r0, r4, r3
 8005570:	f7fa ffc8 	bl	8000504 <__aeabi_ui2d>
 8005574:	2201      	movs	r2, #1
 8005576:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800557a:	3e01      	subs	r6, #1
 800557c:	9214      	str	r2, [sp, #80]	@ 0x50
 800557e:	e777      	b.n	8005470 <_dtoa_r+0x100>
 8005580:	2301      	movs	r3, #1
 8005582:	e7b8      	b.n	80054f6 <_dtoa_r+0x186>
 8005584:	9012      	str	r0, [sp, #72]	@ 0x48
 8005586:	e7b7      	b.n	80054f8 <_dtoa_r+0x188>
 8005588:	427b      	negs	r3, r7
 800558a:	930a      	str	r3, [sp, #40]	@ 0x28
 800558c:	2300      	movs	r3, #0
 800558e:	eba8 0807 	sub.w	r8, r8, r7
 8005592:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005594:	e7c4      	b.n	8005520 <_dtoa_r+0x1b0>
 8005596:	2300      	movs	r3, #0
 8005598:	930b      	str	r3, [sp, #44]	@ 0x2c
 800559a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800559c:	2b00      	cmp	r3, #0
 800559e:	dc35      	bgt.n	800560c <_dtoa_r+0x29c>
 80055a0:	2301      	movs	r3, #1
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	9307      	str	r3, [sp, #28]
 80055a6:	461a      	mov	r2, r3
 80055a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80055aa:	e00b      	b.n	80055c4 <_dtoa_r+0x254>
 80055ac:	2301      	movs	r3, #1
 80055ae:	e7f3      	b.n	8005598 <_dtoa_r+0x228>
 80055b0:	2300      	movs	r3, #0
 80055b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	3301      	adds	r3, #1
 80055bc:	2b01      	cmp	r3, #1
 80055be:	9307      	str	r3, [sp, #28]
 80055c0:	bfb8      	it	lt
 80055c2:	2301      	movlt	r3, #1
 80055c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80055c8:	2100      	movs	r1, #0
 80055ca:	2204      	movs	r2, #4
 80055cc:	f102 0514 	add.w	r5, r2, #20
 80055d0:	429d      	cmp	r5, r3
 80055d2:	d91f      	bls.n	8005614 <_dtoa_r+0x2a4>
 80055d4:	6041      	str	r1, [r0, #4]
 80055d6:	4658      	mov	r0, fp
 80055d8:	f000 fd8e 	bl	80060f8 <_Balloc>
 80055dc:	4682      	mov	sl, r0
 80055de:	2800      	cmp	r0, #0
 80055e0:	d13c      	bne.n	800565c <_dtoa_r+0x2ec>
 80055e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005650 <_dtoa_r+0x2e0>)
 80055e4:	4602      	mov	r2, r0
 80055e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80055ea:	e6d8      	b.n	800539e <_dtoa_r+0x2e>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e7e0      	b.n	80055b2 <_dtoa_r+0x242>
 80055f0:	2401      	movs	r4, #1
 80055f2:	2300      	movs	r3, #0
 80055f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80055f8:	f04f 33ff 	mov.w	r3, #4294967295
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	9307      	str	r3, [sp, #28]
 8005600:	2200      	movs	r2, #0
 8005602:	2312      	movs	r3, #18
 8005604:	e7d0      	b.n	80055a8 <_dtoa_r+0x238>
 8005606:	2301      	movs	r3, #1
 8005608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800560a:	e7f5      	b.n	80055f8 <_dtoa_r+0x288>
 800560c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	9307      	str	r3, [sp, #28]
 8005612:	e7d7      	b.n	80055c4 <_dtoa_r+0x254>
 8005614:	3101      	adds	r1, #1
 8005616:	0052      	lsls	r2, r2, #1
 8005618:	e7d8      	b.n	80055cc <_dtoa_r+0x25c>
 800561a:	bf00      	nop
 800561c:	f3af 8000 	nop.w
 8005620:	636f4361 	.word	0x636f4361
 8005624:	3fd287a7 	.word	0x3fd287a7
 8005628:	8b60c8b3 	.word	0x8b60c8b3
 800562c:	3fc68a28 	.word	0x3fc68a28
 8005630:	509f79fb 	.word	0x509f79fb
 8005634:	3fd34413 	.word	0x3fd34413
 8005638:	080073a5 	.word	0x080073a5
 800563c:	080073bc 	.word	0x080073bc
 8005640:	7ff00000 	.word	0x7ff00000
 8005644:	08007375 	.word	0x08007375
 8005648:	3ff80000 	.word	0x3ff80000
 800564c:	080074b8 	.word	0x080074b8
 8005650:	08007414 	.word	0x08007414
 8005654:	080073a1 	.word	0x080073a1
 8005658:	08007374 	.word	0x08007374
 800565c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005660:	6018      	str	r0, [r3, #0]
 8005662:	9b07      	ldr	r3, [sp, #28]
 8005664:	2b0e      	cmp	r3, #14
 8005666:	f200 80a4 	bhi.w	80057b2 <_dtoa_r+0x442>
 800566a:	2c00      	cmp	r4, #0
 800566c:	f000 80a1 	beq.w	80057b2 <_dtoa_r+0x442>
 8005670:	2f00      	cmp	r7, #0
 8005672:	dd33      	ble.n	80056dc <_dtoa_r+0x36c>
 8005674:	4bad      	ldr	r3, [pc, #692]	@ (800592c <_dtoa_r+0x5bc>)
 8005676:	f007 020f 	and.w	r2, r7, #15
 800567a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800567e:	ed93 7b00 	vldr	d7, [r3]
 8005682:	05f8      	lsls	r0, r7, #23
 8005684:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005688:	ea4f 1427 	mov.w	r4, r7, asr #4
 800568c:	d516      	bpl.n	80056bc <_dtoa_r+0x34c>
 800568e:	4ba8      	ldr	r3, [pc, #672]	@ (8005930 <_dtoa_r+0x5c0>)
 8005690:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005694:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005698:	f7fb f8d8 	bl	800084c <__aeabi_ddiv>
 800569c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056a0:	f004 040f 	and.w	r4, r4, #15
 80056a4:	2603      	movs	r6, #3
 80056a6:	4da2      	ldr	r5, [pc, #648]	@ (8005930 <_dtoa_r+0x5c0>)
 80056a8:	b954      	cbnz	r4, 80056c0 <_dtoa_r+0x350>
 80056aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056b2:	f7fb f8cb 	bl	800084c <__aeabi_ddiv>
 80056b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ba:	e028      	b.n	800570e <_dtoa_r+0x39e>
 80056bc:	2602      	movs	r6, #2
 80056be:	e7f2      	b.n	80056a6 <_dtoa_r+0x336>
 80056c0:	07e1      	lsls	r1, r4, #31
 80056c2:	d508      	bpl.n	80056d6 <_dtoa_r+0x366>
 80056c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056cc:	f7fa ff94 	bl	80005f8 <__aeabi_dmul>
 80056d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056d4:	3601      	adds	r6, #1
 80056d6:	1064      	asrs	r4, r4, #1
 80056d8:	3508      	adds	r5, #8
 80056da:	e7e5      	b.n	80056a8 <_dtoa_r+0x338>
 80056dc:	f000 80d2 	beq.w	8005884 <_dtoa_r+0x514>
 80056e0:	427c      	negs	r4, r7
 80056e2:	4b92      	ldr	r3, [pc, #584]	@ (800592c <_dtoa_r+0x5bc>)
 80056e4:	4d92      	ldr	r5, [pc, #584]	@ (8005930 <_dtoa_r+0x5c0>)
 80056e6:	f004 020f 	and.w	r2, r4, #15
 80056ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056f6:	f7fa ff7f 	bl	80005f8 <__aeabi_dmul>
 80056fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056fe:	1124      	asrs	r4, r4, #4
 8005700:	2300      	movs	r3, #0
 8005702:	2602      	movs	r6, #2
 8005704:	2c00      	cmp	r4, #0
 8005706:	f040 80b2 	bne.w	800586e <_dtoa_r+0x4fe>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1d3      	bne.n	80056b6 <_dtoa_r+0x346>
 800570e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005710:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80b7 	beq.w	8005888 <_dtoa_r+0x518>
 800571a:	4b86      	ldr	r3, [pc, #536]	@ (8005934 <_dtoa_r+0x5c4>)
 800571c:	2200      	movs	r2, #0
 800571e:	4620      	mov	r0, r4
 8005720:	4629      	mov	r1, r5
 8005722:	f7fb f9db 	bl	8000adc <__aeabi_dcmplt>
 8005726:	2800      	cmp	r0, #0
 8005728:	f000 80ae 	beq.w	8005888 <_dtoa_r+0x518>
 800572c:	9b07      	ldr	r3, [sp, #28]
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 80aa 	beq.w	8005888 <_dtoa_r+0x518>
 8005734:	9b00      	ldr	r3, [sp, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	dd37      	ble.n	80057aa <_dtoa_r+0x43a>
 800573a:	1e7b      	subs	r3, r7, #1
 800573c:	9304      	str	r3, [sp, #16]
 800573e:	4620      	mov	r0, r4
 8005740:	4b7d      	ldr	r3, [pc, #500]	@ (8005938 <_dtoa_r+0x5c8>)
 8005742:	2200      	movs	r2, #0
 8005744:	4629      	mov	r1, r5
 8005746:	f7fa ff57 	bl	80005f8 <__aeabi_dmul>
 800574a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800574e:	9c00      	ldr	r4, [sp, #0]
 8005750:	3601      	adds	r6, #1
 8005752:	4630      	mov	r0, r6
 8005754:	f7fa fee6 	bl	8000524 <__aeabi_i2d>
 8005758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800575c:	f7fa ff4c 	bl	80005f8 <__aeabi_dmul>
 8005760:	4b76      	ldr	r3, [pc, #472]	@ (800593c <_dtoa_r+0x5cc>)
 8005762:	2200      	movs	r2, #0
 8005764:	f7fa fd92 	bl	800028c <__adddf3>
 8005768:	4605      	mov	r5, r0
 800576a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800576e:	2c00      	cmp	r4, #0
 8005770:	f040 808d 	bne.w	800588e <_dtoa_r+0x51e>
 8005774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005778:	4b71      	ldr	r3, [pc, #452]	@ (8005940 <_dtoa_r+0x5d0>)
 800577a:	2200      	movs	r2, #0
 800577c:	f7fa fd84 	bl	8000288 <__aeabi_dsub>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005788:	462a      	mov	r2, r5
 800578a:	4633      	mov	r3, r6
 800578c:	f7fb f9c4 	bl	8000b18 <__aeabi_dcmpgt>
 8005790:	2800      	cmp	r0, #0
 8005792:	f040 828b 	bne.w	8005cac <_dtoa_r+0x93c>
 8005796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800579a:	462a      	mov	r2, r5
 800579c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80057a0:	f7fb f99c 	bl	8000adc <__aeabi_dcmplt>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	f040 8128 	bne.w	80059fa <_dtoa_r+0x68a>
 80057aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80057ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80057b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f2c0 815a 	blt.w	8005a6e <_dtoa_r+0x6fe>
 80057ba:	2f0e      	cmp	r7, #14
 80057bc:	f300 8157 	bgt.w	8005a6e <_dtoa_r+0x6fe>
 80057c0:	4b5a      	ldr	r3, [pc, #360]	@ (800592c <_dtoa_r+0x5bc>)
 80057c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057c6:	ed93 7b00 	vldr	d7, [r3]
 80057ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	ed8d 7b00 	vstr	d7, [sp]
 80057d2:	da03      	bge.n	80057dc <_dtoa_r+0x46c>
 80057d4:	9b07      	ldr	r3, [sp, #28]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f340 8101 	ble.w	80059de <_dtoa_r+0x66e>
 80057dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80057e0:	4656      	mov	r6, sl
 80057e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057e6:	4620      	mov	r0, r4
 80057e8:	4629      	mov	r1, r5
 80057ea:	f7fb f82f 	bl	800084c <__aeabi_ddiv>
 80057ee:	f7fb f9b3 	bl	8000b58 <__aeabi_d2iz>
 80057f2:	4680      	mov	r8, r0
 80057f4:	f7fa fe96 	bl	8000524 <__aeabi_i2d>
 80057f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057fc:	f7fa fefc 	bl	80005f8 <__aeabi_dmul>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4620      	mov	r0, r4
 8005806:	4629      	mov	r1, r5
 8005808:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800580c:	f7fa fd3c 	bl	8000288 <__aeabi_dsub>
 8005810:	f806 4b01 	strb.w	r4, [r6], #1
 8005814:	9d07      	ldr	r5, [sp, #28]
 8005816:	eba6 040a 	sub.w	r4, r6, sl
 800581a:	42a5      	cmp	r5, r4
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	f040 8117 	bne.w	8005a52 <_dtoa_r+0x6e2>
 8005824:	f7fa fd32 	bl	800028c <__adddf3>
 8005828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800582c:	4604      	mov	r4, r0
 800582e:	460d      	mov	r5, r1
 8005830:	f7fb f972 	bl	8000b18 <__aeabi_dcmpgt>
 8005834:	2800      	cmp	r0, #0
 8005836:	f040 80f9 	bne.w	8005a2c <_dtoa_r+0x6bc>
 800583a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800583e:	4620      	mov	r0, r4
 8005840:	4629      	mov	r1, r5
 8005842:	f7fb f941 	bl	8000ac8 <__aeabi_dcmpeq>
 8005846:	b118      	cbz	r0, 8005850 <_dtoa_r+0x4e0>
 8005848:	f018 0f01 	tst.w	r8, #1
 800584c:	f040 80ee 	bne.w	8005a2c <_dtoa_r+0x6bc>
 8005850:	4649      	mov	r1, r9
 8005852:	4658      	mov	r0, fp
 8005854:	f000 fc90 	bl	8006178 <_Bfree>
 8005858:	2300      	movs	r3, #0
 800585a:	7033      	strb	r3, [r6, #0]
 800585c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800585e:	3701      	adds	r7, #1
 8005860:	601f      	str	r7, [r3, #0]
 8005862:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 831d 	beq.w	8005ea4 <_dtoa_r+0xb34>
 800586a:	601e      	str	r6, [r3, #0]
 800586c:	e31a      	b.n	8005ea4 <_dtoa_r+0xb34>
 800586e:	07e2      	lsls	r2, r4, #31
 8005870:	d505      	bpl.n	800587e <_dtoa_r+0x50e>
 8005872:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005876:	f7fa febf 	bl	80005f8 <__aeabi_dmul>
 800587a:	3601      	adds	r6, #1
 800587c:	2301      	movs	r3, #1
 800587e:	1064      	asrs	r4, r4, #1
 8005880:	3508      	adds	r5, #8
 8005882:	e73f      	b.n	8005704 <_dtoa_r+0x394>
 8005884:	2602      	movs	r6, #2
 8005886:	e742      	b.n	800570e <_dtoa_r+0x39e>
 8005888:	9c07      	ldr	r4, [sp, #28]
 800588a:	9704      	str	r7, [sp, #16]
 800588c:	e761      	b.n	8005752 <_dtoa_r+0x3e2>
 800588e:	4b27      	ldr	r3, [pc, #156]	@ (800592c <_dtoa_r+0x5bc>)
 8005890:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005892:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005896:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800589a:	4454      	add	r4, sl
 800589c:	2900      	cmp	r1, #0
 800589e:	d053      	beq.n	8005948 <_dtoa_r+0x5d8>
 80058a0:	4928      	ldr	r1, [pc, #160]	@ (8005944 <_dtoa_r+0x5d4>)
 80058a2:	2000      	movs	r0, #0
 80058a4:	f7fa ffd2 	bl	800084c <__aeabi_ddiv>
 80058a8:	4633      	mov	r3, r6
 80058aa:	462a      	mov	r2, r5
 80058ac:	f7fa fcec 	bl	8000288 <__aeabi_dsub>
 80058b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058b4:	4656      	mov	r6, sl
 80058b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ba:	f7fb f94d 	bl	8000b58 <__aeabi_d2iz>
 80058be:	4605      	mov	r5, r0
 80058c0:	f7fa fe30 	bl	8000524 <__aeabi_i2d>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058cc:	f7fa fcdc 	bl	8000288 <__aeabi_dsub>
 80058d0:	3530      	adds	r5, #48	@ 0x30
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80058da:	f806 5b01 	strb.w	r5, [r6], #1
 80058de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058e2:	f7fb f8fb 	bl	8000adc <__aeabi_dcmplt>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d171      	bne.n	80059ce <_dtoa_r+0x65e>
 80058ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058ee:	4911      	ldr	r1, [pc, #68]	@ (8005934 <_dtoa_r+0x5c4>)
 80058f0:	2000      	movs	r0, #0
 80058f2:	f7fa fcc9 	bl	8000288 <__aeabi_dsub>
 80058f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058fa:	f7fb f8ef 	bl	8000adc <__aeabi_dcmplt>
 80058fe:	2800      	cmp	r0, #0
 8005900:	f040 8095 	bne.w	8005a2e <_dtoa_r+0x6be>
 8005904:	42a6      	cmp	r6, r4
 8005906:	f43f af50 	beq.w	80057aa <_dtoa_r+0x43a>
 800590a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800590e:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <_dtoa_r+0x5c8>)
 8005910:	2200      	movs	r2, #0
 8005912:	f7fa fe71 	bl	80005f8 <__aeabi_dmul>
 8005916:	4b08      	ldr	r3, [pc, #32]	@ (8005938 <_dtoa_r+0x5c8>)
 8005918:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800591c:	2200      	movs	r2, #0
 800591e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005922:	f7fa fe69 	bl	80005f8 <__aeabi_dmul>
 8005926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800592a:	e7c4      	b.n	80058b6 <_dtoa_r+0x546>
 800592c:	080074b8 	.word	0x080074b8
 8005930:	08007490 	.word	0x08007490
 8005934:	3ff00000 	.word	0x3ff00000
 8005938:	40240000 	.word	0x40240000
 800593c:	401c0000 	.word	0x401c0000
 8005940:	40140000 	.word	0x40140000
 8005944:	3fe00000 	.word	0x3fe00000
 8005948:	4631      	mov	r1, r6
 800594a:	4628      	mov	r0, r5
 800594c:	f7fa fe54 	bl	80005f8 <__aeabi_dmul>
 8005950:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005954:	9415      	str	r4, [sp, #84]	@ 0x54
 8005956:	4656      	mov	r6, sl
 8005958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800595c:	f7fb f8fc 	bl	8000b58 <__aeabi_d2iz>
 8005960:	4605      	mov	r5, r0
 8005962:	f7fa fddf 	bl	8000524 <__aeabi_i2d>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800596e:	f7fa fc8b 	bl	8000288 <__aeabi_dsub>
 8005972:	3530      	adds	r5, #48	@ 0x30
 8005974:	f806 5b01 	strb.w	r5, [r6], #1
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	42a6      	cmp	r6, r4
 800597e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	d124      	bne.n	80059d2 <_dtoa_r+0x662>
 8005988:	4bac      	ldr	r3, [pc, #688]	@ (8005c3c <_dtoa_r+0x8cc>)
 800598a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800598e:	f7fa fc7d 	bl	800028c <__adddf3>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800599a:	f7fb f8bd 	bl	8000b18 <__aeabi_dcmpgt>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d145      	bne.n	8005a2e <_dtoa_r+0x6be>
 80059a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059a6:	49a5      	ldr	r1, [pc, #660]	@ (8005c3c <_dtoa_r+0x8cc>)
 80059a8:	2000      	movs	r0, #0
 80059aa:	f7fa fc6d 	bl	8000288 <__aeabi_dsub>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059b6:	f7fb f891 	bl	8000adc <__aeabi_dcmplt>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	f43f aef5 	beq.w	80057aa <_dtoa_r+0x43a>
 80059c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80059c2:	1e73      	subs	r3, r6, #1
 80059c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80059c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80059ca:	2b30      	cmp	r3, #48	@ 0x30
 80059cc:	d0f8      	beq.n	80059c0 <_dtoa_r+0x650>
 80059ce:	9f04      	ldr	r7, [sp, #16]
 80059d0:	e73e      	b.n	8005850 <_dtoa_r+0x4e0>
 80059d2:	4b9b      	ldr	r3, [pc, #620]	@ (8005c40 <_dtoa_r+0x8d0>)
 80059d4:	f7fa fe10 	bl	80005f8 <__aeabi_dmul>
 80059d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059dc:	e7bc      	b.n	8005958 <_dtoa_r+0x5e8>
 80059de:	d10c      	bne.n	80059fa <_dtoa_r+0x68a>
 80059e0:	4b98      	ldr	r3, [pc, #608]	@ (8005c44 <_dtoa_r+0x8d4>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059e8:	f7fa fe06 	bl	80005f8 <__aeabi_dmul>
 80059ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059f0:	f7fb f888 	bl	8000b04 <__aeabi_dcmpge>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	f000 8157 	beq.w	8005ca8 <_dtoa_r+0x938>
 80059fa:	2400      	movs	r4, #0
 80059fc:	4625      	mov	r5, r4
 80059fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a00:	43db      	mvns	r3, r3
 8005a02:	9304      	str	r3, [sp, #16]
 8005a04:	4656      	mov	r6, sl
 8005a06:	2700      	movs	r7, #0
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4658      	mov	r0, fp
 8005a0c:	f000 fbb4 	bl	8006178 <_Bfree>
 8005a10:	2d00      	cmp	r5, #0
 8005a12:	d0dc      	beq.n	80059ce <_dtoa_r+0x65e>
 8005a14:	b12f      	cbz	r7, 8005a22 <_dtoa_r+0x6b2>
 8005a16:	42af      	cmp	r7, r5
 8005a18:	d003      	beq.n	8005a22 <_dtoa_r+0x6b2>
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	4658      	mov	r0, fp
 8005a1e:	f000 fbab 	bl	8006178 <_Bfree>
 8005a22:	4629      	mov	r1, r5
 8005a24:	4658      	mov	r0, fp
 8005a26:	f000 fba7 	bl	8006178 <_Bfree>
 8005a2a:	e7d0      	b.n	80059ce <_dtoa_r+0x65e>
 8005a2c:	9704      	str	r7, [sp, #16]
 8005a2e:	4633      	mov	r3, r6
 8005a30:	461e      	mov	r6, r3
 8005a32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a36:	2a39      	cmp	r2, #57	@ 0x39
 8005a38:	d107      	bne.n	8005a4a <_dtoa_r+0x6da>
 8005a3a:	459a      	cmp	sl, r3
 8005a3c:	d1f8      	bne.n	8005a30 <_dtoa_r+0x6c0>
 8005a3e:	9a04      	ldr	r2, [sp, #16]
 8005a40:	3201      	adds	r2, #1
 8005a42:	9204      	str	r2, [sp, #16]
 8005a44:	2230      	movs	r2, #48	@ 0x30
 8005a46:	f88a 2000 	strb.w	r2, [sl]
 8005a4a:	781a      	ldrb	r2, [r3, #0]
 8005a4c:	3201      	adds	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	e7bd      	b.n	80059ce <_dtoa_r+0x65e>
 8005a52:	4b7b      	ldr	r3, [pc, #492]	@ (8005c40 <_dtoa_r+0x8d0>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	f7fa fdcf 	bl	80005f8 <__aeabi_dmul>
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	4604      	mov	r4, r0
 8005a60:	460d      	mov	r5, r1
 8005a62:	f7fb f831 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f43f aebb 	beq.w	80057e2 <_dtoa_r+0x472>
 8005a6c:	e6f0      	b.n	8005850 <_dtoa_r+0x4e0>
 8005a6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005a70:	2a00      	cmp	r2, #0
 8005a72:	f000 80db 	beq.w	8005c2c <_dtoa_r+0x8bc>
 8005a76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a78:	2a01      	cmp	r2, #1
 8005a7a:	f300 80bf 	bgt.w	8005bfc <_dtoa_r+0x88c>
 8005a7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005a80:	2a00      	cmp	r2, #0
 8005a82:	f000 80b7 	beq.w	8005bf4 <_dtoa_r+0x884>
 8005a86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005a8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a8c:	4646      	mov	r6, r8
 8005a8e:	9a08      	ldr	r2, [sp, #32]
 8005a90:	2101      	movs	r1, #1
 8005a92:	441a      	add	r2, r3
 8005a94:	4658      	mov	r0, fp
 8005a96:	4498      	add	r8, r3
 8005a98:	9208      	str	r2, [sp, #32]
 8005a9a:	f000 fc21 	bl	80062e0 <__i2b>
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	b15e      	cbz	r6, 8005aba <_dtoa_r+0x74a>
 8005aa2:	9b08      	ldr	r3, [sp, #32]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	dd08      	ble.n	8005aba <_dtoa_r+0x74a>
 8005aa8:	42b3      	cmp	r3, r6
 8005aaa:	9a08      	ldr	r2, [sp, #32]
 8005aac:	bfa8      	it	ge
 8005aae:	4633      	movge	r3, r6
 8005ab0:	eba8 0803 	sub.w	r8, r8, r3
 8005ab4:	1af6      	subs	r6, r6, r3
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	9308      	str	r3, [sp, #32]
 8005aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005abc:	b1f3      	cbz	r3, 8005afc <_dtoa_r+0x78c>
 8005abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80b7 	beq.w	8005c34 <_dtoa_r+0x8c4>
 8005ac6:	b18c      	cbz	r4, 8005aec <_dtoa_r+0x77c>
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4622      	mov	r2, r4
 8005acc:	4658      	mov	r0, fp
 8005ace:	f000 fcc7 	bl	8006460 <__pow5mult>
 8005ad2:	464a      	mov	r2, r9
 8005ad4:	4601      	mov	r1, r0
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	4658      	mov	r0, fp
 8005ada:	f000 fc17 	bl	800630c <__multiply>
 8005ade:	4649      	mov	r1, r9
 8005ae0:	9004      	str	r0, [sp, #16]
 8005ae2:	4658      	mov	r0, fp
 8005ae4:	f000 fb48 	bl	8006178 <_Bfree>
 8005ae8:	9b04      	ldr	r3, [sp, #16]
 8005aea:	4699      	mov	r9, r3
 8005aec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aee:	1b1a      	subs	r2, r3, r4
 8005af0:	d004      	beq.n	8005afc <_dtoa_r+0x78c>
 8005af2:	4649      	mov	r1, r9
 8005af4:	4658      	mov	r0, fp
 8005af6:	f000 fcb3 	bl	8006460 <__pow5mult>
 8005afa:	4681      	mov	r9, r0
 8005afc:	2101      	movs	r1, #1
 8005afe:	4658      	mov	r0, fp
 8005b00:	f000 fbee 	bl	80062e0 <__i2b>
 8005b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b06:	4604      	mov	r4, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 81cf 	beq.w	8005eac <_dtoa_r+0xb3c>
 8005b0e:	461a      	mov	r2, r3
 8005b10:	4601      	mov	r1, r0
 8005b12:	4658      	mov	r0, fp
 8005b14:	f000 fca4 	bl	8006460 <__pow5mult>
 8005b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	f300 8095 	bgt.w	8005c4c <_dtoa_r+0x8dc>
 8005b22:	9b02      	ldr	r3, [sp, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f040 8087 	bne.w	8005c38 <_dtoa_r+0x8c8>
 8005b2a:	9b03      	ldr	r3, [sp, #12]
 8005b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f040 8089 	bne.w	8005c48 <_dtoa_r+0x8d8>
 8005b36:	9b03      	ldr	r3, [sp, #12]
 8005b38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b3c:	0d1b      	lsrs	r3, r3, #20
 8005b3e:	051b      	lsls	r3, r3, #20
 8005b40:	b12b      	cbz	r3, 8005b4e <_dtoa_r+0x7de>
 8005b42:	9b08      	ldr	r3, [sp, #32]
 8005b44:	3301      	adds	r3, #1
 8005b46:	9308      	str	r3, [sp, #32]
 8005b48:	f108 0801 	add.w	r8, r8, #1
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 81b0 	beq.w	8005eb8 <_dtoa_r+0xb48>
 8005b58:	6923      	ldr	r3, [r4, #16]
 8005b5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b5e:	6918      	ldr	r0, [r3, #16]
 8005b60:	f000 fb72 	bl	8006248 <__hi0bits>
 8005b64:	f1c0 0020 	rsb	r0, r0, #32
 8005b68:	9b08      	ldr	r3, [sp, #32]
 8005b6a:	4418      	add	r0, r3
 8005b6c:	f010 001f 	ands.w	r0, r0, #31
 8005b70:	d077      	beq.n	8005c62 <_dtoa_r+0x8f2>
 8005b72:	f1c0 0320 	rsb	r3, r0, #32
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	dd6b      	ble.n	8005c52 <_dtoa_r+0x8e2>
 8005b7a:	9b08      	ldr	r3, [sp, #32]
 8005b7c:	f1c0 001c 	rsb	r0, r0, #28
 8005b80:	4403      	add	r3, r0
 8005b82:	4480      	add	r8, r0
 8005b84:	4406      	add	r6, r0
 8005b86:	9308      	str	r3, [sp, #32]
 8005b88:	f1b8 0f00 	cmp.w	r8, #0
 8005b8c:	dd05      	ble.n	8005b9a <_dtoa_r+0x82a>
 8005b8e:	4649      	mov	r1, r9
 8005b90:	4642      	mov	r2, r8
 8005b92:	4658      	mov	r0, fp
 8005b94:	f000 fcbe 	bl	8006514 <__lshift>
 8005b98:	4681      	mov	r9, r0
 8005b9a:	9b08      	ldr	r3, [sp, #32]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	dd05      	ble.n	8005bac <_dtoa_r+0x83c>
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	4658      	mov	r0, fp
 8005ba6:	f000 fcb5 	bl	8006514 <__lshift>
 8005baa:	4604      	mov	r4, r0
 8005bac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d059      	beq.n	8005c66 <_dtoa_r+0x8f6>
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	4648      	mov	r0, r9
 8005bb6:	f000 fd19 	bl	80065ec <__mcmp>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	da53      	bge.n	8005c66 <_dtoa_r+0x8f6>
 8005bbe:	1e7b      	subs	r3, r7, #1
 8005bc0:	9304      	str	r3, [sp, #16]
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	220a      	movs	r2, #10
 8005bc8:	4658      	mov	r0, fp
 8005bca:	f000 faf7 	bl	80061bc <__multadd>
 8005bce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bd0:	4681      	mov	r9, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 8172 	beq.w	8005ebc <_dtoa_r+0xb4c>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4629      	mov	r1, r5
 8005bdc:	220a      	movs	r2, #10
 8005bde:	4658      	mov	r0, fp
 8005be0:	f000 faec 	bl	80061bc <__multadd>
 8005be4:	9b00      	ldr	r3, [sp, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	4605      	mov	r5, r0
 8005bea:	dc67      	bgt.n	8005cbc <_dtoa_r+0x94c>
 8005bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	dc41      	bgt.n	8005c76 <_dtoa_r+0x906>
 8005bf2:	e063      	b.n	8005cbc <_dtoa_r+0x94c>
 8005bf4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005bf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005bfa:	e746      	b.n	8005a8a <_dtoa_r+0x71a>
 8005bfc:	9b07      	ldr	r3, [sp, #28]
 8005bfe:	1e5c      	subs	r4, r3, #1
 8005c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c02:	42a3      	cmp	r3, r4
 8005c04:	bfbf      	itttt	lt
 8005c06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005c08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005c0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005c0c:	1ae3      	sublt	r3, r4, r3
 8005c0e:	bfb4      	ite	lt
 8005c10:	18d2      	addlt	r2, r2, r3
 8005c12:	1b1c      	subge	r4, r3, r4
 8005c14:	9b07      	ldr	r3, [sp, #28]
 8005c16:	bfbc      	itt	lt
 8005c18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005c1a:	2400      	movlt	r4, #0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bfb5      	itete	lt
 8005c20:	eba8 0603 	sublt.w	r6, r8, r3
 8005c24:	9b07      	ldrge	r3, [sp, #28]
 8005c26:	2300      	movlt	r3, #0
 8005c28:	4646      	movge	r6, r8
 8005c2a:	e730      	b.n	8005a8e <_dtoa_r+0x71e>
 8005c2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005c2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005c30:	4646      	mov	r6, r8
 8005c32:	e735      	b.n	8005aa0 <_dtoa_r+0x730>
 8005c34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c36:	e75c      	b.n	8005af2 <_dtoa_r+0x782>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	e788      	b.n	8005b4e <_dtoa_r+0x7de>
 8005c3c:	3fe00000 	.word	0x3fe00000
 8005c40:	40240000 	.word	0x40240000
 8005c44:	40140000 	.word	0x40140000
 8005c48:	9b02      	ldr	r3, [sp, #8]
 8005c4a:	e780      	b.n	8005b4e <_dtoa_r+0x7de>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c50:	e782      	b.n	8005b58 <_dtoa_r+0x7e8>
 8005c52:	d099      	beq.n	8005b88 <_dtoa_r+0x818>
 8005c54:	9a08      	ldr	r2, [sp, #32]
 8005c56:	331c      	adds	r3, #28
 8005c58:	441a      	add	r2, r3
 8005c5a:	4498      	add	r8, r3
 8005c5c:	441e      	add	r6, r3
 8005c5e:	9208      	str	r2, [sp, #32]
 8005c60:	e792      	b.n	8005b88 <_dtoa_r+0x818>
 8005c62:	4603      	mov	r3, r0
 8005c64:	e7f6      	b.n	8005c54 <_dtoa_r+0x8e4>
 8005c66:	9b07      	ldr	r3, [sp, #28]
 8005c68:	9704      	str	r7, [sp, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	dc20      	bgt.n	8005cb0 <_dtoa_r+0x940>
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	dd1e      	ble.n	8005cb4 <_dtoa_r+0x944>
 8005c76:	9b00      	ldr	r3, [sp, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f47f aec0 	bne.w	80059fe <_dtoa_r+0x68e>
 8005c7e:	4621      	mov	r1, r4
 8005c80:	2205      	movs	r2, #5
 8005c82:	4658      	mov	r0, fp
 8005c84:	f000 fa9a 	bl	80061bc <__multadd>
 8005c88:	4601      	mov	r1, r0
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	4648      	mov	r0, r9
 8005c8e:	f000 fcad 	bl	80065ec <__mcmp>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	f77f aeb3 	ble.w	80059fe <_dtoa_r+0x68e>
 8005c98:	4656      	mov	r6, sl
 8005c9a:	2331      	movs	r3, #49	@ 0x31
 8005c9c:	f806 3b01 	strb.w	r3, [r6], #1
 8005ca0:	9b04      	ldr	r3, [sp, #16]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	9304      	str	r3, [sp, #16]
 8005ca6:	e6ae      	b.n	8005a06 <_dtoa_r+0x696>
 8005ca8:	9c07      	ldr	r4, [sp, #28]
 8005caa:	9704      	str	r7, [sp, #16]
 8005cac:	4625      	mov	r5, r4
 8005cae:	e7f3      	b.n	8005c98 <_dtoa_r+0x928>
 8005cb0:	9b07      	ldr	r3, [sp, #28]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8104 	beq.w	8005ec4 <_dtoa_r+0xb54>
 8005cbc:	2e00      	cmp	r6, #0
 8005cbe:	dd05      	ble.n	8005ccc <_dtoa_r+0x95c>
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	4632      	mov	r2, r6
 8005cc4:	4658      	mov	r0, fp
 8005cc6:	f000 fc25 	bl	8006514 <__lshift>
 8005cca:	4605      	mov	r5, r0
 8005ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d05a      	beq.n	8005d88 <_dtoa_r+0xa18>
 8005cd2:	6869      	ldr	r1, [r5, #4]
 8005cd4:	4658      	mov	r0, fp
 8005cd6:	f000 fa0f 	bl	80060f8 <_Balloc>
 8005cda:	4606      	mov	r6, r0
 8005cdc:	b928      	cbnz	r0, 8005cea <_dtoa_r+0x97a>
 8005cde:	4b84      	ldr	r3, [pc, #528]	@ (8005ef0 <_dtoa_r+0xb80>)
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005ce6:	f7ff bb5a 	b.w	800539e <_dtoa_r+0x2e>
 8005cea:	692a      	ldr	r2, [r5, #16]
 8005cec:	3202      	adds	r2, #2
 8005cee:	0092      	lsls	r2, r2, #2
 8005cf0:	f105 010c 	add.w	r1, r5, #12
 8005cf4:	300c      	adds	r0, #12
 8005cf6:	f000 ffaf 	bl	8006c58 <memcpy>
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4658      	mov	r0, fp
 8005d00:	f000 fc08 	bl	8006514 <__lshift>
 8005d04:	f10a 0301 	add.w	r3, sl, #1
 8005d08:	9307      	str	r3, [sp, #28]
 8005d0a:	9b00      	ldr	r3, [sp, #0]
 8005d0c:	4453      	add	r3, sl
 8005d0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d10:	9b02      	ldr	r3, [sp, #8]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	462f      	mov	r7, r5
 8005d18:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	9b07      	ldr	r3, [sp, #28]
 8005d1e:	4621      	mov	r1, r4
 8005d20:	3b01      	subs	r3, #1
 8005d22:	4648      	mov	r0, r9
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	f7ff fa98 	bl	800525a <quorem>
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	9002      	str	r0, [sp, #8]
 8005d2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005d32:	4648      	mov	r0, r9
 8005d34:	f000 fc5a 	bl	80065ec <__mcmp>
 8005d38:	462a      	mov	r2, r5
 8005d3a:	9008      	str	r0, [sp, #32]
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	4658      	mov	r0, fp
 8005d40:	f000 fc70 	bl	8006624 <__mdiff>
 8005d44:	68c2      	ldr	r2, [r0, #12]
 8005d46:	4606      	mov	r6, r0
 8005d48:	bb02      	cbnz	r2, 8005d8c <_dtoa_r+0xa1c>
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	4648      	mov	r0, r9
 8005d4e:	f000 fc4d 	bl	80065ec <__mcmp>
 8005d52:	4602      	mov	r2, r0
 8005d54:	4631      	mov	r1, r6
 8005d56:	4658      	mov	r0, fp
 8005d58:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d5a:	f000 fa0d 	bl	8006178 <_Bfree>
 8005d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d62:	9e07      	ldr	r6, [sp, #28]
 8005d64:	ea43 0102 	orr.w	r1, r3, r2
 8005d68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d6a:	4319      	orrs	r1, r3
 8005d6c:	d110      	bne.n	8005d90 <_dtoa_r+0xa20>
 8005d6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d72:	d029      	beq.n	8005dc8 <_dtoa_r+0xa58>
 8005d74:	9b08      	ldr	r3, [sp, #32]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	dd02      	ble.n	8005d80 <_dtoa_r+0xa10>
 8005d7a:	9b02      	ldr	r3, [sp, #8]
 8005d7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005d80:	9b00      	ldr	r3, [sp, #0]
 8005d82:	f883 8000 	strb.w	r8, [r3]
 8005d86:	e63f      	b.n	8005a08 <_dtoa_r+0x698>
 8005d88:	4628      	mov	r0, r5
 8005d8a:	e7bb      	b.n	8005d04 <_dtoa_r+0x994>
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	e7e1      	b.n	8005d54 <_dtoa_r+0x9e4>
 8005d90:	9b08      	ldr	r3, [sp, #32]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	db04      	blt.n	8005da0 <_dtoa_r+0xa30>
 8005d96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d9c:	430b      	orrs	r3, r1
 8005d9e:	d120      	bne.n	8005de2 <_dtoa_r+0xa72>
 8005da0:	2a00      	cmp	r2, #0
 8005da2:	dded      	ble.n	8005d80 <_dtoa_r+0xa10>
 8005da4:	4649      	mov	r1, r9
 8005da6:	2201      	movs	r2, #1
 8005da8:	4658      	mov	r0, fp
 8005daa:	f000 fbb3 	bl	8006514 <__lshift>
 8005dae:	4621      	mov	r1, r4
 8005db0:	4681      	mov	r9, r0
 8005db2:	f000 fc1b 	bl	80065ec <__mcmp>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	dc03      	bgt.n	8005dc2 <_dtoa_r+0xa52>
 8005dba:	d1e1      	bne.n	8005d80 <_dtoa_r+0xa10>
 8005dbc:	f018 0f01 	tst.w	r8, #1
 8005dc0:	d0de      	beq.n	8005d80 <_dtoa_r+0xa10>
 8005dc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005dc6:	d1d8      	bne.n	8005d7a <_dtoa_r+0xa0a>
 8005dc8:	9a00      	ldr	r2, [sp, #0]
 8005dca:	2339      	movs	r3, #57	@ 0x39
 8005dcc:	7013      	strb	r3, [r2, #0]
 8005dce:	4633      	mov	r3, r6
 8005dd0:	461e      	mov	r6, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005dd8:	2a39      	cmp	r2, #57	@ 0x39
 8005dda:	d052      	beq.n	8005e82 <_dtoa_r+0xb12>
 8005ddc:	3201      	adds	r2, #1
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	e612      	b.n	8005a08 <_dtoa_r+0x698>
 8005de2:	2a00      	cmp	r2, #0
 8005de4:	dd07      	ble.n	8005df6 <_dtoa_r+0xa86>
 8005de6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005dea:	d0ed      	beq.n	8005dc8 <_dtoa_r+0xa58>
 8005dec:	9a00      	ldr	r2, [sp, #0]
 8005dee:	f108 0301 	add.w	r3, r8, #1
 8005df2:	7013      	strb	r3, [r2, #0]
 8005df4:	e608      	b.n	8005a08 <_dtoa_r+0x698>
 8005df6:	9b07      	ldr	r3, [sp, #28]
 8005df8:	9a07      	ldr	r2, [sp, #28]
 8005dfa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d028      	beq.n	8005e56 <_dtoa_r+0xae6>
 8005e04:	4649      	mov	r1, r9
 8005e06:	2300      	movs	r3, #0
 8005e08:	220a      	movs	r2, #10
 8005e0a:	4658      	mov	r0, fp
 8005e0c:	f000 f9d6 	bl	80061bc <__multadd>
 8005e10:	42af      	cmp	r7, r5
 8005e12:	4681      	mov	r9, r0
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	f04f 020a 	mov.w	r2, #10
 8005e1c:	4639      	mov	r1, r7
 8005e1e:	4658      	mov	r0, fp
 8005e20:	d107      	bne.n	8005e32 <_dtoa_r+0xac2>
 8005e22:	f000 f9cb 	bl	80061bc <__multadd>
 8005e26:	4607      	mov	r7, r0
 8005e28:	4605      	mov	r5, r0
 8005e2a:	9b07      	ldr	r3, [sp, #28]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	9307      	str	r3, [sp, #28]
 8005e30:	e774      	b.n	8005d1c <_dtoa_r+0x9ac>
 8005e32:	f000 f9c3 	bl	80061bc <__multadd>
 8005e36:	4629      	mov	r1, r5
 8005e38:	4607      	mov	r7, r0
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	220a      	movs	r2, #10
 8005e3e:	4658      	mov	r0, fp
 8005e40:	f000 f9bc 	bl	80061bc <__multadd>
 8005e44:	4605      	mov	r5, r0
 8005e46:	e7f0      	b.n	8005e2a <_dtoa_r+0xaba>
 8005e48:	9b00      	ldr	r3, [sp, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bfcc      	ite	gt
 8005e4e:	461e      	movgt	r6, r3
 8005e50:	2601      	movle	r6, #1
 8005e52:	4456      	add	r6, sl
 8005e54:	2700      	movs	r7, #0
 8005e56:	4649      	mov	r1, r9
 8005e58:	2201      	movs	r2, #1
 8005e5a:	4658      	mov	r0, fp
 8005e5c:	f000 fb5a 	bl	8006514 <__lshift>
 8005e60:	4621      	mov	r1, r4
 8005e62:	4681      	mov	r9, r0
 8005e64:	f000 fbc2 	bl	80065ec <__mcmp>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	dcb0      	bgt.n	8005dce <_dtoa_r+0xa5e>
 8005e6c:	d102      	bne.n	8005e74 <_dtoa_r+0xb04>
 8005e6e:	f018 0f01 	tst.w	r8, #1
 8005e72:	d1ac      	bne.n	8005dce <_dtoa_r+0xa5e>
 8005e74:	4633      	mov	r3, r6
 8005e76:	461e      	mov	r6, r3
 8005e78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e7c:	2a30      	cmp	r2, #48	@ 0x30
 8005e7e:	d0fa      	beq.n	8005e76 <_dtoa_r+0xb06>
 8005e80:	e5c2      	b.n	8005a08 <_dtoa_r+0x698>
 8005e82:	459a      	cmp	sl, r3
 8005e84:	d1a4      	bne.n	8005dd0 <_dtoa_r+0xa60>
 8005e86:	9b04      	ldr	r3, [sp, #16]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	9304      	str	r3, [sp, #16]
 8005e8c:	2331      	movs	r3, #49	@ 0x31
 8005e8e:	f88a 3000 	strb.w	r3, [sl]
 8005e92:	e5b9      	b.n	8005a08 <_dtoa_r+0x698>
 8005e94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005ef4 <_dtoa_r+0xb84>
 8005e9a:	b11b      	cbz	r3, 8005ea4 <_dtoa_r+0xb34>
 8005e9c:	f10a 0308 	add.w	r3, sl, #8
 8005ea0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	4650      	mov	r0, sl
 8005ea6:	b019      	add	sp, #100	@ 0x64
 8005ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	f77f ae37 	ble.w	8005b22 <_dtoa_r+0x7b2>
 8005eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005eb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eb8:	2001      	movs	r0, #1
 8005eba:	e655      	b.n	8005b68 <_dtoa_r+0x7f8>
 8005ebc:	9b00      	ldr	r3, [sp, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f77f aed6 	ble.w	8005c70 <_dtoa_r+0x900>
 8005ec4:	4656      	mov	r6, sl
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	4648      	mov	r0, r9
 8005eca:	f7ff f9c6 	bl	800525a <quorem>
 8005ece:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005ed2:	f806 8b01 	strb.w	r8, [r6], #1
 8005ed6:	9b00      	ldr	r3, [sp, #0]
 8005ed8:	eba6 020a 	sub.w	r2, r6, sl
 8005edc:	4293      	cmp	r3, r2
 8005ede:	ddb3      	ble.n	8005e48 <_dtoa_r+0xad8>
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	220a      	movs	r2, #10
 8005ee6:	4658      	mov	r0, fp
 8005ee8:	f000 f968 	bl	80061bc <__multadd>
 8005eec:	4681      	mov	r9, r0
 8005eee:	e7ea      	b.n	8005ec6 <_dtoa_r+0xb56>
 8005ef0:	08007414 	.word	0x08007414
 8005ef4:	08007398 	.word	0x08007398

08005ef8 <_free_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4605      	mov	r5, r0
 8005efc:	2900      	cmp	r1, #0
 8005efe:	d041      	beq.n	8005f84 <_free_r+0x8c>
 8005f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f04:	1f0c      	subs	r4, r1, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bfb8      	it	lt
 8005f0a:	18e4      	addlt	r4, r4, r3
 8005f0c:	f000 f8e8 	bl	80060e0 <__malloc_lock>
 8005f10:	4a1d      	ldr	r2, [pc, #116]	@ (8005f88 <_free_r+0x90>)
 8005f12:	6813      	ldr	r3, [r2, #0]
 8005f14:	b933      	cbnz	r3, 8005f24 <_free_r+0x2c>
 8005f16:	6063      	str	r3, [r4, #4]
 8005f18:	6014      	str	r4, [r2, #0]
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f20:	f000 b8e4 	b.w	80060ec <__malloc_unlock>
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	d908      	bls.n	8005f3a <_free_r+0x42>
 8005f28:	6820      	ldr	r0, [r4, #0]
 8005f2a:	1821      	adds	r1, r4, r0
 8005f2c:	428b      	cmp	r3, r1
 8005f2e:	bf01      	itttt	eq
 8005f30:	6819      	ldreq	r1, [r3, #0]
 8005f32:	685b      	ldreq	r3, [r3, #4]
 8005f34:	1809      	addeq	r1, r1, r0
 8005f36:	6021      	streq	r1, [r4, #0]
 8005f38:	e7ed      	b.n	8005f16 <_free_r+0x1e>
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	b10b      	cbz	r3, 8005f44 <_free_r+0x4c>
 8005f40:	42a3      	cmp	r3, r4
 8005f42:	d9fa      	bls.n	8005f3a <_free_r+0x42>
 8005f44:	6811      	ldr	r1, [r2, #0]
 8005f46:	1850      	adds	r0, r2, r1
 8005f48:	42a0      	cmp	r0, r4
 8005f4a:	d10b      	bne.n	8005f64 <_free_r+0x6c>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	4401      	add	r1, r0
 8005f50:	1850      	adds	r0, r2, r1
 8005f52:	4283      	cmp	r3, r0
 8005f54:	6011      	str	r1, [r2, #0]
 8005f56:	d1e0      	bne.n	8005f1a <_free_r+0x22>
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	6053      	str	r3, [r2, #4]
 8005f5e:	4408      	add	r0, r1
 8005f60:	6010      	str	r0, [r2, #0]
 8005f62:	e7da      	b.n	8005f1a <_free_r+0x22>
 8005f64:	d902      	bls.n	8005f6c <_free_r+0x74>
 8005f66:	230c      	movs	r3, #12
 8005f68:	602b      	str	r3, [r5, #0]
 8005f6a:	e7d6      	b.n	8005f1a <_free_r+0x22>
 8005f6c:	6820      	ldr	r0, [r4, #0]
 8005f6e:	1821      	adds	r1, r4, r0
 8005f70:	428b      	cmp	r3, r1
 8005f72:	bf04      	itt	eq
 8005f74:	6819      	ldreq	r1, [r3, #0]
 8005f76:	685b      	ldreq	r3, [r3, #4]
 8005f78:	6063      	str	r3, [r4, #4]
 8005f7a:	bf04      	itt	eq
 8005f7c:	1809      	addeq	r1, r1, r0
 8005f7e:	6021      	streq	r1, [r4, #0]
 8005f80:	6054      	str	r4, [r2, #4]
 8005f82:	e7ca      	b.n	8005f1a <_free_r+0x22>
 8005f84:	bd38      	pop	{r3, r4, r5, pc}
 8005f86:	bf00      	nop
 8005f88:	20000468 	.word	0x20000468

08005f8c <malloc>:
 8005f8c:	4b02      	ldr	r3, [pc, #8]	@ (8005f98 <malloc+0xc>)
 8005f8e:	4601      	mov	r1, r0
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	f000 b825 	b.w	8005fe0 <_malloc_r>
 8005f96:	bf00      	nop
 8005f98:	2000001c 	.word	0x2000001c

08005f9c <sbrk_aligned>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	4e0f      	ldr	r6, [pc, #60]	@ (8005fdc <sbrk_aligned+0x40>)
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	6831      	ldr	r1, [r6, #0]
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	b911      	cbnz	r1, 8005fae <sbrk_aligned+0x12>
 8005fa8:	f000 fe46 	bl	8006c38 <_sbrk_r>
 8005fac:	6030      	str	r0, [r6, #0]
 8005fae:	4621      	mov	r1, r4
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	f000 fe41 	bl	8006c38 <_sbrk_r>
 8005fb6:	1c43      	adds	r3, r0, #1
 8005fb8:	d103      	bne.n	8005fc2 <sbrk_aligned+0x26>
 8005fba:	f04f 34ff 	mov.w	r4, #4294967295
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	bd70      	pop	{r4, r5, r6, pc}
 8005fc2:	1cc4      	adds	r4, r0, #3
 8005fc4:	f024 0403 	bic.w	r4, r4, #3
 8005fc8:	42a0      	cmp	r0, r4
 8005fca:	d0f8      	beq.n	8005fbe <sbrk_aligned+0x22>
 8005fcc:	1a21      	subs	r1, r4, r0
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f000 fe32 	bl	8006c38 <_sbrk_r>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d1f2      	bne.n	8005fbe <sbrk_aligned+0x22>
 8005fd8:	e7ef      	b.n	8005fba <sbrk_aligned+0x1e>
 8005fda:	bf00      	nop
 8005fdc:	20000464 	.word	0x20000464

08005fe0 <_malloc_r>:
 8005fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe4:	1ccd      	adds	r5, r1, #3
 8005fe6:	f025 0503 	bic.w	r5, r5, #3
 8005fea:	3508      	adds	r5, #8
 8005fec:	2d0c      	cmp	r5, #12
 8005fee:	bf38      	it	cc
 8005ff0:	250c      	movcc	r5, #12
 8005ff2:	2d00      	cmp	r5, #0
 8005ff4:	4606      	mov	r6, r0
 8005ff6:	db01      	blt.n	8005ffc <_malloc_r+0x1c>
 8005ff8:	42a9      	cmp	r1, r5
 8005ffa:	d904      	bls.n	8006006 <_malloc_r+0x26>
 8005ffc:	230c      	movs	r3, #12
 8005ffe:	6033      	str	r3, [r6, #0]
 8006000:	2000      	movs	r0, #0
 8006002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006006:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060dc <_malloc_r+0xfc>
 800600a:	f000 f869 	bl	80060e0 <__malloc_lock>
 800600e:	f8d8 3000 	ldr.w	r3, [r8]
 8006012:	461c      	mov	r4, r3
 8006014:	bb44      	cbnz	r4, 8006068 <_malloc_r+0x88>
 8006016:	4629      	mov	r1, r5
 8006018:	4630      	mov	r0, r6
 800601a:	f7ff ffbf 	bl	8005f9c <sbrk_aligned>
 800601e:	1c43      	adds	r3, r0, #1
 8006020:	4604      	mov	r4, r0
 8006022:	d158      	bne.n	80060d6 <_malloc_r+0xf6>
 8006024:	f8d8 4000 	ldr.w	r4, [r8]
 8006028:	4627      	mov	r7, r4
 800602a:	2f00      	cmp	r7, #0
 800602c:	d143      	bne.n	80060b6 <_malloc_r+0xd6>
 800602e:	2c00      	cmp	r4, #0
 8006030:	d04b      	beq.n	80060ca <_malloc_r+0xea>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	4639      	mov	r1, r7
 8006036:	4630      	mov	r0, r6
 8006038:	eb04 0903 	add.w	r9, r4, r3
 800603c:	f000 fdfc 	bl	8006c38 <_sbrk_r>
 8006040:	4581      	cmp	r9, r0
 8006042:	d142      	bne.n	80060ca <_malloc_r+0xea>
 8006044:	6821      	ldr	r1, [r4, #0]
 8006046:	1a6d      	subs	r5, r5, r1
 8006048:	4629      	mov	r1, r5
 800604a:	4630      	mov	r0, r6
 800604c:	f7ff ffa6 	bl	8005f9c <sbrk_aligned>
 8006050:	3001      	adds	r0, #1
 8006052:	d03a      	beq.n	80060ca <_malloc_r+0xea>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	442b      	add	r3, r5
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	f8d8 3000 	ldr.w	r3, [r8]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	bb62      	cbnz	r2, 80060bc <_malloc_r+0xdc>
 8006062:	f8c8 7000 	str.w	r7, [r8]
 8006066:	e00f      	b.n	8006088 <_malloc_r+0xa8>
 8006068:	6822      	ldr	r2, [r4, #0]
 800606a:	1b52      	subs	r2, r2, r5
 800606c:	d420      	bmi.n	80060b0 <_malloc_r+0xd0>
 800606e:	2a0b      	cmp	r2, #11
 8006070:	d917      	bls.n	80060a2 <_malloc_r+0xc2>
 8006072:	1961      	adds	r1, r4, r5
 8006074:	42a3      	cmp	r3, r4
 8006076:	6025      	str	r5, [r4, #0]
 8006078:	bf18      	it	ne
 800607a:	6059      	strne	r1, [r3, #4]
 800607c:	6863      	ldr	r3, [r4, #4]
 800607e:	bf08      	it	eq
 8006080:	f8c8 1000 	streq.w	r1, [r8]
 8006084:	5162      	str	r2, [r4, r5]
 8006086:	604b      	str	r3, [r1, #4]
 8006088:	4630      	mov	r0, r6
 800608a:	f000 f82f 	bl	80060ec <__malloc_unlock>
 800608e:	f104 000b 	add.w	r0, r4, #11
 8006092:	1d23      	adds	r3, r4, #4
 8006094:	f020 0007 	bic.w	r0, r0, #7
 8006098:	1ac2      	subs	r2, r0, r3
 800609a:	bf1c      	itt	ne
 800609c:	1a1b      	subne	r3, r3, r0
 800609e:	50a3      	strne	r3, [r4, r2]
 80060a0:	e7af      	b.n	8006002 <_malloc_r+0x22>
 80060a2:	6862      	ldr	r2, [r4, #4]
 80060a4:	42a3      	cmp	r3, r4
 80060a6:	bf0c      	ite	eq
 80060a8:	f8c8 2000 	streq.w	r2, [r8]
 80060ac:	605a      	strne	r2, [r3, #4]
 80060ae:	e7eb      	b.n	8006088 <_malloc_r+0xa8>
 80060b0:	4623      	mov	r3, r4
 80060b2:	6864      	ldr	r4, [r4, #4]
 80060b4:	e7ae      	b.n	8006014 <_malloc_r+0x34>
 80060b6:	463c      	mov	r4, r7
 80060b8:	687f      	ldr	r7, [r7, #4]
 80060ba:	e7b6      	b.n	800602a <_malloc_r+0x4a>
 80060bc:	461a      	mov	r2, r3
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	42a3      	cmp	r3, r4
 80060c2:	d1fb      	bne.n	80060bc <_malloc_r+0xdc>
 80060c4:	2300      	movs	r3, #0
 80060c6:	6053      	str	r3, [r2, #4]
 80060c8:	e7de      	b.n	8006088 <_malloc_r+0xa8>
 80060ca:	230c      	movs	r3, #12
 80060cc:	6033      	str	r3, [r6, #0]
 80060ce:	4630      	mov	r0, r6
 80060d0:	f000 f80c 	bl	80060ec <__malloc_unlock>
 80060d4:	e794      	b.n	8006000 <_malloc_r+0x20>
 80060d6:	6005      	str	r5, [r0, #0]
 80060d8:	e7d6      	b.n	8006088 <_malloc_r+0xa8>
 80060da:	bf00      	nop
 80060dc:	20000468 	.word	0x20000468

080060e0 <__malloc_lock>:
 80060e0:	4801      	ldr	r0, [pc, #4]	@ (80060e8 <__malloc_lock+0x8>)
 80060e2:	f7ff b8b8 	b.w	8005256 <__retarget_lock_acquire_recursive>
 80060e6:	bf00      	nop
 80060e8:	20000460 	.word	0x20000460

080060ec <__malloc_unlock>:
 80060ec:	4801      	ldr	r0, [pc, #4]	@ (80060f4 <__malloc_unlock+0x8>)
 80060ee:	f7ff b8b3 	b.w	8005258 <__retarget_lock_release_recursive>
 80060f2:	bf00      	nop
 80060f4:	20000460 	.word	0x20000460

080060f8 <_Balloc>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	69c6      	ldr	r6, [r0, #28]
 80060fc:	4604      	mov	r4, r0
 80060fe:	460d      	mov	r5, r1
 8006100:	b976      	cbnz	r6, 8006120 <_Balloc+0x28>
 8006102:	2010      	movs	r0, #16
 8006104:	f7ff ff42 	bl	8005f8c <malloc>
 8006108:	4602      	mov	r2, r0
 800610a:	61e0      	str	r0, [r4, #28]
 800610c:	b920      	cbnz	r0, 8006118 <_Balloc+0x20>
 800610e:	4b18      	ldr	r3, [pc, #96]	@ (8006170 <_Balloc+0x78>)
 8006110:	4818      	ldr	r0, [pc, #96]	@ (8006174 <_Balloc+0x7c>)
 8006112:	216b      	movs	r1, #107	@ 0x6b
 8006114:	f000 fdae 	bl	8006c74 <__assert_func>
 8006118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800611c:	6006      	str	r6, [r0, #0]
 800611e:	60c6      	str	r6, [r0, #12]
 8006120:	69e6      	ldr	r6, [r4, #28]
 8006122:	68f3      	ldr	r3, [r6, #12]
 8006124:	b183      	cbz	r3, 8006148 <_Balloc+0x50>
 8006126:	69e3      	ldr	r3, [r4, #28]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800612e:	b9b8      	cbnz	r0, 8006160 <_Balloc+0x68>
 8006130:	2101      	movs	r1, #1
 8006132:	fa01 f605 	lsl.w	r6, r1, r5
 8006136:	1d72      	adds	r2, r6, #5
 8006138:	0092      	lsls	r2, r2, #2
 800613a:	4620      	mov	r0, r4
 800613c:	f000 fdb8 	bl	8006cb0 <_calloc_r>
 8006140:	b160      	cbz	r0, 800615c <_Balloc+0x64>
 8006142:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006146:	e00e      	b.n	8006166 <_Balloc+0x6e>
 8006148:	2221      	movs	r2, #33	@ 0x21
 800614a:	2104      	movs	r1, #4
 800614c:	4620      	mov	r0, r4
 800614e:	f000 fdaf 	bl	8006cb0 <_calloc_r>
 8006152:	69e3      	ldr	r3, [r4, #28]
 8006154:	60f0      	str	r0, [r6, #12]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e4      	bne.n	8006126 <_Balloc+0x2e>
 800615c:	2000      	movs	r0, #0
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	6802      	ldr	r2, [r0, #0]
 8006162:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006166:	2300      	movs	r3, #0
 8006168:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800616c:	e7f7      	b.n	800615e <_Balloc+0x66>
 800616e:	bf00      	nop
 8006170:	080073a5 	.word	0x080073a5
 8006174:	08007425 	.word	0x08007425

08006178 <_Bfree>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	69c6      	ldr	r6, [r0, #28]
 800617c:	4605      	mov	r5, r0
 800617e:	460c      	mov	r4, r1
 8006180:	b976      	cbnz	r6, 80061a0 <_Bfree+0x28>
 8006182:	2010      	movs	r0, #16
 8006184:	f7ff ff02 	bl	8005f8c <malloc>
 8006188:	4602      	mov	r2, r0
 800618a:	61e8      	str	r0, [r5, #28]
 800618c:	b920      	cbnz	r0, 8006198 <_Bfree+0x20>
 800618e:	4b09      	ldr	r3, [pc, #36]	@ (80061b4 <_Bfree+0x3c>)
 8006190:	4809      	ldr	r0, [pc, #36]	@ (80061b8 <_Bfree+0x40>)
 8006192:	218f      	movs	r1, #143	@ 0x8f
 8006194:	f000 fd6e 	bl	8006c74 <__assert_func>
 8006198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800619c:	6006      	str	r6, [r0, #0]
 800619e:	60c6      	str	r6, [r0, #12]
 80061a0:	b13c      	cbz	r4, 80061b2 <_Bfree+0x3a>
 80061a2:	69eb      	ldr	r3, [r5, #28]
 80061a4:	6862      	ldr	r2, [r4, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061ac:	6021      	str	r1, [r4, #0]
 80061ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061b2:	bd70      	pop	{r4, r5, r6, pc}
 80061b4:	080073a5 	.word	0x080073a5
 80061b8:	08007425 	.word	0x08007425

080061bc <__multadd>:
 80061bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c0:	690d      	ldr	r5, [r1, #16]
 80061c2:	4607      	mov	r7, r0
 80061c4:	460c      	mov	r4, r1
 80061c6:	461e      	mov	r6, r3
 80061c8:	f101 0c14 	add.w	ip, r1, #20
 80061cc:	2000      	movs	r0, #0
 80061ce:	f8dc 3000 	ldr.w	r3, [ip]
 80061d2:	b299      	uxth	r1, r3
 80061d4:	fb02 6101 	mla	r1, r2, r1, r6
 80061d8:	0c1e      	lsrs	r6, r3, #16
 80061da:	0c0b      	lsrs	r3, r1, #16
 80061dc:	fb02 3306 	mla	r3, r2, r6, r3
 80061e0:	b289      	uxth	r1, r1
 80061e2:	3001      	adds	r0, #1
 80061e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061e8:	4285      	cmp	r5, r0
 80061ea:	f84c 1b04 	str.w	r1, [ip], #4
 80061ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061f2:	dcec      	bgt.n	80061ce <__multadd+0x12>
 80061f4:	b30e      	cbz	r6, 800623a <__multadd+0x7e>
 80061f6:	68a3      	ldr	r3, [r4, #8]
 80061f8:	42ab      	cmp	r3, r5
 80061fa:	dc19      	bgt.n	8006230 <__multadd+0x74>
 80061fc:	6861      	ldr	r1, [r4, #4]
 80061fe:	4638      	mov	r0, r7
 8006200:	3101      	adds	r1, #1
 8006202:	f7ff ff79 	bl	80060f8 <_Balloc>
 8006206:	4680      	mov	r8, r0
 8006208:	b928      	cbnz	r0, 8006216 <__multadd+0x5a>
 800620a:	4602      	mov	r2, r0
 800620c:	4b0c      	ldr	r3, [pc, #48]	@ (8006240 <__multadd+0x84>)
 800620e:	480d      	ldr	r0, [pc, #52]	@ (8006244 <__multadd+0x88>)
 8006210:	21ba      	movs	r1, #186	@ 0xba
 8006212:	f000 fd2f 	bl	8006c74 <__assert_func>
 8006216:	6922      	ldr	r2, [r4, #16]
 8006218:	3202      	adds	r2, #2
 800621a:	f104 010c 	add.w	r1, r4, #12
 800621e:	0092      	lsls	r2, r2, #2
 8006220:	300c      	adds	r0, #12
 8006222:	f000 fd19 	bl	8006c58 <memcpy>
 8006226:	4621      	mov	r1, r4
 8006228:	4638      	mov	r0, r7
 800622a:	f7ff ffa5 	bl	8006178 <_Bfree>
 800622e:	4644      	mov	r4, r8
 8006230:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006234:	3501      	adds	r5, #1
 8006236:	615e      	str	r6, [r3, #20]
 8006238:	6125      	str	r5, [r4, #16]
 800623a:	4620      	mov	r0, r4
 800623c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006240:	08007414 	.word	0x08007414
 8006244:	08007425 	.word	0x08007425

08006248 <__hi0bits>:
 8006248:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800624c:	4603      	mov	r3, r0
 800624e:	bf36      	itet	cc
 8006250:	0403      	lslcc	r3, r0, #16
 8006252:	2000      	movcs	r0, #0
 8006254:	2010      	movcc	r0, #16
 8006256:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800625a:	bf3c      	itt	cc
 800625c:	021b      	lslcc	r3, r3, #8
 800625e:	3008      	addcc	r0, #8
 8006260:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006264:	bf3c      	itt	cc
 8006266:	011b      	lslcc	r3, r3, #4
 8006268:	3004      	addcc	r0, #4
 800626a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626e:	bf3c      	itt	cc
 8006270:	009b      	lslcc	r3, r3, #2
 8006272:	3002      	addcc	r0, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	db05      	blt.n	8006284 <__hi0bits+0x3c>
 8006278:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800627c:	f100 0001 	add.w	r0, r0, #1
 8006280:	bf08      	it	eq
 8006282:	2020      	moveq	r0, #32
 8006284:	4770      	bx	lr

08006286 <__lo0bits>:
 8006286:	6803      	ldr	r3, [r0, #0]
 8006288:	4602      	mov	r2, r0
 800628a:	f013 0007 	ands.w	r0, r3, #7
 800628e:	d00b      	beq.n	80062a8 <__lo0bits+0x22>
 8006290:	07d9      	lsls	r1, r3, #31
 8006292:	d421      	bmi.n	80062d8 <__lo0bits+0x52>
 8006294:	0798      	lsls	r0, r3, #30
 8006296:	bf49      	itett	mi
 8006298:	085b      	lsrmi	r3, r3, #1
 800629a:	089b      	lsrpl	r3, r3, #2
 800629c:	2001      	movmi	r0, #1
 800629e:	6013      	strmi	r3, [r2, #0]
 80062a0:	bf5c      	itt	pl
 80062a2:	6013      	strpl	r3, [r2, #0]
 80062a4:	2002      	movpl	r0, #2
 80062a6:	4770      	bx	lr
 80062a8:	b299      	uxth	r1, r3
 80062aa:	b909      	cbnz	r1, 80062b0 <__lo0bits+0x2a>
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	2010      	movs	r0, #16
 80062b0:	b2d9      	uxtb	r1, r3
 80062b2:	b909      	cbnz	r1, 80062b8 <__lo0bits+0x32>
 80062b4:	3008      	adds	r0, #8
 80062b6:	0a1b      	lsrs	r3, r3, #8
 80062b8:	0719      	lsls	r1, r3, #28
 80062ba:	bf04      	itt	eq
 80062bc:	091b      	lsreq	r3, r3, #4
 80062be:	3004      	addeq	r0, #4
 80062c0:	0799      	lsls	r1, r3, #30
 80062c2:	bf04      	itt	eq
 80062c4:	089b      	lsreq	r3, r3, #2
 80062c6:	3002      	addeq	r0, #2
 80062c8:	07d9      	lsls	r1, r3, #31
 80062ca:	d403      	bmi.n	80062d4 <__lo0bits+0x4e>
 80062cc:	085b      	lsrs	r3, r3, #1
 80062ce:	f100 0001 	add.w	r0, r0, #1
 80062d2:	d003      	beq.n	80062dc <__lo0bits+0x56>
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	4770      	bx	lr
 80062d8:	2000      	movs	r0, #0
 80062da:	4770      	bx	lr
 80062dc:	2020      	movs	r0, #32
 80062de:	4770      	bx	lr

080062e0 <__i2b>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	460c      	mov	r4, r1
 80062e4:	2101      	movs	r1, #1
 80062e6:	f7ff ff07 	bl	80060f8 <_Balloc>
 80062ea:	4602      	mov	r2, r0
 80062ec:	b928      	cbnz	r0, 80062fa <__i2b+0x1a>
 80062ee:	4b05      	ldr	r3, [pc, #20]	@ (8006304 <__i2b+0x24>)
 80062f0:	4805      	ldr	r0, [pc, #20]	@ (8006308 <__i2b+0x28>)
 80062f2:	f240 1145 	movw	r1, #325	@ 0x145
 80062f6:	f000 fcbd 	bl	8006c74 <__assert_func>
 80062fa:	2301      	movs	r3, #1
 80062fc:	6144      	str	r4, [r0, #20]
 80062fe:	6103      	str	r3, [r0, #16]
 8006300:	bd10      	pop	{r4, pc}
 8006302:	bf00      	nop
 8006304:	08007414 	.word	0x08007414
 8006308:	08007425 	.word	0x08007425

0800630c <__multiply>:
 800630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	4614      	mov	r4, r2
 8006312:	690a      	ldr	r2, [r1, #16]
 8006314:	6923      	ldr	r3, [r4, #16]
 8006316:	429a      	cmp	r2, r3
 8006318:	bfa8      	it	ge
 800631a:	4623      	movge	r3, r4
 800631c:	460f      	mov	r7, r1
 800631e:	bfa4      	itt	ge
 8006320:	460c      	movge	r4, r1
 8006322:	461f      	movge	r7, r3
 8006324:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006328:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800632c:	68a3      	ldr	r3, [r4, #8]
 800632e:	6861      	ldr	r1, [r4, #4]
 8006330:	eb0a 0609 	add.w	r6, sl, r9
 8006334:	42b3      	cmp	r3, r6
 8006336:	b085      	sub	sp, #20
 8006338:	bfb8      	it	lt
 800633a:	3101      	addlt	r1, #1
 800633c:	f7ff fedc 	bl	80060f8 <_Balloc>
 8006340:	b930      	cbnz	r0, 8006350 <__multiply+0x44>
 8006342:	4602      	mov	r2, r0
 8006344:	4b44      	ldr	r3, [pc, #272]	@ (8006458 <__multiply+0x14c>)
 8006346:	4845      	ldr	r0, [pc, #276]	@ (800645c <__multiply+0x150>)
 8006348:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800634c:	f000 fc92 	bl	8006c74 <__assert_func>
 8006350:	f100 0514 	add.w	r5, r0, #20
 8006354:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006358:	462b      	mov	r3, r5
 800635a:	2200      	movs	r2, #0
 800635c:	4543      	cmp	r3, r8
 800635e:	d321      	bcc.n	80063a4 <__multiply+0x98>
 8006360:	f107 0114 	add.w	r1, r7, #20
 8006364:	f104 0214 	add.w	r2, r4, #20
 8006368:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800636c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006370:	9302      	str	r3, [sp, #8]
 8006372:	1b13      	subs	r3, r2, r4
 8006374:	3b15      	subs	r3, #21
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	3304      	adds	r3, #4
 800637c:	f104 0715 	add.w	r7, r4, #21
 8006380:	42ba      	cmp	r2, r7
 8006382:	bf38      	it	cc
 8006384:	2304      	movcc	r3, #4
 8006386:	9301      	str	r3, [sp, #4]
 8006388:	9b02      	ldr	r3, [sp, #8]
 800638a:	9103      	str	r1, [sp, #12]
 800638c:	428b      	cmp	r3, r1
 800638e:	d80c      	bhi.n	80063aa <__multiply+0x9e>
 8006390:	2e00      	cmp	r6, #0
 8006392:	dd03      	ble.n	800639c <__multiply+0x90>
 8006394:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006398:	2b00      	cmp	r3, #0
 800639a:	d05b      	beq.n	8006454 <__multiply+0x148>
 800639c:	6106      	str	r6, [r0, #16]
 800639e:	b005      	add	sp, #20
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	f843 2b04 	str.w	r2, [r3], #4
 80063a8:	e7d8      	b.n	800635c <__multiply+0x50>
 80063aa:	f8b1 a000 	ldrh.w	sl, [r1]
 80063ae:	f1ba 0f00 	cmp.w	sl, #0
 80063b2:	d024      	beq.n	80063fe <__multiply+0xf2>
 80063b4:	f104 0e14 	add.w	lr, r4, #20
 80063b8:	46a9      	mov	r9, r5
 80063ba:	f04f 0c00 	mov.w	ip, #0
 80063be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80063c2:	f8d9 3000 	ldr.w	r3, [r9]
 80063c6:	fa1f fb87 	uxth.w	fp, r7
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80063d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80063d4:	f8d9 7000 	ldr.w	r7, [r9]
 80063d8:	4463      	add	r3, ip
 80063da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80063de:	fb0a c70b 	mla	r7, sl, fp, ip
 80063e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80063ec:	4572      	cmp	r2, lr
 80063ee:	f849 3b04 	str.w	r3, [r9], #4
 80063f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80063f6:	d8e2      	bhi.n	80063be <__multiply+0xb2>
 80063f8:	9b01      	ldr	r3, [sp, #4]
 80063fa:	f845 c003 	str.w	ip, [r5, r3]
 80063fe:	9b03      	ldr	r3, [sp, #12]
 8006400:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006404:	3104      	adds	r1, #4
 8006406:	f1b9 0f00 	cmp.w	r9, #0
 800640a:	d021      	beq.n	8006450 <__multiply+0x144>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	f104 0c14 	add.w	ip, r4, #20
 8006412:	46ae      	mov	lr, r5
 8006414:	f04f 0a00 	mov.w	sl, #0
 8006418:	f8bc b000 	ldrh.w	fp, [ip]
 800641c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006420:	fb09 770b 	mla	r7, r9, fp, r7
 8006424:	4457      	add	r7, sl
 8006426:	b29b      	uxth	r3, r3
 8006428:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800642c:	f84e 3b04 	str.w	r3, [lr], #4
 8006430:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006434:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006438:	f8be 3000 	ldrh.w	r3, [lr]
 800643c:	fb09 330a 	mla	r3, r9, sl, r3
 8006440:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006444:	4562      	cmp	r2, ip
 8006446:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800644a:	d8e5      	bhi.n	8006418 <__multiply+0x10c>
 800644c:	9f01      	ldr	r7, [sp, #4]
 800644e:	51eb      	str	r3, [r5, r7]
 8006450:	3504      	adds	r5, #4
 8006452:	e799      	b.n	8006388 <__multiply+0x7c>
 8006454:	3e01      	subs	r6, #1
 8006456:	e79b      	b.n	8006390 <__multiply+0x84>
 8006458:	08007414 	.word	0x08007414
 800645c:	08007425 	.word	0x08007425

08006460 <__pow5mult>:
 8006460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006464:	4615      	mov	r5, r2
 8006466:	f012 0203 	ands.w	r2, r2, #3
 800646a:	4607      	mov	r7, r0
 800646c:	460e      	mov	r6, r1
 800646e:	d007      	beq.n	8006480 <__pow5mult+0x20>
 8006470:	4c25      	ldr	r4, [pc, #148]	@ (8006508 <__pow5mult+0xa8>)
 8006472:	3a01      	subs	r2, #1
 8006474:	2300      	movs	r3, #0
 8006476:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800647a:	f7ff fe9f 	bl	80061bc <__multadd>
 800647e:	4606      	mov	r6, r0
 8006480:	10ad      	asrs	r5, r5, #2
 8006482:	d03d      	beq.n	8006500 <__pow5mult+0xa0>
 8006484:	69fc      	ldr	r4, [r7, #28]
 8006486:	b97c      	cbnz	r4, 80064a8 <__pow5mult+0x48>
 8006488:	2010      	movs	r0, #16
 800648a:	f7ff fd7f 	bl	8005f8c <malloc>
 800648e:	4602      	mov	r2, r0
 8006490:	61f8      	str	r0, [r7, #28]
 8006492:	b928      	cbnz	r0, 80064a0 <__pow5mult+0x40>
 8006494:	4b1d      	ldr	r3, [pc, #116]	@ (800650c <__pow5mult+0xac>)
 8006496:	481e      	ldr	r0, [pc, #120]	@ (8006510 <__pow5mult+0xb0>)
 8006498:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800649c:	f000 fbea 	bl	8006c74 <__assert_func>
 80064a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064a4:	6004      	str	r4, [r0, #0]
 80064a6:	60c4      	str	r4, [r0, #12]
 80064a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80064ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064b0:	b94c      	cbnz	r4, 80064c6 <__pow5mult+0x66>
 80064b2:	f240 2171 	movw	r1, #625	@ 0x271
 80064b6:	4638      	mov	r0, r7
 80064b8:	f7ff ff12 	bl	80062e0 <__i2b>
 80064bc:	2300      	movs	r3, #0
 80064be:	f8c8 0008 	str.w	r0, [r8, #8]
 80064c2:	4604      	mov	r4, r0
 80064c4:	6003      	str	r3, [r0, #0]
 80064c6:	f04f 0900 	mov.w	r9, #0
 80064ca:	07eb      	lsls	r3, r5, #31
 80064cc:	d50a      	bpl.n	80064e4 <__pow5mult+0x84>
 80064ce:	4631      	mov	r1, r6
 80064d0:	4622      	mov	r2, r4
 80064d2:	4638      	mov	r0, r7
 80064d4:	f7ff ff1a 	bl	800630c <__multiply>
 80064d8:	4631      	mov	r1, r6
 80064da:	4680      	mov	r8, r0
 80064dc:	4638      	mov	r0, r7
 80064de:	f7ff fe4b 	bl	8006178 <_Bfree>
 80064e2:	4646      	mov	r6, r8
 80064e4:	106d      	asrs	r5, r5, #1
 80064e6:	d00b      	beq.n	8006500 <__pow5mult+0xa0>
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	b938      	cbnz	r0, 80064fc <__pow5mult+0x9c>
 80064ec:	4622      	mov	r2, r4
 80064ee:	4621      	mov	r1, r4
 80064f0:	4638      	mov	r0, r7
 80064f2:	f7ff ff0b 	bl	800630c <__multiply>
 80064f6:	6020      	str	r0, [r4, #0]
 80064f8:	f8c0 9000 	str.w	r9, [r0]
 80064fc:	4604      	mov	r4, r0
 80064fe:	e7e4      	b.n	80064ca <__pow5mult+0x6a>
 8006500:	4630      	mov	r0, r6
 8006502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006506:	bf00      	nop
 8006508:	08007480 	.word	0x08007480
 800650c:	080073a5 	.word	0x080073a5
 8006510:	08007425 	.word	0x08007425

08006514 <__lshift>:
 8006514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	460c      	mov	r4, r1
 800651a:	6849      	ldr	r1, [r1, #4]
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006522:	68a3      	ldr	r3, [r4, #8]
 8006524:	4607      	mov	r7, r0
 8006526:	4691      	mov	r9, r2
 8006528:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800652c:	f108 0601 	add.w	r6, r8, #1
 8006530:	42b3      	cmp	r3, r6
 8006532:	db0b      	blt.n	800654c <__lshift+0x38>
 8006534:	4638      	mov	r0, r7
 8006536:	f7ff fddf 	bl	80060f8 <_Balloc>
 800653a:	4605      	mov	r5, r0
 800653c:	b948      	cbnz	r0, 8006552 <__lshift+0x3e>
 800653e:	4602      	mov	r2, r0
 8006540:	4b28      	ldr	r3, [pc, #160]	@ (80065e4 <__lshift+0xd0>)
 8006542:	4829      	ldr	r0, [pc, #164]	@ (80065e8 <__lshift+0xd4>)
 8006544:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006548:	f000 fb94 	bl	8006c74 <__assert_func>
 800654c:	3101      	adds	r1, #1
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	e7ee      	b.n	8006530 <__lshift+0x1c>
 8006552:	2300      	movs	r3, #0
 8006554:	f100 0114 	add.w	r1, r0, #20
 8006558:	f100 0210 	add.w	r2, r0, #16
 800655c:	4618      	mov	r0, r3
 800655e:	4553      	cmp	r3, sl
 8006560:	db33      	blt.n	80065ca <__lshift+0xb6>
 8006562:	6920      	ldr	r0, [r4, #16]
 8006564:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006568:	f104 0314 	add.w	r3, r4, #20
 800656c:	f019 091f 	ands.w	r9, r9, #31
 8006570:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006574:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006578:	d02b      	beq.n	80065d2 <__lshift+0xbe>
 800657a:	f1c9 0e20 	rsb	lr, r9, #32
 800657e:	468a      	mov	sl, r1
 8006580:	2200      	movs	r2, #0
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	fa00 f009 	lsl.w	r0, r0, r9
 8006588:	4310      	orrs	r0, r2
 800658a:	f84a 0b04 	str.w	r0, [sl], #4
 800658e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006592:	459c      	cmp	ip, r3
 8006594:	fa22 f20e 	lsr.w	r2, r2, lr
 8006598:	d8f3      	bhi.n	8006582 <__lshift+0x6e>
 800659a:	ebac 0304 	sub.w	r3, ip, r4
 800659e:	3b15      	subs	r3, #21
 80065a0:	f023 0303 	bic.w	r3, r3, #3
 80065a4:	3304      	adds	r3, #4
 80065a6:	f104 0015 	add.w	r0, r4, #21
 80065aa:	4584      	cmp	ip, r0
 80065ac:	bf38      	it	cc
 80065ae:	2304      	movcc	r3, #4
 80065b0:	50ca      	str	r2, [r1, r3]
 80065b2:	b10a      	cbz	r2, 80065b8 <__lshift+0xa4>
 80065b4:	f108 0602 	add.w	r6, r8, #2
 80065b8:	3e01      	subs	r6, #1
 80065ba:	4638      	mov	r0, r7
 80065bc:	612e      	str	r6, [r5, #16]
 80065be:	4621      	mov	r1, r4
 80065c0:	f7ff fdda 	bl	8006178 <_Bfree>
 80065c4:	4628      	mov	r0, r5
 80065c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80065ce:	3301      	adds	r3, #1
 80065d0:	e7c5      	b.n	800655e <__lshift+0x4a>
 80065d2:	3904      	subs	r1, #4
 80065d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80065dc:	459c      	cmp	ip, r3
 80065de:	d8f9      	bhi.n	80065d4 <__lshift+0xc0>
 80065e0:	e7ea      	b.n	80065b8 <__lshift+0xa4>
 80065e2:	bf00      	nop
 80065e4:	08007414 	.word	0x08007414
 80065e8:	08007425 	.word	0x08007425

080065ec <__mcmp>:
 80065ec:	690a      	ldr	r2, [r1, #16]
 80065ee:	4603      	mov	r3, r0
 80065f0:	6900      	ldr	r0, [r0, #16]
 80065f2:	1a80      	subs	r0, r0, r2
 80065f4:	b530      	push	{r4, r5, lr}
 80065f6:	d10e      	bne.n	8006616 <__mcmp+0x2a>
 80065f8:	3314      	adds	r3, #20
 80065fa:	3114      	adds	r1, #20
 80065fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006600:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006604:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006608:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800660c:	4295      	cmp	r5, r2
 800660e:	d003      	beq.n	8006618 <__mcmp+0x2c>
 8006610:	d205      	bcs.n	800661e <__mcmp+0x32>
 8006612:	f04f 30ff 	mov.w	r0, #4294967295
 8006616:	bd30      	pop	{r4, r5, pc}
 8006618:	42a3      	cmp	r3, r4
 800661a:	d3f3      	bcc.n	8006604 <__mcmp+0x18>
 800661c:	e7fb      	b.n	8006616 <__mcmp+0x2a>
 800661e:	2001      	movs	r0, #1
 8006620:	e7f9      	b.n	8006616 <__mcmp+0x2a>
	...

08006624 <__mdiff>:
 8006624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	4689      	mov	r9, r1
 800662a:	4606      	mov	r6, r0
 800662c:	4611      	mov	r1, r2
 800662e:	4648      	mov	r0, r9
 8006630:	4614      	mov	r4, r2
 8006632:	f7ff ffdb 	bl	80065ec <__mcmp>
 8006636:	1e05      	subs	r5, r0, #0
 8006638:	d112      	bne.n	8006660 <__mdiff+0x3c>
 800663a:	4629      	mov	r1, r5
 800663c:	4630      	mov	r0, r6
 800663e:	f7ff fd5b 	bl	80060f8 <_Balloc>
 8006642:	4602      	mov	r2, r0
 8006644:	b928      	cbnz	r0, 8006652 <__mdiff+0x2e>
 8006646:	4b3f      	ldr	r3, [pc, #252]	@ (8006744 <__mdiff+0x120>)
 8006648:	f240 2137 	movw	r1, #567	@ 0x237
 800664c:	483e      	ldr	r0, [pc, #248]	@ (8006748 <__mdiff+0x124>)
 800664e:	f000 fb11 	bl	8006c74 <__assert_func>
 8006652:	2301      	movs	r3, #1
 8006654:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006658:	4610      	mov	r0, r2
 800665a:	b003      	add	sp, #12
 800665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006660:	bfbc      	itt	lt
 8006662:	464b      	movlt	r3, r9
 8006664:	46a1      	movlt	r9, r4
 8006666:	4630      	mov	r0, r6
 8006668:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800666c:	bfba      	itte	lt
 800666e:	461c      	movlt	r4, r3
 8006670:	2501      	movlt	r5, #1
 8006672:	2500      	movge	r5, #0
 8006674:	f7ff fd40 	bl	80060f8 <_Balloc>
 8006678:	4602      	mov	r2, r0
 800667a:	b918      	cbnz	r0, 8006684 <__mdiff+0x60>
 800667c:	4b31      	ldr	r3, [pc, #196]	@ (8006744 <__mdiff+0x120>)
 800667e:	f240 2145 	movw	r1, #581	@ 0x245
 8006682:	e7e3      	b.n	800664c <__mdiff+0x28>
 8006684:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006688:	6926      	ldr	r6, [r4, #16]
 800668a:	60c5      	str	r5, [r0, #12]
 800668c:	f109 0310 	add.w	r3, r9, #16
 8006690:	f109 0514 	add.w	r5, r9, #20
 8006694:	f104 0e14 	add.w	lr, r4, #20
 8006698:	f100 0b14 	add.w	fp, r0, #20
 800669c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80066a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	46d9      	mov	r9, fp
 80066a8:	f04f 0c00 	mov.w	ip, #0
 80066ac:	9b01      	ldr	r3, [sp, #4]
 80066ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80066b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	fa1f f38a 	uxth.w	r3, sl
 80066bc:	4619      	mov	r1, r3
 80066be:	b283      	uxth	r3, r0
 80066c0:	1acb      	subs	r3, r1, r3
 80066c2:	0c00      	lsrs	r0, r0, #16
 80066c4:	4463      	add	r3, ip
 80066c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80066ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80066d4:	4576      	cmp	r6, lr
 80066d6:	f849 3b04 	str.w	r3, [r9], #4
 80066da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80066de:	d8e5      	bhi.n	80066ac <__mdiff+0x88>
 80066e0:	1b33      	subs	r3, r6, r4
 80066e2:	3b15      	subs	r3, #21
 80066e4:	f023 0303 	bic.w	r3, r3, #3
 80066e8:	3415      	adds	r4, #21
 80066ea:	3304      	adds	r3, #4
 80066ec:	42a6      	cmp	r6, r4
 80066ee:	bf38      	it	cc
 80066f0:	2304      	movcc	r3, #4
 80066f2:	441d      	add	r5, r3
 80066f4:	445b      	add	r3, fp
 80066f6:	461e      	mov	r6, r3
 80066f8:	462c      	mov	r4, r5
 80066fa:	4544      	cmp	r4, r8
 80066fc:	d30e      	bcc.n	800671c <__mdiff+0xf8>
 80066fe:	f108 0103 	add.w	r1, r8, #3
 8006702:	1b49      	subs	r1, r1, r5
 8006704:	f021 0103 	bic.w	r1, r1, #3
 8006708:	3d03      	subs	r5, #3
 800670a:	45a8      	cmp	r8, r5
 800670c:	bf38      	it	cc
 800670e:	2100      	movcc	r1, #0
 8006710:	440b      	add	r3, r1
 8006712:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006716:	b191      	cbz	r1, 800673e <__mdiff+0x11a>
 8006718:	6117      	str	r7, [r2, #16]
 800671a:	e79d      	b.n	8006658 <__mdiff+0x34>
 800671c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006720:	46e6      	mov	lr, ip
 8006722:	0c08      	lsrs	r0, r1, #16
 8006724:	fa1c fc81 	uxtah	ip, ip, r1
 8006728:	4471      	add	r1, lr
 800672a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800672e:	b289      	uxth	r1, r1
 8006730:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006734:	f846 1b04 	str.w	r1, [r6], #4
 8006738:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800673c:	e7dd      	b.n	80066fa <__mdiff+0xd6>
 800673e:	3f01      	subs	r7, #1
 8006740:	e7e7      	b.n	8006712 <__mdiff+0xee>
 8006742:	bf00      	nop
 8006744:	08007414 	.word	0x08007414
 8006748:	08007425 	.word	0x08007425

0800674c <__d2b>:
 800674c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006750:	460f      	mov	r7, r1
 8006752:	2101      	movs	r1, #1
 8006754:	ec59 8b10 	vmov	r8, r9, d0
 8006758:	4616      	mov	r6, r2
 800675a:	f7ff fccd 	bl	80060f8 <_Balloc>
 800675e:	4604      	mov	r4, r0
 8006760:	b930      	cbnz	r0, 8006770 <__d2b+0x24>
 8006762:	4602      	mov	r2, r0
 8006764:	4b23      	ldr	r3, [pc, #140]	@ (80067f4 <__d2b+0xa8>)
 8006766:	4824      	ldr	r0, [pc, #144]	@ (80067f8 <__d2b+0xac>)
 8006768:	f240 310f 	movw	r1, #783	@ 0x30f
 800676c:	f000 fa82 	bl	8006c74 <__assert_func>
 8006770:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006774:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006778:	b10d      	cbz	r5, 800677e <__d2b+0x32>
 800677a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800677e:	9301      	str	r3, [sp, #4]
 8006780:	f1b8 0300 	subs.w	r3, r8, #0
 8006784:	d023      	beq.n	80067ce <__d2b+0x82>
 8006786:	4668      	mov	r0, sp
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	f7ff fd7c 	bl	8006286 <__lo0bits>
 800678e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006792:	b1d0      	cbz	r0, 80067ca <__d2b+0x7e>
 8006794:	f1c0 0320 	rsb	r3, r0, #32
 8006798:	fa02 f303 	lsl.w	r3, r2, r3
 800679c:	430b      	orrs	r3, r1
 800679e:	40c2      	lsrs	r2, r0
 80067a0:	6163      	str	r3, [r4, #20]
 80067a2:	9201      	str	r2, [sp, #4]
 80067a4:	9b01      	ldr	r3, [sp, #4]
 80067a6:	61a3      	str	r3, [r4, #24]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bf0c      	ite	eq
 80067ac:	2201      	moveq	r2, #1
 80067ae:	2202      	movne	r2, #2
 80067b0:	6122      	str	r2, [r4, #16]
 80067b2:	b1a5      	cbz	r5, 80067de <__d2b+0x92>
 80067b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80067b8:	4405      	add	r5, r0
 80067ba:	603d      	str	r5, [r7, #0]
 80067bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80067c0:	6030      	str	r0, [r6, #0]
 80067c2:	4620      	mov	r0, r4
 80067c4:	b003      	add	sp, #12
 80067c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067ca:	6161      	str	r1, [r4, #20]
 80067cc:	e7ea      	b.n	80067a4 <__d2b+0x58>
 80067ce:	a801      	add	r0, sp, #4
 80067d0:	f7ff fd59 	bl	8006286 <__lo0bits>
 80067d4:	9b01      	ldr	r3, [sp, #4]
 80067d6:	6163      	str	r3, [r4, #20]
 80067d8:	3020      	adds	r0, #32
 80067da:	2201      	movs	r2, #1
 80067dc:	e7e8      	b.n	80067b0 <__d2b+0x64>
 80067de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80067e6:	6038      	str	r0, [r7, #0]
 80067e8:	6918      	ldr	r0, [r3, #16]
 80067ea:	f7ff fd2d 	bl	8006248 <__hi0bits>
 80067ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067f2:	e7e5      	b.n	80067c0 <__d2b+0x74>
 80067f4:	08007414 	.word	0x08007414
 80067f8:	08007425 	.word	0x08007425

080067fc <__ssputs_r>:
 80067fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006800:	688e      	ldr	r6, [r1, #8]
 8006802:	461f      	mov	r7, r3
 8006804:	42be      	cmp	r6, r7
 8006806:	680b      	ldr	r3, [r1, #0]
 8006808:	4682      	mov	sl, r0
 800680a:	460c      	mov	r4, r1
 800680c:	4690      	mov	r8, r2
 800680e:	d82d      	bhi.n	800686c <__ssputs_r+0x70>
 8006810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006814:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006818:	d026      	beq.n	8006868 <__ssputs_r+0x6c>
 800681a:	6965      	ldr	r5, [r4, #20]
 800681c:	6909      	ldr	r1, [r1, #16]
 800681e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006822:	eba3 0901 	sub.w	r9, r3, r1
 8006826:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800682a:	1c7b      	adds	r3, r7, #1
 800682c:	444b      	add	r3, r9
 800682e:	106d      	asrs	r5, r5, #1
 8006830:	429d      	cmp	r5, r3
 8006832:	bf38      	it	cc
 8006834:	461d      	movcc	r5, r3
 8006836:	0553      	lsls	r3, r2, #21
 8006838:	d527      	bpl.n	800688a <__ssputs_r+0x8e>
 800683a:	4629      	mov	r1, r5
 800683c:	f7ff fbd0 	bl	8005fe0 <_malloc_r>
 8006840:	4606      	mov	r6, r0
 8006842:	b360      	cbz	r0, 800689e <__ssputs_r+0xa2>
 8006844:	6921      	ldr	r1, [r4, #16]
 8006846:	464a      	mov	r2, r9
 8006848:	f000 fa06 	bl	8006c58 <memcpy>
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006856:	81a3      	strh	r3, [r4, #12]
 8006858:	6126      	str	r6, [r4, #16]
 800685a:	6165      	str	r5, [r4, #20]
 800685c:	444e      	add	r6, r9
 800685e:	eba5 0509 	sub.w	r5, r5, r9
 8006862:	6026      	str	r6, [r4, #0]
 8006864:	60a5      	str	r5, [r4, #8]
 8006866:	463e      	mov	r6, r7
 8006868:	42be      	cmp	r6, r7
 800686a:	d900      	bls.n	800686e <__ssputs_r+0x72>
 800686c:	463e      	mov	r6, r7
 800686e:	6820      	ldr	r0, [r4, #0]
 8006870:	4632      	mov	r2, r6
 8006872:	4641      	mov	r1, r8
 8006874:	f000 f9c6 	bl	8006c04 <memmove>
 8006878:	68a3      	ldr	r3, [r4, #8]
 800687a:	1b9b      	subs	r3, r3, r6
 800687c:	60a3      	str	r3, [r4, #8]
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	4433      	add	r3, r6
 8006882:	6023      	str	r3, [r4, #0]
 8006884:	2000      	movs	r0, #0
 8006886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688a:	462a      	mov	r2, r5
 800688c:	f000 fa36 	bl	8006cfc <_realloc_r>
 8006890:	4606      	mov	r6, r0
 8006892:	2800      	cmp	r0, #0
 8006894:	d1e0      	bne.n	8006858 <__ssputs_r+0x5c>
 8006896:	6921      	ldr	r1, [r4, #16]
 8006898:	4650      	mov	r0, sl
 800689a:	f7ff fb2d 	bl	8005ef8 <_free_r>
 800689e:	230c      	movs	r3, #12
 80068a0:	f8ca 3000 	str.w	r3, [sl]
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068aa:	81a3      	strh	r3, [r4, #12]
 80068ac:	f04f 30ff 	mov.w	r0, #4294967295
 80068b0:	e7e9      	b.n	8006886 <__ssputs_r+0x8a>
	...

080068b4 <_svfiprintf_r>:
 80068b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b8:	4698      	mov	r8, r3
 80068ba:	898b      	ldrh	r3, [r1, #12]
 80068bc:	061b      	lsls	r3, r3, #24
 80068be:	b09d      	sub	sp, #116	@ 0x74
 80068c0:	4607      	mov	r7, r0
 80068c2:	460d      	mov	r5, r1
 80068c4:	4614      	mov	r4, r2
 80068c6:	d510      	bpl.n	80068ea <_svfiprintf_r+0x36>
 80068c8:	690b      	ldr	r3, [r1, #16]
 80068ca:	b973      	cbnz	r3, 80068ea <_svfiprintf_r+0x36>
 80068cc:	2140      	movs	r1, #64	@ 0x40
 80068ce:	f7ff fb87 	bl	8005fe0 <_malloc_r>
 80068d2:	6028      	str	r0, [r5, #0]
 80068d4:	6128      	str	r0, [r5, #16]
 80068d6:	b930      	cbnz	r0, 80068e6 <_svfiprintf_r+0x32>
 80068d8:	230c      	movs	r3, #12
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295
 80068e0:	b01d      	add	sp, #116	@ 0x74
 80068e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e6:	2340      	movs	r3, #64	@ 0x40
 80068e8:	616b      	str	r3, [r5, #20]
 80068ea:	2300      	movs	r3, #0
 80068ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80068ee:	2320      	movs	r3, #32
 80068f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80068f8:	2330      	movs	r3, #48	@ 0x30
 80068fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006a98 <_svfiprintf_r+0x1e4>
 80068fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006902:	f04f 0901 	mov.w	r9, #1
 8006906:	4623      	mov	r3, r4
 8006908:	469a      	mov	sl, r3
 800690a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800690e:	b10a      	cbz	r2, 8006914 <_svfiprintf_r+0x60>
 8006910:	2a25      	cmp	r2, #37	@ 0x25
 8006912:	d1f9      	bne.n	8006908 <_svfiprintf_r+0x54>
 8006914:	ebba 0b04 	subs.w	fp, sl, r4
 8006918:	d00b      	beq.n	8006932 <_svfiprintf_r+0x7e>
 800691a:	465b      	mov	r3, fp
 800691c:	4622      	mov	r2, r4
 800691e:	4629      	mov	r1, r5
 8006920:	4638      	mov	r0, r7
 8006922:	f7ff ff6b 	bl	80067fc <__ssputs_r>
 8006926:	3001      	adds	r0, #1
 8006928:	f000 80a7 	beq.w	8006a7a <_svfiprintf_r+0x1c6>
 800692c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800692e:	445a      	add	r2, fp
 8006930:	9209      	str	r2, [sp, #36]	@ 0x24
 8006932:	f89a 3000 	ldrb.w	r3, [sl]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 809f 	beq.w	8006a7a <_svfiprintf_r+0x1c6>
 800693c:	2300      	movs	r3, #0
 800693e:	f04f 32ff 	mov.w	r2, #4294967295
 8006942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006946:	f10a 0a01 	add.w	sl, sl, #1
 800694a:	9304      	str	r3, [sp, #16]
 800694c:	9307      	str	r3, [sp, #28]
 800694e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006952:	931a      	str	r3, [sp, #104]	@ 0x68
 8006954:	4654      	mov	r4, sl
 8006956:	2205      	movs	r2, #5
 8006958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800695c:	484e      	ldr	r0, [pc, #312]	@ (8006a98 <_svfiprintf_r+0x1e4>)
 800695e:	f7f9 fc37 	bl	80001d0 <memchr>
 8006962:	9a04      	ldr	r2, [sp, #16]
 8006964:	b9d8      	cbnz	r0, 800699e <_svfiprintf_r+0xea>
 8006966:	06d0      	lsls	r0, r2, #27
 8006968:	bf44      	itt	mi
 800696a:	2320      	movmi	r3, #32
 800696c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006970:	0711      	lsls	r1, r2, #28
 8006972:	bf44      	itt	mi
 8006974:	232b      	movmi	r3, #43	@ 0x2b
 8006976:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800697a:	f89a 3000 	ldrb.w	r3, [sl]
 800697e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006980:	d015      	beq.n	80069ae <_svfiprintf_r+0xfa>
 8006982:	9a07      	ldr	r2, [sp, #28]
 8006984:	4654      	mov	r4, sl
 8006986:	2000      	movs	r0, #0
 8006988:	f04f 0c0a 	mov.w	ip, #10
 800698c:	4621      	mov	r1, r4
 800698e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006992:	3b30      	subs	r3, #48	@ 0x30
 8006994:	2b09      	cmp	r3, #9
 8006996:	d94b      	bls.n	8006a30 <_svfiprintf_r+0x17c>
 8006998:	b1b0      	cbz	r0, 80069c8 <_svfiprintf_r+0x114>
 800699a:	9207      	str	r2, [sp, #28]
 800699c:	e014      	b.n	80069c8 <_svfiprintf_r+0x114>
 800699e:	eba0 0308 	sub.w	r3, r0, r8
 80069a2:	fa09 f303 	lsl.w	r3, r9, r3
 80069a6:	4313      	orrs	r3, r2
 80069a8:	9304      	str	r3, [sp, #16]
 80069aa:	46a2      	mov	sl, r4
 80069ac:	e7d2      	b.n	8006954 <_svfiprintf_r+0xa0>
 80069ae:	9b03      	ldr	r3, [sp, #12]
 80069b0:	1d19      	adds	r1, r3, #4
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	9103      	str	r1, [sp, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	bfbb      	ittet	lt
 80069ba:	425b      	neglt	r3, r3
 80069bc:	f042 0202 	orrlt.w	r2, r2, #2
 80069c0:	9307      	strge	r3, [sp, #28]
 80069c2:	9307      	strlt	r3, [sp, #28]
 80069c4:	bfb8      	it	lt
 80069c6:	9204      	strlt	r2, [sp, #16]
 80069c8:	7823      	ldrb	r3, [r4, #0]
 80069ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80069cc:	d10a      	bne.n	80069e4 <_svfiprintf_r+0x130>
 80069ce:	7863      	ldrb	r3, [r4, #1]
 80069d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80069d2:	d132      	bne.n	8006a3a <_svfiprintf_r+0x186>
 80069d4:	9b03      	ldr	r3, [sp, #12]
 80069d6:	1d1a      	adds	r2, r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	9203      	str	r2, [sp, #12]
 80069dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069e0:	3402      	adds	r4, #2
 80069e2:	9305      	str	r3, [sp, #20]
 80069e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006aa8 <_svfiprintf_r+0x1f4>
 80069e8:	7821      	ldrb	r1, [r4, #0]
 80069ea:	2203      	movs	r2, #3
 80069ec:	4650      	mov	r0, sl
 80069ee:	f7f9 fbef 	bl	80001d0 <memchr>
 80069f2:	b138      	cbz	r0, 8006a04 <_svfiprintf_r+0x150>
 80069f4:	9b04      	ldr	r3, [sp, #16]
 80069f6:	eba0 000a 	sub.w	r0, r0, sl
 80069fa:	2240      	movs	r2, #64	@ 0x40
 80069fc:	4082      	lsls	r2, r0
 80069fe:	4313      	orrs	r3, r2
 8006a00:	3401      	adds	r4, #1
 8006a02:	9304      	str	r3, [sp, #16]
 8006a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a08:	4824      	ldr	r0, [pc, #144]	@ (8006a9c <_svfiprintf_r+0x1e8>)
 8006a0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a0e:	2206      	movs	r2, #6
 8006a10:	f7f9 fbde 	bl	80001d0 <memchr>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d036      	beq.n	8006a86 <_svfiprintf_r+0x1d2>
 8006a18:	4b21      	ldr	r3, [pc, #132]	@ (8006aa0 <_svfiprintf_r+0x1ec>)
 8006a1a:	bb1b      	cbnz	r3, 8006a64 <_svfiprintf_r+0x1b0>
 8006a1c:	9b03      	ldr	r3, [sp, #12]
 8006a1e:	3307      	adds	r3, #7
 8006a20:	f023 0307 	bic.w	r3, r3, #7
 8006a24:	3308      	adds	r3, #8
 8006a26:	9303      	str	r3, [sp, #12]
 8006a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a2a:	4433      	add	r3, r6
 8006a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a2e:	e76a      	b.n	8006906 <_svfiprintf_r+0x52>
 8006a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a34:	460c      	mov	r4, r1
 8006a36:	2001      	movs	r0, #1
 8006a38:	e7a8      	b.n	800698c <_svfiprintf_r+0xd8>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	3401      	adds	r4, #1
 8006a3e:	9305      	str	r3, [sp, #20]
 8006a40:	4619      	mov	r1, r3
 8006a42:	f04f 0c0a 	mov.w	ip, #10
 8006a46:	4620      	mov	r0, r4
 8006a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a4c:	3a30      	subs	r2, #48	@ 0x30
 8006a4e:	2a09      	cmp	r2, #9
 8006a50:	d903      	bls.n	8006a5a <_svfiprintf_r+0x1a6>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0c6      	beq.n	80069e4 <_svfiprintf_r+0x130>
 8006a56:	9105      	str	r1, [sp, #20]
 8006a58:	e7c4      	b.n	80069e4 <_svfiprintf_r+0x130>
 8006a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a5e:	4604      	mov	r4, r0
 8006a60:	2301      	movs	r3, #1
 8006a62:	e7f0      	b.n	8006a46 <_svfiprintf_r+0x192>
 8006a64:	ab03      	add	r3, sp, #12
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	462a      	mov	r2, r5
 8006a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006aa4 <_svfiprintf_r+0x1f0>)
 8006a6c:	a904      	add	r1, sp, #16
 8006a6e:	4638      	mov	r0, r7
 8006a70:	f7fd fe96 	bl	80047a0 <_printf_float>
 8006a74:	1c42      	adds	r2, r0, #1
 8006a76:	4606      	mov	r6, r0
 8006a78:	d1d6      	bne.n	8006a28 <_svfiprintf_r+0x174>
 8006a7a:	89ab      	ldrh	r3, [r5, #12]
 8006a7c:	065b      	lsls	r3, r3, #25
 8006a7e:	f53f af2d 	bmi.w	80068dc <_svfiprintf_r+0x28>
 8006a82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a84:	e72c      	b.n	80068e0 <_svfiprintf_r+0x2c>
 8006a86:	ab03      	add	r3, sp, #12
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	462a      	mov	r2, r5
 8006a8c:	4b05      	ldr	r3, [pc, #20]	@ (8006aa4 <_svfiprintf_r+0x1f0>)
 8006a8e:	a904      	add	r1, sp, #16
 8006a90:	4638      	mov	r0, r7
 8006a92:	f7fe f91d 	bl	8004cd0 <_printf_i>
 8006a96:	e7ed      	b.n	8006a74 <_svfiprintf_r+0x1c0>
 8006a98:	08007580 	.word	0x08007580
 8006a9c:	0800758a 	.word	0x0800758a
 8006aa0:	080047a1 	.word	0x080047a1
 8006aa4:	080067fd 	.word	0x080067fd
 8006aa8:	08007586 	.word	0x08007586

08006aac <__sflush_r>:
 8006aac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab4:	0716      	lsls	r6, r2, #28
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	460c      	mov	r4, r1
 8006aba:	d454      	bmi.n	8006b66 <__sflush_r+0xba>
 8006abc:	684b      	ldr	r3, [r1, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	dc02      	bgt.n	8006ac8 <__sflush_r+0x1c>
 8006ac2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	dd48      	ble.n	8006b5a <__sflush_r+0xae>
 8006ac8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006aca:	2e00      	cmp	r6, #0
 8006acc:	d045      	beq.n	8006b5a <__sflush_r+0xae>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ad4:	682f      	ldr	r7, [r5, #0]
 8006ad6:	6a21      	ldr	r1, [r4, #32]
 8006ad8:	602b      	str	r3, [r5, #0]
 8006ada:	d030      	beq.n	8006b3e <__sflush_r+0x92>
 8006adc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	0759      	lsls	r1, r3, #29
 8006ae2:	d505      	bpl.n	8006af0 <__sflush_r+0x44>
 8006ae4:	6863      	ldr	r3, [r4, #4]
 8006ae6:	1ad2      	subs	r2, r2, r3
 8006ae8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006aea:	b10b      	cbz	r3, 8006af0 <__sflush_r+0x44>
 8006aec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006aee:	1ad2      	subs	r2, r2, r3
 8006af0:	2300      	movs	r3, #0
 8006af2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006af4:	6a21      	ldr	r1, [r4, #32]
 8006af6:	4628      	mov	r0, r5
 8006af8:	47b0      	blx	r6
 8006afa:	1c43      	adds	r3, r0, #1
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	d106      	bne.n	8006b0e <__sflush_r+0x62>
 8006b00:	6829      	ldr	r1, [r5, #0]
 8006b02:	291d      	cmp	r1, #29
 8006b04:	d82b      	bhi.n	8006b5e <__sflush_r+0xb2>
 8006b06:	4a2a      	ldr	r2, [pc, #168]	@ (8006bb0 <__sflush_r+0x104>)
 8006b08:	410a      	asrs	r2, r1
 8006b0a:	07d6      	lsls	r6, r2, #31
 8006b0c:	d427      	bmi.n	8006b5e <__sflush_r+0xb2>
 8006b0e:	2200      	movs	r2, #0
 8006b10:	6062      	str	r2, [r4, #4]
 8006b12:	04d9      	lsls	r1, r3, #19
 8006b14:	6922      	ldr	r2, [r4, #16]
 8006b16:	6022      	str	r2, [r4, #0]
 8006b18:	d504      	bpl.n	8006b24 <__sflush_r+0x78>
 8006b1a:	1c42      	adds	r2, r0, #1
 8006b1c:	d101      	bne.n	8006b22 <__sflush_r+0x76>
 8006b1e:	682b      	ldr	r3, [r5, #0]
 8006b20:	b903      	cbnz	r3, 8006b24 <__sflush_r+0x78>
 8006b22:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b26:	602f      	str	r7, [r5, #0]
 8006b28:	b1b9      	cbz	r1, 8006b5a <__sflush_r+0xae>
 8006b2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b2e:	4299      	cmp	r1, r3
 8006b30:	d002      	beq.n	8006b38 <__sflush_r+0x8c>
 8006b32:	4628      	mov	r0, r5
 8006b34:	f7ff f9e0 	bl	8005ef8 <_free_r>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b3c:	e00d      	b.n	8006b5a <__sflush_r+0xae>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	4628      	mov	r0, r5
 8006b42:	47b0      	blx	r6
 8006b44:	4602      	mov	r2, r0
 8006b46:	1c50      	adds	r0, r2, #1
 8006b48:	d1c9      	bne.n	8006ade <__sflush_r+0x32>
 8006b4a:	682b      	ldr	r3, [r5, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d0c6      	beq.n	8006ade <__sflush_r+0x32>
 8006b50:	2b1d      	cmp	r3, #29
 8006b52:	d001      	beq.n	8006b58 <__sflush_r+0xac>
 8006b54:	2b16      	cmp	r3, #22
 8006b56:	d11e      	bne.n	8006b96 <__sflush_r+0xea>
 8006b58:	602f      	str	r7, [r5, #0]
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	e022      	b.n	8006ba4 <__sflush_r+0xf8>
 8006b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b62:	b21b      	sxth	r3, r3
 8006b64:	e01b      	b.n	8006b9e <__sflush_r+0xf2>
 8006b66:	690f      	ldr	r7, [r1, #16]
 8006b68:	2f00      	cmp	r7, #0
 8006b6a:	d0f6      	beq.n	8006b5a <__sflush_r+0xae>
 8006b6c:	0793      	lsls	r3, r2, #30
 8006b6e:	680e      	ldr	r6, [r1, #0]
 8006b70:	bf08      	it	eq
 8006b72:	694b      	ldreq	r3, [r1, #20]
 8006b74:	600f      	str	r7, [r1, #0]
 8006b76:	bf18      	it	ne
 8006b78:	2300      	movne	r3, #0
 8006b7a:	eba6 0807 	sub.w	r8, r6, r7
 8006b7e:	608b      	str	r3, [r1, #8]
 8006b80:	f1b8 0f00 	cmp.w	r8, #0
 8006b84:	dde9      	ble.n	8006b5a <__sflush_r+0xae>
 8006b86:	6a21      	ldr	r1, [r4, #32]
 8006b88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006b8a:	4643      	mov	r3, r8
 8006b8c:	463a      	mov	r2, r7
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b0      	blx	r6
 8006b92:	2800      	cmp	r0, #0
 8006b94:	dc08      	bgt.n	8006ba8 <__sflush_r+0xfc>
 8006b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b9e:	81a3      	strh	r3, [r4, #12]
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ba8:	4407      	add	r7, r0
 8006baa:	eba8 0800 	sub.w	r8, r8, r0
 8006bae:	e7e7      	b.n	8006b80 <__sflush_r+0xd4>
 8006bb0:	dfbffffe 	.word	0xdfbffffe

08006bb4 <_fflush_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	690b      	ldr	r3, [r1, #16]
 8006bb8:	4605      	mov	r5, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	b913      	cbnz	r3, 8006bc4 <_fflush_r+0x10>
 8006bbe:	2500      	movs	r5, #0
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	b118      	cbz	r0, 8006bce <_fflush_r+0x1a>
 8006bc6:	6a03      	ldr	r3, [r0, #32]
 8006bc8:	b90b      	cbnz	r3, 8006bce <_fflush_r+0x1a>
 8006bca:	f7fe fa2d 	bl	8005028 <__sinit>
 8006bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0f3      	beq.n	8006bbe <_fflush_r+0xa>
 8006bd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006bd8:	07d0      	lsls	r0, r2, #31
 8006bda:	d404      	bmi.n	8006be6 <_fflush_r+0x32>
 8006bdc:	0599      	lsls	r1, r3, #22
 8006bde:	d402      	bmi.n	8006be6 <_fflush_r+0x32>
 8006be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006be2:	f7fe fb38 	bl	8005256 <__retarget_lock_acquire_recursive>
 8006be6:	4628      	mov	r0, r5
 8006be8:	4621      	mov	r1, r4
 8006bea:	f7ff ff5f 	bl	8006aac <__sflush_r>
 8006bee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bf0:	07da      	lsls	r2, r3, #31
 8006bf2:	4605      	mov	r5, r0
 8006bf4:	d4e4      	bmi.n	8006bc0 <_fflush_r+0xc>
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	059b      	lsls	r3, r3, #22
 8006bfa:	d4e1      	bmi.n	8006bc0 <_fflush_r+0xc>
 8006bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bfe:	f7fe fb2b 	bl	8005258 <__retarget_lock_release_recursive>
 8006c02:	e7dd      	b.n	8006bc0 <_fflush_r+0xc>

08006c04 <memmove>:
 8006c04:	4288      	cmp	r0, r1
 8006c06:	b510      	push	{r4, lr}
 8006c08:	eb01 0402 	add.w	r4, r1, r2
 8006c0c:	d902      	bls.n	8006c14 <memmove+0x10>
 8006c0e:	4284      	cmp	r4, r0
 8006c10:	4623      	mov	r3, r4
 8006c12:	d807      	bhi.n	8006c24 <memmove+0x20>
 8006c14:	1e43      	subs	r3, r0, #1
 8006c16:	42a1      	cmp	r1, r4
 8006c18:	d008      	beq.n	8006c2c <memmove+0x28>
 8006c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c22:	e7f8      	b.n	8006c16 <memmove+0x12>
 8006c24:	4402      	add	r2, r0
 8006c26:	4601      	mov	r1, r0
 8006c28:	428a      	cmp	r2, r1
 8006c2a:	d100      	bne.n	8006c2e <memmove+0x2a>
 8006c2c:	bd10      	pop	{r4, pc}
 8006c2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c36:	e7f7      	b.n	8006c28 <memmove+0x24>

08006c38 <_sbrk_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4d06      	ldr	r5, [pc, #24]	@ (8006c54 <_sbrk_r+0x1c>)
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	4604      	mov	r4, r0
 8006c40:	4608      	mov	r0, r1
 8006c42:	602b      	str	r3, [r5, #0]
 8006c44:	f7fa fb36 	bl	80012b4 <_sbrk>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	d102      	bne.n	8006c52 <_sbrk_r+0x1a>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	b103      	cbz	r3, 8006c52 <_sbrk_r+0x1a>
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	2000045c 	.word	0x2000045c

08006c58 <memcpy>:
 8006c58:	440a      	add	r2, r1
 8006c5a:	4291      	cmp	r1, r2
 8006c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c60:	d100      	bne.n	8006c64 <memcpy+0xc>
 8006c62:	4770      	bx	lr
 8006c64:	b510      	push	{r4, lr}
 8006c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c6e:	4291      	cmp	r1, r2
 8006c70:	d1f9      	bne.n	8006c66 <memcpy+0xe>
 8006c72:	bd10      	pop	{r4, pc}

08006c74 <__assert_func>:
 8006c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c76:	4614      	mov	r4, r2
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ca0 <__assert_func+0x2c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4605      	mov	r5, r0
 8006c80:	68d8      	ldr	r0, [r3, #12]
 8006c82:	b954      	cbnz	r4, 8006c9a <__assert_func+0x26>
 8006c84:	4b07      	ldr	r3, [pc, #28]	@ (8006ca4 <__assert_func+0x30>)
 8006c86:	461c      	mov	r4, r3
 8006c88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c8c:	9100      	str	r1, [sp, #0]
 8006c8e:	462b      	mov	r3, r5
 8006c90:	4905      	ldr	r1, [pc, #20]	@ (8006ca8 <__assert_func+0x34>)
 8006c92:	f000 f86f 	bl	8006d74 <fiprintf>
 8006c96:	f000 f87f 	bl	8006d98 <abort>
 8006c9a:	4b04      	ldr	r3, [pc, #16]	@ (8006cac <__assert_func+0x38>)
 8006c9c:	e7f4      	b.n	8006c88 <__assert_func+0x14>
 8006c9e:	bf00      	nop
 8006ca0:	2000001c 	.word	0x2000001c
 8006ca4:	080075d6 	.word	0x080075d6
 8006ca8:	080075a8 	.word	0x080075a8
 8006cac:	0800759b 	.word	0x0800759b

08006cb0 <_calloc_r>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	fba1 5402 	umull	r5, r4, r1, r2
 8006cb6:	b93c      	cbnz	r4, 8006cc8 <_calloc_r+0x18>
 8006cb8:	4629      	mov	r1, r5
 8006cba:	f7ff f991 	bl	8005fe0 <_malloc_r>
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	b928      	cbnz	r0, 8006cce <_calloc_r+0x1e>
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}
 8006cc8:	220c      	movs	r2, #12
 8006cca:	6002      	str	r2, [r0, #0]
 8006ccc:	e7f9      	b.n	8006cc2 <_calloc_r+0x12>
 8006cce:	462a      	mov	r2, r5
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	f7fe fa42 	bl	800515a <memset>
 8006cd6:	e7f5      	b.n	8006cc4 <_calloc_r+0x14>

08006cd8 <__ascii_mbtowc>:
 8006cd8:	b082      	sub	sp, #8
 8006cda:	b901      	cbnz	r1, 8006cde <__ascii_mbtowc+0x6>
 8006cdc:	a901      	add	r1, sp, #4
 8006cde:	b142      	cbz	r2, 8006cf2 <__ascii_mbtowc+0x1a>
 8006ce0:	b14b      	cbz	r3, 8006cf6 <__ascii_mbtowc+0x1e>
 8006ce2:	7813      	ldrb	r3, [r2, #0]
 8006ce4:	600b      	str	r3, [r1, #0]
 8006ce6:	7812      	ldrb	r2, [r2, #0]
 8006ce8:	1e10      	subs	r0, r2, #0
 8006cea:	bf18      	it	ne
 8006cec:	2001      	movne	r0, #1
 8006cee:	b002      	add	sp, #8
 8006cf0:	4770      	bx	lr
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	e7fb      	b.n	8006cee <__ascii_mbtowc+0x16>
 8006cf6:	f06f 0001 	mvn.w	r0, #1
 8006cfa:	e7f8      	b.n	8006cee <__ascii_mbtowc+0x16>

08006cfc <_realloc_r>:
 8006cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d00:	4680      	mov	r8, r0
 8006d02:	4615      	mov	r5, r2
 8006d04:	460c      	mov	r4, r1
 8006d06:	b921      	cbnz	r1, 8006d12 <_realloc_r+0x16>
 8006d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	f7ff b967 	b.w	8005fe0 <_malloc_r>
 8006d12:	b92a      	cbnz	r2, 8006d20 <_realloc_r+0x24>
 8006d14:	f7ff f8f0 	bl	8005ef8 <_free_r>
 8006d18:	2400      	movs	r4, #0
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d20:	f000 f841 	bl	8006da6 <_malloc_usable_size_r>
 8006d24:	4285      	cmp	r5, r0
 8006d26:	4606      	mov	r6, r0
 8006d28:	d802      	bhi.n	8006d30 <_realloc_r+0x34>
 8006d2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006d2e:	d8f4      	bhi.n	8006d1a <_realloc_r+0x1e>
 8006d30:	4629      	mov	r1, r5
 8006d32:	4640      	mov	r0, r8
 8006d34:	f7ff f954 	bl	8005fe0 <_malloc_r>
 8006d38:	4607      	mov	r7, r0
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d0ec      	beq.n	8006d18 <_realloc_r+0x1c>
 8006d3e:	42b5      	cmp	r5, r6
 8006d40:	462a      	mov	r2, r5
 8006d42:	4621      	mov	r1, r4
 8006d44:	bf28      	it	cs
 8006d46:	4632      	movcs	r2, r6
 8006d48:	f7ff ff86 	bl	8006c58 <memcpy>
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	4640      	mov	r0, r8
 8006d50:	f7ff f8d2 	bl	8005ef8 <_free_r>
 8006d54:	463c      	mov	r4, r7
 8006d56:	e7e0      	b.n	8006d1a <_realloc_r+0x1e>

08006d58 <__ascii_wctomb>:
 8006d58:	4603      	mov	r3, r0
 8006d5a:	4608      	mov	r0, r1
 8006d5c:	b141      	cbz	r1, 8006d70 <__ascii_wctomb+0x18>
 8006d5e:	2aff      	cmp	r2, #255	@ 0xff
 8006d60:	d904      	bls.n	8006d6c <__ascii_wctomb+0x14>
 8006d62:	228a      	movs	r2, #138	@ 0x8a
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6a:	4770      	bx	lr
 8006d6c:	700a      	strb	r2, [r1, #0]
 8006d6e:	2001      	movs	r0, #1
 8006d70:	4770      	bx	lr
	...

08006d74 <fiprintf>:
 8006d74:	b40e      	push	{r1, r2, r3}
 8006d76:	b503      	push	{r0, r1, lr}
 8006d78:	4601      	mov	r1, r0
 8006d7a:	ab03      	add	r3, sp, #12
 8006d7c:	4805      	ldr	r0, [pc, #20]	@ (8006d94 <fiprintf+0x20>)
 8006d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d82:	6800      	ldr	r0, [r0, #0]
 8006d84:	9301      	str	r3, [sp, #4]
 8006d86:	f000 f83f 	bl	8006e08 <_vfiprintf_r>
 8006d8a:	b002      	add	sp, #8
 8006d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d90:	b003      	add	sp, #12
 8006d92:	4770      	bx	lr
 8006d94:	2000001c 	.word	0x2000001c

08006d98 <abort>:
 8006d98:	b508      	push	{r3, lr}
 8006d9a:	2006      	movs	r0, #6
 8006d9c:	f000 fa08 	bl	80071b0 <raise>
 8006da0:	2001      	movs	r0, #1
 8006da2:	f7fa fa0f 	bl	80011c4 <_exit>

08006da6 <_malloc_usable_size_r>:
 8006da6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006daa:	1f18      	subs	r0, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	bfbc      	itt	lt
 8006db0:	580b      	ldrlt	r3, [r1, r0]
 8006db2:	18c0      	addlt	r0, r0, r3
 8006db4:	4770      	bx	lr

08006db6 <__sfputc_r>:
 8006db6:	6893      	ldr	r3, [r2, #8]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	b410      	push	{r4}
 8006dbe:	6093      	str	r3, [r2, #8]
 8006dc0:	da08      	bge.n	8006dd4 <__sfputc_r+0x1e>
 8006dc2:	6994      	ldr	r4, [r2, #24]
 8006dc4:	42a3      	cmp	r3, r4
 8006dc6:	db01      	blt.n	8006dcc <__sfputc_r+0x16>
 8006dc8:	290a      	cmp	r1, #10
 8006dca:	d103      	bne.n	8006dd4 <__sfputc_r+0x1e>
 8006dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dd0:	f000 b932 	b.w	8007038 <__swbuf_r>
 8006dd4:	6813      	ldr	r3, [r2, #0]
 8006dd6:	1c58      	adds	r0, r3, #1
 8006dd8:	6010      	str	r0, [r2, #0]
 8006dda:	7019      	strb	r1, [r3, #0]
 8006ddc:	4608      	mov	r0, r1
 8006dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <__sfputs_r>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	4606      	mov	r6, r0
 8006de8:	460f      	mov	r7, r1
 8006dea:	4614      	mov	r4, r2
 8006dec:	18d5      	adds	r5, r2, r3
 8006dee:	42ac      	cmp	r4, r5
 8006df0:	d101      	bne.n	8006df6 <__sfputs_r+0x12>
 8006df2:	2000      	movs	r0, #0
 8006df4:	e007      	b.n	8006e06 <__sfputs_r+0x22>
 8006df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dfa:	463a      	mov	r2, r7
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f7ff ffda 	bl	8006db6 <__sfputc_r>
 8006e02:	1c43      	adds	r3, r0, #1
 8006e04:	d1f3      	bne.n	8006dee <__sfputs_r+0xa>
 8006e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e08 <_vfiprintf_r>:
 8006e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	460d      	mov	r5, r1
 8006e0e:	b09d      	sub	sp, #116	@ 0x74
 8006e10:	4614      	mov	r4, r2
 8006e12:	4698      	mov	r8, r3
 8006e14:	4606      	mov	r6, r0
 8006e16:	b118      	cbz	r0, 8006e20 <_vfiprintf_r+0x18>
 8006e18:	6a03      	ldr	r3, [r0, #32]
 8006e1a:	b90b      	cbnz	r3, 8006e20 <_vfiprintf_r+0x18>
 8006e1c:	f7fe f904 	bl	8005028 <__sinit>
 8006e20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e22:	07d9      	lsls	r1, r3, #31
 8006e24:	d405      	bmi.n	8006e32 <_vfiprintf_r+0x2a>
 8006e26:	89ab      	ldrh	r3, [r5, #12]
 8006e28:	059a      	lsls	r2, r3, #22
 8006e2a:	d402      	bmi.n	8006e32 <_vfiprintf_r+0x2a>
 8006e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e2e:	f7fe fa12 	bl	8005256 <__retarget_lock_acquire_recursive>
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	071b      	lsls	r3, r3, #28
 8006e36:	d501      	bpl.n	8006e3c <_vfiprintf_r+0x34>
 8006e38:	692b      	ldr	r3, [r5, #16]
 8006e3a:	b99b      	cbnz	r3, 8006e64 <_vfiprintf_r+0x5c>
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f000 f938 	bl	80070b4 <__swsetup_r>
 8006e44:	b170      	cbz	r0, 8006e64 <_vfiprintf_r+0x5c>
 8006e46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e48:	07dc      	lsls	r4, r3, #31
 8006e4a:	d504      	bpl.n	8006e56 <_vfiprintf_r+0x4e>
 8006e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e50:	b01d      	add	sp, #116	@ 0x74
 8006e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e56:	89ab      	ldrh	r3, [r5, #12]
 8006e58:	0598      	lsls	r0, r3, #22
 8006e5a:	d4f7      	bmi.n	8006e4c <_vfiprintf_r+0x44>
 8006e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e5e:	f7fe f9fb 	bl	8005258 <__retarget_lock_release_recursive>
 8006e62:	e7f3      	b.n	8006e4c <_vfiprintf_r+0x44>
 8006e64:	2300      	movs	r3, #0
 8006e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e68:	2320      	movs	r3, #32
 8006e6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e72:	2330      	movs	r3, #48	@ 0x30
 8006e74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007024 <_vfiprintf_r+0x21c>
 8006e78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e7c:	f04f 0901 	mov.w	r9, #1
 8006e80:	4623      	mov	r3, r4
 8006e82:	469a      	mov	sl, r3
 8006e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e88:	b10a      	cbz	r2, 8006e8e <_vfiprintf_r+0x86>
 8006e8a:	2a25      	cmp	r2, #37	@ 0x25
 8006e8c:	d1f9      	bne.n	8006e82 <_vfiprintf_r+0x7a>
 8006e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8006e92:	d00b      	beq.n	8006eac <_vfiprintf_r+0xa4>
 8006e94:	465b      	mov	r3, fp
 8006e96:	4622      	mov	r2, r4
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f7ff ffa2 	bl	8006de4 <__sfputs_r>
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	f000 80a7 	beq.w	8006ff4 <_vfiprintf_r+0x1ec>
 8006ea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ea8:	445a      	add	r2, fp
 8006eaa:	9209      	str	r2, [sp, #36]	@ 0x24
 8006eac:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 809f 	beq.w	8006ff4 <_vfiprintf_r+0x1ec>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ec0:	f10a 0a01 	add.w	sl, sl, #1
 8006ec4:	9304      	str	r3, [sp, #16]
 8006ec6:	9307      	str	r3, [sp, #28]
 8006ec8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ecc:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ece:	4654      	mov	r4, sl
 8006ed0:	2205      	movs	r2, #5
 8006ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed6:	4853      	ldr	r0, [pc, #332]	@ (8007024 <_vfiprintf_r+0x21c>)
 8006ed8:	f7f9 f97a 	bl	80001d0 <memchr>
 8006edc:	9a04      	ldr	r2, [sp, #16]
 8006ede:	b9d8      	cbnz	r0, 8006f18 <_vfiprintf_r+0x110>
 8006ee0:	06d1      	lsls	r1, r2, #27
 8006ee2:	bf44      	itt	mi
 8006ee4:	2320      	movmi	r3, #32
 8006ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006eea:	0713      	lsls	r3, r2, #28
 8006eec:	bf44      	itt	mi
 8006eee:	232b      	movmi	r3, #43	@ 0x2b
 8006ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006efa:	d015      	beq.n	8006f28 <_vfiprintf_r+0x120>
 8006efc:	9a07      	ldr	r2, [sp, #28]
 8006efe:	4654      	mov	r4, sl
 8006f00:	2000      	movs	r0, #0
 8006f02:	f04f 0c0a 	mov.w	ip, #10
 8006f06:	4621      	mov	r1, r4
 8006f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f0c:	3b30      	subs	r3, #48	@ 0x30
 8006f0e:	2b09      	cmp	r3, #9
 8006f10:	d94b      	bls.n	8006faa <_vfiprintf_r+0x1a2>
 8006f12:	b1b0      	cbz	r0, 8006f42 <_vfiprintf_r+0x13a>
 8006f14:	9207      	str	r2, [sp, #28]
 8006f16:	e014      	b.n	8006f42 <_vfiprintf_r+0x13a>
 8006f18:	eba0 0308 	sub.w	r3, r0, r8
 8006f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8006f20:	4313      	orrs	r3, r2
 8006f22:	9304      	str	r3, [sp, #16]
 8006f24:	46a2      	mov	sl, r4
 8006f26:	e7d2      	b.n	8006ece <_vfiprintf_r+0xc6>
 8006f28:	9b03      	ldr	r3, [sp, #12]
 8006f2a:	1d19      	adds	r1, r3, #4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	9103      	str	r1, [sp, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bfbb      	ittet	lt
 8006f34:	425b      	neglt	r3, r3
 8006f36:	f042 0202 	orrlt.w	r2, r2, #2
 8006f3a:	9307      	strge	r3, [sp, #28]
 8006f3c:	9307      	strlt	r3, [sp, #28]
 8006f3e:	bfb8      	it	lt
 8006f40:	9204      	strlt	r2, [sp, #16]
 8006f42:	7823      	ldrb	r3, [r4, #0]
 8006f44:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f46:	d10a      	bne.n	8006f5e <_vfiprintf_r+0x156>
 8006f48:	7863      	ldrb	r3, [r4, #1]
 8006f4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f4c:	d132      	bne.n	8006fb4 <_vfiprintf_r+0x1ac>
 8006f4e:	9b03      	ldr	r3, [sp, #12]
 8006f50:	1d1a      	adds	r2, r3, #4
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	9203      	str	r2, [sp, #12]
 8006f56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f5a:	3402      	adds	r4, #2
 8006f5c:	9305      	str	r3, [sp, #20]
 8006f5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007034 <_vfiprintf_r+0x22c>
 8006f62:	7821      	ldrb	r1, [r4, #0]
 8006f64:	2203      	movs	r2, #3
 8006f66:	4650      	mov	r0, sl
 8006f68:	f7f9 f932 	bl	80001d0 <memchr>
 8006f6c:	b138      	cbz	r0, 8006f7e <_vfiprintf_r+0x176>
 8006f6e:	9b04      	ldr	r3, [sp, #16]
 8006f70:	eba0 000a 	sub.w	r0, r0, sl
 8006f74:	2240      	movs	r2, #64	@ 0x40
 8006f76:	4082      	lsls	r2, r0
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	3401      	adds	r4, #1
 8006f7c:	9304      	str	r3, [sp, #16]
 8006f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f82:	4829      	ldr	r0, [pc, #164]	@ (8007028 <_vfiprintf_r+0x220>)
 8006f84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f88:	2206      	movs	r2, #6
 8006f8a:	f7f9 f921 	bl	80001d0 <memchr>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d03f      	beq.n	8007012 <_vfiprintf_r+0x20a>
 8006f92:	4b26      	ldr	r3, [pc, #152]	@ (800702c <_vfiprintf_r+0x224>)
 8006f94:	bb1b      	cbnz	r3, 8006fde <_vfiprintf_r+0x1d6>
 8006f96:	9b03      	ldr	r3, [sp, #12]
 8006f98:	3307      	adds	r3, #7
 8006f9a:	f023 0307 	bic.w	r3, r3, #7
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	9303      	str	r3, [sp, #12]
 8006fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fa4:	443b      	add	r3, r7
 8006fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fa8:	e76a      	b.n	8006e80 <_vfiprintf_r+0x78>
 8006faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fae:	460c      	mov	r4, r1
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	e7a8      	b.n	8006f06 <_vfiprintf_r+0xfe>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	3401      	adds	r4, #1
 8006fb8:	9305      	str	r3, [sp, #20]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	f04f 0c0a 	mov.w	ip, #10
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fc6:	3a30      	subs	r2, #48	@ 0x30
 8006fc8:	2a09      	cmp	r2, #9
 8006fca:	d903      	bls.n	8006fd4 <_vfiprintf_r+0x1cc>
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0c6      	beq.n	8006f5e <_vfiprintf_r+0x156>
 8006fd0:	9105      	str	r1, [sp, #20]
 8006fd2:	e7c4      	b.n	8006f5e <_vfiprintf_r+0x156>
 8006fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fd8:	4604      	mov	r4, r0
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e7f0      	b.n	8006fc0 <_vfiprintf_r+0x1b8>
 8006fde:	ab03      	add	r3, sp, #12
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	462a      	mov	r2, r5
 8006fe4:	4b12      	ldr	r3, [pc, #72]	@ (8007030 <_vfiprintf_r+0x228>)
 8006fe6:	a904      	add	r1, sp, #16
 8006fe8:	4630      	mov	r0, r6
 8006fea:	f7fd fbd9 	bl	80047a0 <_printf_float>
 8006fee:	4607      	mov	r7, r0
 8006ff0:	1c78      	adds	r0, r7, #1
 8006ff2:	d1d6      	bne.n	8006fa2 <_vfiprintf_r+0x19a>
 8006ff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ff6:	07d9      	lsls	r1, r3, #31
 8006ff8:	d405      	bmi.n	8007006 <_vfiprintf_r+0x1fe>
 8006ffa:	89ab      	ldrh	r3, [r5, #12]
 8006ffc:	059a      	lsls	r2, r3, #22
 8006ffe:	d402      	bmi.n	8007006 <_vfiprintf_r+0x1fe>
 8007000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007002:	f7fe f929 	bl	8005258 <__retarget_lock_release_recursive>
 8007006:	89ab      	ldrh	r3, [r5, #12]
 8007008:	065b      	lsls	r3, r3, #25
 800700a:	f53f af1f 	bmi.w	8006e4c <_vfiprintf_r+0x44>
 800700e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007010:	e71e      	b.n	8006e50 <_vfiprintf_r+0x48>
 8007012:	ab03      	add	r3, sp, #12
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	462a      	mov	r2, r5
 8007018:	4b05      	ldr	r3, [pc, #20]	@ (8007030 <_vfiprintf_r+0x228>)
 800701a:	a904      	add	r1, sp, #16
 800701c:	4630      	mov	r0, r6
 800701e:	f7fd fe57 	bl	8004cd0 <_printf_i>
 8007022:	e7e4      	b.n	8006fee <_vfiprintf_r+0x1e6>
 8007024:	08007580 	.word	0x08007580
 8007028:	0800758a 	.word	0x0800758a
 800702c:	080047a1 	.word	0x080047a1
 8007030:	08006de5 	.word	0x08006de5
 8007034:	08007586 	.word	0x08007586

08007038 <__swbuf_r>:
 8007038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703a:	460e      	mov	r6, r1
 800703c:	4614      	mov	r4, r2
 800703e:	4605      	mov	r5, r0
 8007040:	b118      	cbz	r0, 800704a <__swbuf_r+0x12>
 8007042:	6a03      	ldr	r3, [r0, #32]
 8007044:	b90b      	cbnz	r3, 800704a <__swbuf_r+0x12>
 8007046:	f7fd ffef 	bl	8005028 <__sinit>
 800704a:	69a3      	ldr	r3, [r4, #24]
 800704c:	60a3      	str	r3, [r4, #8]
 800704e:	89a3      	ldrh	r3, [r4, #12]
 8007050:	071a      	lsls	r2, r3, #28
 8007052:	d501      	bpl.n	8007058 <__swbuf_r+0x20>
 8007054:	6923      	ldr	r3, [r4, #16]
 8007056:	b943      	cbnz	r3, 800706a <__swbuf_r+0x32>
 8007058:	4621      	mov	r1, r4
 800705a:	4628      	mov	r0, r5
 800705c:	f000 f82a 	bl	80070b4 <__swsetup_r>
 8007060:	b118      	cbz	r0, 800706a <__swbuf_r+0x32>
 8007062:	f04f 37ff 	mov.w	r7, #4294967295
 8007066:	4638      	mov	r0, r7
 8007068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	6922      	ldr	r2, [r4, #16]
 800706e:	1a98      	subs	r0, r3, r2
 8007070:	6963      	ldr	r3, [r4, #20]
 8007072:	b2f6      	uxtb	r6, r6
 8007074:	4283      	cmp	r3, r0
 8007076:	4637      	mov	r7, r6
 8007078:	dc05      	bgt.n	8007086 <__swbuf_r+0x4e>
 800707a:	4621      	mov	r1, r4
 800707c:	4628      	mov	r0, r5
 800707e:	f7ff fd99 	bl	8006bb4 <_fflush_r>
 8007082:	2800      	cmp	r0, #0
 8007084:	d1ed      	bne.n	8007062 <__swbuf_r+0x2a>
 8007086:	68a3      	ldr	r3, [r4, #8]
 8007088:	3b01      	subs	r3, #1
 800708a:	60a3      	str	r3, [r4, #8]
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	6022      	str	r2, [r4, #0]
 8007092:	701e      	strb	r6, [r3, #0]
 8007094:	6962      	ldr	r2, [r4, #20]
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	429a      	cmp	r2, r3
 800709a:	d004      	beq.n	80070a6 <__swbuf_r+0x6e>
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	07db      	lsls	r3, r3, #31
 80070a0:	d5e1      	bpl.n	8007066 <__swbuf_r+0x2e>
 80070a2:	2e0a      	cmp	r6, #10
 80070a4:	d1df      	bne.n	8007066 <__swbuf_r+0x2e>
 80070a6:	4621      	mov	r1, r4
 80070a8:	4628      	mov	r0, r5
 80070aa:	f7ff fd83 	bl	8006bb4 <_fflush_r>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d0d9      	beq.n	8007066 <__swbuf_r+0x2e>
 80070b2:	e7d6      	b.n	8007062 <__swbuf_r+0x2a>

080070b4 <__swsetup_r>:
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	4b29      	ldr	r3, [pc, #164]	@ (800715c <__swsetup_r+0xa8>)
 80070b8:	4605      	mov	r5, r0
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	460c      	mov	r4, r1
 80070be:	b118      	cbz	r0, 80070c8 <__swsetup_r+0x14>
 80070c0:	6a03      	ldr	r3, [r0, #32]
 80070c2:	b90b      	cbnz	r3, 80070c8 <__swsetup_r+0x14>
 80070c4:	f7fd ffb0 	bl	8005028 <__sinit>
 80070c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070cc:	0719      	lsls	r1, r3, #28
 80070ce:	d422      	bmi.n	8007116 <__swsetup_r+0x62>
 80070d0:	06da      	lsls	r2, r3, #27
 80070d2:	d407      	bmi.n	80070e4 <__swsetup_r+0x30>
 80070d4:	2209      	movs	r2, #9
 80070d6:	602a      	str	r2, [r5, #0]
 80070d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070dc:	81a3      	strh	r3, [r4, #12]
 80070de:	f04f 30ff 	mov.w	r0, #4294967295
 80070e2:	e033      	b.n	800714c <__swsetup_r+0x98>
 80070e4:	0758      	lsls	r0, r3, #29
 80070e6:	d512      	bpl.n	800710e <__swsetup_r+0x5a>
 80070e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070ea:	b141      	cbz	r1, 80070fe <__swsetup_r+0x4a>
 80070ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070f0:	4299      	cmp	r1, r3
 80070f2:	d002      	beq.n	80070fa <__swsetup_r+0x46>
 80070f4:	4628      	mov	r0, r5
 80070f6:	f7fe feff 	bl	8005ef8 <_free_r>
 80070fa:	2300      	movs	r3, #0
 80070fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007104:	81a3      	strh	r3, [r4, #12]
 8007106:	2300      	movs	r3, #0
 8007108:	6063      	str	r3, [r4, #4]
 800710a:	6923      	ldr	r3, [r4, #16]
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	f043 0308 	orr.w	r3, r3, #8
 8007114:	81a3      	strh	r3, [r4, #12]
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	b94b      	cbnz	r3, 800712e <__swsetup_r+0x7a>
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007124:	d003      	beq.n	800712e <__swsetup_r+0x7a>
 8007126:	4621      	mov	r1, r4
 8007128:	4628      	mov	r0, r5
 800712a:	f000 f883 	bl	8007234 <__smakebuf_r>
 800712e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007132:	f013 0201 	ands.w	r2, r3, #1
 8007136:	d00a      	beq.n	800714e <__swsetup_r+0x9a>
 8007138:	2200      	movs	r2, #0
 800713a:	60a2      	str	r2, [r4, #8]
 800713c:	6962      	ldr	r2, [r4, #20]
 800713e:	4252      	negs	r2, r2
 8007140:	61a2      	str	r2, [r4, #24]
 8007142:	6922      	ldr	r2, [r4, #16]
 8007144:	b942      	cbnz	r2, 8007158 <__swsetup_r+0xa4>
 8007146:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800714a:	d1c5      	bne.n	80070d8 <__swsetup_r+0x24>
 800714c:	bd38      	pop	{r3, r4, r5, pc}
 800714e:	0799      	lsls	r1, r3, #30
 8007150:	bf58      	it	pl
 8007152:	6962      	ldrpl	r2, [r4, #20]
 8007154:	60a2      	str	r2, [r4, #8]
 8007156:	e7f4      	b.n	8007142 <__swsetup_r+0x8e>
 8007158:	2000      	movs	r0, #0
 800715a:	e7f7      	b.n	800714c <__swsetup_r+0x98>
 800715c:	2000001c 	.word	0x2000001c

08007160 <_raise_r>:
 8007160:	291f      	cmp	r1, #31
 8007162:	b538      	push	{r3, r4, r5, lr}
 8007164:	4605      	mov	r5, r0
 8007166:	460c      	mov	r4, r1
 8007168:	d904      	bls.n	8007174 <_raise_r+0x14>
 800716a:	2316      	movs	r3, #22
 800716c:	6003      	str	r3, [r0, #0]
 800716e:	f04f 30ff 	mov.w	r0, #4294967295
 8007172:	bd38      	pop	{r3, r4, r5, pc}
 8007174:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007176:	b112      	cbz	r2, 800717e <_raise_r+0x1e>
 8007178:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800717c:	b94b      	cbnz	r3, 8007192 <_raise_r+0x32>
 800717e:	4628      	mov	r0, r5
 8007180:	f000 f830 	bl	80071e4 <_getpid_r>
 8007184:	4622      	mov	r2, r4
 8007186:	4601      	mov	r1, r0
 8007188:	4628      	mov	r0, r5
 800718a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800718e:	f000 b817 	b.w	80071c0 <_kill_r>
 8007192:	2b01      	cmp	r3, #1
 8007194:	d00a      	beq.n	80071ac <_raise_r+0x4c>
 8007196:	1c59      	adds	r1, r3, #1
 8007198:	d103      	bne.n	80071a2 <_raise_r+0x42>
 800719a:	2316      	movs	r3, #22
 800719c:	6003      	str	r3, [r0, #0]
 800719e:	2001      	movs	r0, #1
 80071a0:	e7e7      	b.n	8007172 <_raise_r+0x12>
 80071a2:	2100      	movs	r1, #0
 80071a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80071a8:	4620      	mov	r0, r4
 80071aa:	4798      	blx	r3
 80071ac:	2000      	movs	r0, #0
 80071ae:	e7e0      	b.n	8007172 <_raise_r+0x12>

080071b0 <raise>:
 80071b0:	4b02      	ldr	r3, [pc, #8]	@ (80071bc <raise+0xc>)
 80071b2:	4601      	mov	r1, r0
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	f7ff bfd3 	b.w	8007160 <_raise_r>
 80071ba:	bf00      	nop
 80071bc:	2000001c 	.word	0x2000001c

080071c0 <_kill_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4d07      	ldr	r5, [pc, #28]	@ (80071e0 <_kill_r+0x20>)
 80071c4:	2300      	movs	r3, #0
 80071c6:	4604      	mov	r4, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	4611      	mov	r1, r2
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	f7f9 ffe9 	bl	80011a4 <_kill>
 80071d2:	1c43      	adds	r3, r0, #1
 80071d4:	d102      	bne.n	80071dc <_kill_r+0x1c>
 80071d6:	682b      	ldr	r3, [r5, #0]
 80071d8:	b103      	cbz	r3, 80071dc <_kill_r+0x1c>
 80071da:	6023      	str	r3, [r4, #0]
 80071dc:	bd38      	pop	{r3, r4, r5, pc}
 80071de:	bf00      	nop
 80071e0:	2000045c 	.word	0x2000045c

080071e4 <_getpid_r>:
 80071e4:	f7f9 bfd6 	b.w	8001194 <_getpid>

080071e8 <__swhatbuf_r>:
 80071e8:	b570      	push	{r4, r5, r6, lr}
 80071ea:	460c      	mov	r4, r1
 80071ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f0:	2900      	cmp	r1, #0
 80071f2:	b096      	sub	sp, #88	@ 0x58
 80071f4:	4615      	mov	r5, r2
 80071f6:	461e      	mov	r6, r3
 80071f8:	da0d      	bge.n	8007216 <__swhatbuf_r+0x2e>
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007200:	f04f 0100 	mov.w	r1, #0
 8007204:	bf14      	ite	ne
 8007206:	2340      	movne	r3, #64	@ 0x40
 8007208:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800720c:	2000      	movs	r0, #0
 800720e:	6031      	str	r1, [r6, #0]
 8007210:	602b      	str	r3, [r5, #0]
 8007212:	b016      	add	sp, #88	@ 0x58
 8007214:	bd70      	pop	{r4, r5, r6, pc}
 8007216:	466a      	mov	r2, sp
 8007218:	f000 f848 	bl	80072ac <_fstat_r>
 800721c:	2800      	cmp	r0, #0
 800721e:	dbec      	blt.n	80071fa <__swhatbuf_r+0x12>
 8007220:	9901      	ldr	r1, [sp, #4]
 8007222:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007226:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800722a:	4259      	negs	r1, r3
 800722c:	4159      	adcs	r1, r3
 800722e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007232:	e7eb      	b.n	800720c <__swhatbuf_r+0x24>

08007234 <__smakebuf_r>:
 8007234:	898b      	ldrh	r3, [r1, #12]
 8007236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007238:	079d      	lsls	r5, r3, #30
 800723a:	4606      	mov	r6, r0
 800723c:	460c      	mov	r4, r1
 800723e:	d507      	bpl.n	8007250 <__smakebuf_r+0x1c>
 8007240:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	6123      	str	r3, [r4, #16]
 8007248:	2301      	movs	r3, #1
 800724a:	6163      	str	r3, [r4, #20]
 800724c:	b003      	add	sp, #12
 800724e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007250:	ab01      	add	r3, sp, #4
 8007252:	466a      	mov	r2, sp
 8007254:	f7ff ffc8 	bl	80071e8 <__swhatbuf_r>
 8007258:	9f00      	ldr	r7, [sp, #0]
 800725a:	4605      	mov	r5, r0
 800725c:	4639      	mov	r1, r7
 800725e:	4630      	mov	r0, r6
 8007260:	f7fe febe 	bl	8005fe0 <_malloc_r>
 8007264:	b948      	cbnz	r0, 800727a <__smakebuf_r+0x46>
 8007266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800726a:	059a      	lsls	r2, r3, #22
 800726c:	d4ee      	bmi.n	800724c <__smakebuf_r+0x18>
 800726e:	f023 0303 	bic.w	r3, r3, #3
 8007272:	f043 0302 	orr.w	r3, r3, #2
 8007276:	81a3      	strh	r3, [r4, #12]
 8007278:	e7e2      	b.n	8007240 <__smakebuf_r+0xc>
 800727a:	89a3      	ldrh	r3, [r4, #12]
 800727c:	6020      	str	r0, [r4, #0]
 800727e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007282:	81a3      	strh	r3, [r4, #12]
 8007284:	9b01      	ldr	r3, [sp, #4]
 8007286:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800728a:	b15b      	cbz	r3, 80072a4 <__smakebuf_r+0x70>
 800728c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007290:	4630      	mov	r0, r6
 8007292:	f000 f81d 	bl	80072d0 <_isatty_r>
 8007296:	b128      	cbz	r0, 80072a4 <__smakebuf_r+0x70>
 8007298:	89a3      	ldrh	r3, [r4, #12]
 800729a:	f023 0303 	bic.w	r3, r3, #3
 800729e:	f043 0301 	orr.w	r3, r3, #1
 80072a2:	81a3      	strh	r3, [r4, #12]
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	431d      	orrs	r5, r3
 80072a8:	81a5      	strh	r5, [r4, #12]
 80072aa:	e7cf      	b.n	800724c <__smakebuf_r+0x18>

080072ac <_fstat_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4d07      	ldr	r5, [pc, #28]	@ (80072cc <_fstat_r+0x20>)
 80072b0:	2300      	movs	r3, #0
 80072b2:	4604      	mov	r4, r0
 80072b4:	4608      	mov	r0, r1
 80072b6:	4611      	mov	r1, r2
 80072b8:	602b      	str	r3, [r5, #0]
 80072ba:	f7f9 ffd3 	bl	8001264 <_fstat>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	d102      	bne.n	80072c8 <_fstat_r+0x1c>
 80072c2:	682b      	ldr	r3, [r5, #0]
 80072c4:	b103      	cbz	r3, 80072c8 <_fstat_r+0x1c>
 80072c6:	6023      	str	r3, [r4, #0]
 80072c8:	bd38      	pop	{r3, r4, r5, pc}
 80072ca:	bf00      	nop
 80072cc:	2000045c 	.word	0x2000045c

080072d0 <_isatty_r>:
 80072d0:	b538      	push	{r3, r4, r5, lr}
 80072d2:	4d06      	ldr	r5, [pc, #24]	@ (80072ec <_isatty_r+0x1c>)
 80072d4:	2300      	movs	r3, #0
 80072d6:	4604      	mov	r4, r0
 80072d8:	4608      	mov	r0, r1
 80072da:	602b      	str	r3, [r5, #0]
 80072dc:	f7f9 ffd2 	bl	8001284 <_isatty>
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d102      	bne.n	80072ea <_isatty_r+0x1a>
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	b103      	cbz	r3, 80072ea <_isatty_r+0x1a>
 80072e8:	6023      	str	r3, [r4, #0]
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	2000045c 	.word	0x2000045c

080072f0 <_init>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr

080072fc <_fini>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr
