
Radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08007170  08007170  00008170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007538  08007538  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007538  08007538  00008538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007540  08007540  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007540  08007540  00008540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007544  08007544  00008544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08007548  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d8  2**0
                  CONTENTS
 10 .bss          00000248  200001d8  200001d8  000091d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000420  20000420  000091d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1e5  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002091  00000000  00000000  000183ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  0001a480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a72  00000000  00000000  0001b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c246  00000000  00000000  0001bc52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001065b  00000000  00000000  00037e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6656  00000000  00000000  000484f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eeb49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004938  00000000  00000000  000eeb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000097  00000000  00000000  000f34c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007158 	.word	0x08007158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08007158 	.word	0x08007158

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b08b      	sub	sp, #44	@ 0x2c
 8000bac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fb83 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f847 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f8e9 	bl	8000d8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bba:	f000 f8b7 	bl	8000d2c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000bbe:	f000 f87d 	bl	8000cbc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  char* saludo = "Nueva sesion:\n\r";
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <main+0x8c>)
 8000bc4:	61fb      	str	r3, [r7, #28]
  HAL_UART_Transmit_IT(&huart2, (uint8_t*) saludo, strlen(saludo));
 8000bc6:	69f8      	ldr	r0, [r7, #28]
 8000bc8:	f7ff fb52 	bl	8000270 <strlen>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	69f9      	ldr	r1, [r7, #28]
 8000bd4:	4818      	ldr	r0, [pc, #96]	@ (8000c38 <main+0x90>)
 8000bd6:	f002 fcbd 	bl	8003554 <HAL_UART_Transmit_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (time != 0) {
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <main+0x94>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d0fa      	beq.n	8000bda <main+0x32>
		  char buffer[20];
		  float speed = calculate_speed(time);
 8000be4:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <main+0x94>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f922 	bl	8000e34 <calculate_speed>
 8000bf0:	ed87 0a06 	vstr	s0, [r7, #24]
		  sprintf(buffer, "%ds - %fm/s\n\r", time, speed);
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <main+0x94>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	461c      	mov	r4, r3
 8000bfc:	69b8      	ldr	r0, [r7, #24]
 8000bfe:	f7ff fca3 	bl	8000548 <__aeabi_f2d>
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	1d38      	adds	r0, r7, #4
 8000c08:	e9cd 2300 	strd	r2, r3, [sp]
 8000c0c:	4622      	mov	r2, r4
 8000c0e:	490c      	ldr	r1, [pc, #48]	@ (8000c40 <main+0x98>)
 8000c10:	f004 f974 	bl	8004efc <siprintf>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*) buffer, strlen(buffer));
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fb2a 	bl	8000270 <strlen>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <main+0x90>)
 8000c26:	f002 fc95 	bl	8003554 <HAL_UART_Transmit_IT>
		  time = 0;
 8000c2a:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <main+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	801a      	strh	r2, [r3, #0]
	  if (time != 0) {
 8000c30:	e7d3      	b.n	8000bda <main+0x32>
 8000c32:	bf00      	nop
 8000c34:	08007170 	.word	0x08007170
 8000c38:	20000240 	.word	0x20000240
 8000c3c:	200002c8 	.word	0x200002c8
 8000c40:	08007180 	.word	0x08007180

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b090      	sub	sp, #64	@ 0x40
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0318 	add.w	r3, r7, #24
 8000c4e:	2228      	movs	r2, #40	@ 0x28
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f004 f9b5 	bl	8004fc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6e:	2310      	movs	r3, #16
 8000c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c76:	f107 0318 	add.w	r3, r7, #24
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 fea6 	bl	80019cc <HAL_RCC_OscConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c86:	f000 f8fd 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 fed0 	bl	8002a48 <HAL_RCC_ClockConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cae:	f000 f8e9 	bl	8000e84 <Error_Handler>
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	3740      	adds	r7, #64	@ 0x40
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <MX_TIM6_Init+0x68>)
 8000cce:	4a16      	ldr	r2, [pc, #88]	@ (8000d28 <MX_TIM6_Init+0x6c>)
 8000cd0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <MX_TIM6_Init+0x68>)
 8000cd4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000cd8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <MX_TIM6_Init+0x68>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <MX_TIM6_Init+0x68>)
 8000ce2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ce6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <MX_TIM6_Init+0x68>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cee:	480d      	ldr	r0, [pc, #52]	@ (8000d24 <MX_TIM6_Init+0x68>)
 8000cf0:	f002 f8ca 	bl	8002e88 <HAL_TIM_Base_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000cfa:	f000 f8c3 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4806      	ldr	r0, [pc, #24]	@ (8000d24 <MX_TIM6_Init+0x68>)
 8000d0c:	f002 fb48 	bl	80033a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000d16:	f000 f8b5 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001f4 	.word	0x200001f4
 8000d28:	40001000 	.word	0x40001000

08000d2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d32:	4a15      	ldr	r2, [pc, #84]	@ (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d70:	f002 fba2 	bl	80034b8 <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d7a:	f000 f883 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000240 	.word	0x20000240
 8000d88:	40004400 	.word	0x40004400

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da2:	4b22      	ldr	r3, [pc, #136]	@ (8000e2c <MX_GPIO_Init+0xa0>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	4a21      	ldr	r2, [pc, #132]	@ (8000e2c <MX_GPIO_Init+0xa0>)
 8000da8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dac:	6153      	str	r3, [r2, #20]
 8000dae:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <MX_GPIO_Init+0xa0>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <MX_GPIO_Init+0xa0>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8000e2c <MX_GPIO_Init+0xa0>)
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc4:	6153      	str	r3, [r2, #20]
 8000dc6:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <MX_GPIO_Init+0xa0>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <MX_GPIO_Init+0xa0>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	4a15      	ldr	r2, [pc, #84]	@ (8000e2c <MX_GPIO_Init+0xa0>)
 8000dd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ddc:	6153      	str	r3, [r2, #20]
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <MX_GPIO_Init+0xa0>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB1 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8000dea:	2312      	movs	r3, #18
 8000dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <MX_GPIO_Init+0xa4>)
 8000e00:	f000 fc4e 	bl	80016a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	2007      	movs	r0, #7
 8000e0a:	f000 fb96 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e0e:	2007      	movs	r0, #7
 8000e10:	f000 fbaf 	bl	8001572 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	200a      	movs	r0, #10
 8000e1a:	f000 fb8e 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000e1e:	200a      	movs	r0, #10
 8000e20:	f000 fba7 	bl	8001572 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	48000400 	.word	0x48000400

08000e34 <calculate_speed>:

/* USER CODE BEGIN 4 */
float calculate_speed(int16_t time)  {
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
	time /= 1000;
 8000e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e42:	4a0e      	ldr	r2, [pc, #56]	@ (8000e7c <calculate_speed+0x48>)
 8000e44:	fb82 1203 	smull	r1, r2, r2, r3
 8000e48:	1192      	asrs	r2, r2, #6
 8000e4a:	17db      	asrs	r3, r3, #31
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	80fb      	strh	r3, [r7, #6]
	float speed = distance / time;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <calculate_speed+0x4c>)
 8000e52:	edd3 6a00 	vldr	s13, [r3]
 8000e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5a:	ee07 3a90 	vmov	s15, r3
 8000e5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e66:	edc7 7a03 	vstr	s15, [r7, #12]
}
 8000e6a:	bf00      	nop
 8000e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	10624dd3 	.word	0x10624dd3
 8000e80:	20000000 	.word	0x20000000

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <Error_Handler+0x8>

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6193      	str	r3, [r2, #24]
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a08      	ldr	r2, [pc, #32]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <HAL_MspInit+0x44>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f1c <HAL_TIM_Base_MspInit+0x44>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d113      	bne.n	8000f12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <HAL_TIM_Base_MspInit+0x48>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a0c      	ldr	r2, [pc, #48]	@ (8000f20 <HAL_TIM_Base_MspInit+0x48>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	61d3      	str	r3, [r2, #28]
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <HAL_TIM_Base_MspInit+0x48>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2036      	movs	r0, #54	@ 0x36
 8000f08:	f000 fb17 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000f0c:	2036      	movs	r0, #54	@ 0x36
 8000f0e:	f000 fb30 	bl	8001572 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40001000 	.word	0x40001000
 8000f20:	40021000 	.word	0x40021000

08000f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb4 <HAL_UART_MspInit+0x90>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d131      	bne.n	8000faa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f46:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <HAL_UART_MspInit+0x94>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb8 <HAL_UART_MspInit+0x94>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f50:	61d3      	str	r3, [r2, #28]
 8000f52:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <HAL_UART_MspInit+0x94>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <HAL_UART_MspInit+0x94>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a15      	ldr	r2, [pc, #84]	@ (8000fb8 <HAL_UART_MspInit+0x94>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <HAL_UART_MspInit+0x94>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000f76:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f88:	2307      	movs	r3, #7
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f96:	f000 fb83 	bl	80016a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2026      	movs	r0, #38	@ 0x26
 8000fa0:	f000 facb 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fa4:	2026      	movs	r0, #38	@ 0x26
 8000fa6:	f000 fae4 	bl	8001572 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	@ 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40004400 	.word	0x40004400
 8000fb8:	40021000 	.word	0x40021000

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001012:	f000 f997 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001020:	2002      	movs	r0, #2
 8001022:	f000 fcaf 	bl	8001984 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	if (sensor1_crossed == 0) {
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <EXTI1_IRQHandler+0x28>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d108      	bne.n	8001040 <EXTI1_IRQHandler+0x24>
		TIM6->CNT = 0;
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <EXTI1_IRQHandler+0x2c>)
 8001030:	2200      	movs	r2, #0
 8001032:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start(&htim6);
 8001034:	4805      	ldr	r0, [pc, #20]	@ (800104c <EXTI1_IRQHandler+0x30>)
 8001036:	f001 ff7f 	bl	8002f38 <HAL_TIM_Base_Start>
		sensor1_crossed = 1;
 800103a:	4b02      	ldr	r3, [pc, #8]	@ (8001044 <EXTI1_IRQHandler+0x28>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI1_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200002ca 	.word	0x200002ca
 8001048:	40001000 	.word	0x40001000
 800104c:	200001f4 	.word	0x200001f4

08001050 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001054:	2010      	movs	r0, #16
 8001056:	f000 fc95 	bl	8001984 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if (sensor1_crossed == 1) {
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <EXTI4_IRQHandler+0x2c>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d10a      	bne.n	8001078 <EXTI4_IRQHandler+0x28>
	  HAL_TIM_Base_Stop(&htim6);
 8001062:	4807      	ldr	r0, [pc, #28]	@ (8001080 <EXTI4_IRQHandler+0x30>)
 8001064:	f001 ffbc 	bl	8002fe0 <HAL_TIM_Base_Stop>
	  time = TIM6->CNT;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <EXTI4_IRQHandler+0x34>)
 800106a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <EXTI4_IRQHandler+0x38>)
 8001070:	801a      	strh	r2, [r3, #0]
	  sensor1_crossed = 0;
 8001072:	4b02      	ldr	r3, [pc, #8]	@ (800107c <EXTI4_IRQHandler+0x2c>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200002ca 	.word	0x200002ca
 8001080:	200001f4 	.word	0x200001f4
 8001084:	40001000 	.word	0x40001000
 8001088:	200002c8 	.word	0x200002c8

0800108c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <USART2_IRQHandler+0x10>)
 8001092:	f002 fabd 	bl	8003610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000240 	.word	0x20000240

080010a0 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <TIM6_DAC1_IRQHandler+0x10>)
 80010a6:	f001 ffc2 	bl	800302e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200001f4 	.word	0x200001f4

080010b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return 1;
 80010b8:	2301      	movs	r3, #1
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_kill>:

int _kill(int pid, int sig)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010ce:	f003 ffcb 	bl	8005068 <__errno>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2216      	movs	r2, #22
 80010d6:	601a      	str	r2, [r3, #0]
  return -1;
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_exit>:

void _exit (int status)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ffe7 	bl	80010c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010f6:	bf00      	nop
 80010f8:	e7fd      	b.n	80010f6 <_exit+0x12>

080010fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	e00a      	b.n	8001122 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800110c:	f3af 8000 	nop.w
 8001110:	4601      	mov	r1, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	60ba      	str	r2, [r7, #8]
 8001118:	b2ca      	uxtb	r2, r1
 800111a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	3301      	adds	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	dbf0      	blt.n	800110c <_read+0x12>
  }

  return len;
 800112a:	687b      	ldr	r3, [r7, #4]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e009      	b.n	800115a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	60ba      	str	r2, [r7, #8]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	429a      	cmp	r2, r3
 8001160:	dbf1      	blt.n	8001146 <_write+0x12>
  }
  return len;
 8001162:	687b      	ldr	r3, [r7, #4]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_close>:

int _close(int file)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001194:	605a      	str	r2, [r3, #4]
  return 0;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_isatty>:

int _isatty(int file)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ac:	2301      	movs	r3, #1
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011dc:	4a14      	ldr	r2, [pc, #80]	@ (8001230 <_sbrk+0x5c>)
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <_sbrk+0x60>)
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e8:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f0:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <_sbrk+0x64>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	@ (800123c <_sbrk+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f6:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	429a      	cmp	r2, r3
 8001202:	d207      	bcs.n	8001214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001204:	f003 ff30 	bl	8005068 <__errno>
 8001208:	4603      	mov	r3, r0
 800120a:	220c      	movs	r2, #12
 800120c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e009      	b.n	8001228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121a:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	4a05      	ldr	r2, [pc, #20]	@ (8001238 <_sbrk+0x64>)
 8001224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20003000 	.word	0x20003000
 8001234:	00000400 	.word	0x00000400
 8001238:	200002cc 	.word	0x200002cc
 800123c:	20000420 	.word	0x20000420

08001240 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <SystemInit+0x20>)
 8001246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800124a:	4a05      	ldr	r2, [pc, #20]	@ (8001260 <SystemInit+0x20>)
 800124c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001250:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001264:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800129c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001268:	f7ff ffea 	bl	8001240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800126c:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800126e:	490d      	ldr	r1, [pc, #52]	@ (80012a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001270:	4a0d      	ldr	r2, [pc, #52]	@ (80012a8 <LoopForever+0xe>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001284:	4c0a      	ldr	r4, [pc, #40]	@ (80012b0 <LoopForever+0x16>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001292:	f003 feef 	bl	8005074 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001296:	f7ff fc87 	bl	8000ba8 <main>

0800129a <LoopForever>:

LoopForever:
    b LoopForever
 800129a:	e7fe      	b.n	800129a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800129c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80012a8:	08007548 	.word	0x08007548
  ldr r2, =_sbss
 80012ac:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80012b0:	20000420 	.word	0x20000420

080012b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC1_2_IRQHandler>
	...

080012b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_Init+0x28>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a07      	ldr	r2, [pc, #28]	@ (80012e0 <HAL_Init+0x28>)
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f92b 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f000 f808 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fddc 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40022000 	.word	0x40022000

080012e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_InitTick+0x54>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_InitTick+0x58>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f943 	bl	800158e <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f000 f90b 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	@ (8001340 <HAL_InitTick+0x5c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000004 	.word	0x20000004
 800133c:	2000000c 	.word	0x2000000c
 8001340:	20000008 	.word	0x20000008

08001344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2000000c 	.word	0x2000000c
 8001368:	200002d0 	.word	0x200002d0

0800136c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	200002d0 	.word	0x200002d0

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4907      	ldr	r1, [pc, #28]	@ (8001420 <__NVIC_EnableIRQ+0x38>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	@ (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	@ (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	@ 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff29 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff3e 	bl	80013cc <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff8e 	bl	8001478 <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5d 	bl	8001424 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff31 	bl	80013e8 <__NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffa2 	bl	80014e0 <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e02e      	b.n	8001616 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d008      	beq.n	80015d4 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2204      	movs	r2, #4
 80015c6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e020      	b.n	8001616 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 020e 	bic.w	r2, r2, #14
 80015e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0201 	bic.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fc:	2101      	movs	r1, #1
 80015fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001602:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001634:	2b02      	cmp	r3, #2
 8001636:	d005      	beq.n	8001644 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2204      	movs	r2, #4
 800163c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e027      	b.n	8001694 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 020e 	bic.w	r2, r2, #14
 8001652:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800166c:	2101      	movs	r1, #1
 800166e:	fa01 f202 	lsl.w	r2, r1, r2
 8001672:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	4798      	blx	r3
    }
  }
  return status;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ae:	e14e      	b.n	800194e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8140 	beq.w	8001948 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d005      	beq.n	80016e0 <HAL_GPIO_Init+0x40>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d130      	bne.n	8001742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001716:	2201      	movs	r2, #1
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	f003 0201 	and.w	r2, r3, #1
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b03      	cmp	r3, #3
 800174c:	d017      	beq.n	800177e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d123      	bne.n	80017d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	6939      	ldr	r1, [r7, #16]
 80017ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0203 	and.w	r2, r3, #3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 809a 	beq.w	8001948 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001814:	4b55      	ldr	r3, [pc, #340]	@ (800196c <HAL_GPIO_Init+0x2cc>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a54      	ldr	r2, [pc, #336]	@ (800196c <HAL_GPIO_Init+0x2cc>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b52      	ldr	r3, [pc, #328]	@ (800196c <HAL_GPIO_Init+0x2cc>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800182c:	4a50      	ldr	r2, [pc, #320]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001856:	d013      	beq.n	8001880 <HAL_GPIO_Init+0x1e0>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a46      	ldr	r2, [pc, #280]	@ (8001974 <HAL_GPIO_Init+0x2d4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d00d      	beq.n	800187c <HAL_GPIO_Init+0x1dc>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a45      	ldr	r2, [pc, #276]	@ (8001978 <HAL_GPIO_Init+0x2d8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d007      	beq.n	8001878 <HAL_GPIO_Init+0x1d8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a44      	ldr	r2, [pc, #272]	@ (800197c <HAL_GPIO_Init+0x2dc>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d101      	bne.n	8001874 <HAL_GPIO_Init+0x1d4>
 8001870:	2303      	movs	r3, #3
 8001872:	e006      	b.n	8001882 <HAL_GPIO_Init+0x1e2>
 8001874:	2305      	movs	r3, #5
 8001876:	e004      	b.n	8001882 <HAL_GPIO_Init+0x1e2>
 8001878:	2302      	movs	r3, #2
 800187a:	e002      	b.n	8001882 <HAL_GPIO_Init+0x1e2>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <HAL_GPIO_Init+0x1e2>
 8001880:	2300      	movs	r3, #0
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	f002 0203 	and.w	r2, r2, #3
 8001888:	0092      	lsls	r2, r2, #2
 800188a:	4093      	lsls	r3, r2
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001892:	4937      	ldr	r1, [pc, #220]	@ (8001970 <HAL_GPIO_Init+0x2d0>)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	089b      	lsrs	r3, r3, #2
 8001898:	3302      	adds	r3, #2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a0:	4b37      	ldr	r3, [pc, #220]	@ (8001980 <HAL_GPIO_Init+0x2e0>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001980 <HAL_GPIO_Init+0x2e0>)
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001980 <HAL_GPIO_Init+0x2e0>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018ee:	4a24      	ldr	r2, [pc, #144]	@ (8001980 <HAL_GPIO_Init+0x2e0>)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <HAL_GPIO_Init+0x2e0>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001918:	4a19      	ldr	r2, [pc, #100]	@ (8001980 <HAL_GPIO_Init+0x2e0>)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800191e:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <HAL_GPIO_Init+0x2e0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001942:	4a0f      	ldr	r2, [pc, #60]	@ (8001980 <HAL_GPIO_Init+0x2e0>)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3301      	adds	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	f47f aea9 	bne.w	80016b0 <HAL_GPIO_Init+0x10>
  }
}
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	40021000 	.word	0x40021000
 8001970:	40010000 	.word	0x40010000
 8001974:	48000400 	.word	0x48000400
 8001978:	48000800 	.word	0x48000800
 800197c:	48000c00 	.word	0x48000c00
 8001980:	40010400 	.word	0x40010400

08001984 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d006      	beq.n	80019a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800199a:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f806 	bl	80019b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40010400 	.word	0x40010400

080019b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019dc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f001 b823 	b.w	8002a38 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 817d 	beq.w	8001d02 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a08:	4bbc      	ldr	r3, [pc, #752]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d00c      	beq.n	8001a2e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a14:	4bb9      	ldr	r3, [pc, #740]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d15c      	bne.n	8001ada <HAL_RCC_OscConfig+0x10e>
 8001a20:	4bb6      	ldr	r3, [pc, #728]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a2c:	d155      	bne.n	8001ada <HAL_RCC_OscConfig+0x10e>
 8001a2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a32:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001a3a:	fa93 f3a3 	rbit	r3, r3
 8001a3e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	095b      	lsrs	r3, r3, #5
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d102      	bne.n	8001a60 <HAL_RCC_OscConfig+0x94>
 8001a5a:	4ba8      	ldr	r3, [pc, #672]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	e015      	b.n	8001a8c <HAL_RCC_OscConfig+0xc0>
 8001a60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a64:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001a74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a78:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001a7c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001a88:	4b9c      	ldr	r3, [pc, #624]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a90:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001a94:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001a98:	fa92 f2a2 	rbit	r2, r2
 8001a9c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001aa0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001aa4:	fab2 f282 	clz	r2, r2
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	f042 0220 	orr.w	r2, r2, #32
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	f002 021f 	and.w	r2, r2, #31
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 811f 	beq.w	8001d00 <HAL_RCC_OscConfig+0x334>
 8001ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 8116 	bne.w	8001d00 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f000 bfaf 	b.w	8002a38 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ade:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x12e>
 8001aec:	4b83      	ldr	r3, [pc, #524]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a82      	ldr	r2, [pc, #520]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	e036      	b.n	8001b68 <HAL_RCC_OscConfig+0x19c>
 8001afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x158>
 8001b0a:	4b7c      	ldr	r3, [pc, #496]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a7b      	ldr	r2, [pc, #492]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b79      	ldr	r3, [pc, #484]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a78      	ldr	r2, [pc, #480]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001b1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e021      	b.n	8001b68 <HAL_RCC_OscConfig+0x19c>
 8001b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x184>
 8001b36:	4b71      	ldr	r3, [pc, #452]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a70      	ldr	r2, [pc, #448]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b6e      	ldr	r3, [pc, #440]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a6d      	ldr	r2, [pc, #436]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCC_OscConfig+0x19c>
 8001b50:	4b6a      	ldr	r3, [pc, #424]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a69      	ldr	r2, [pc, #420]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b67      	ldr	r3, [pc, #412]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a66      	ldr	r2, [pc, #408]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001b62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b66:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b68:	4b64      	ldr	r3, [pc, #400]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6c:	f023 020f 	bic.w	r2, r3, #15
 8001b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	495f      	ldr	r1, [pc, #380]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d059      	beq.n	8001c46 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b92:	f7ff fbeb 	bl	800136c <HAL_GetTick>
 8001b96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fbe6 	bl	800136c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b64      	cmp	r3, #100	@ 0x64
 8001baa:	d902      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	f000 bf43 	b.w	8002a38 <HAL_RCC_OscConfig+0x106c>
 8001bb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bb6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001bc6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	095b      	lsrs	r3, r3, #5
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d102      	bne.n	8001be4 <HAL_RCC_OscConfig+0x218>
 8001bde:	4b47      	ldr	r3, [pc, #284]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	e015      	b.n	8001c10 <HAL_RCC_OscConfig+0x244>
 8001be4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001be8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001bf8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bfc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001c00:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c14:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001c18:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001c1c:	fa92 f2a2 	rbit	r2, r2
 8001c20:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001c24:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001c28:	fab2 f282 	clz	r2, r2
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	f042 0220 	orr.w	r2, r2, #32
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	f002 021f 	and.w	r2, r2, #31
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0ab      	beq.n	8001b9c <HAL_RCC_OscConfig+0x1d0>
 8001c44:	e05d      	b.n	8001d02 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7ff fb91 	bl	800136c <HAL_GetTick>
 8001c4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff fb8c 	bl	800136c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b64      	cmp	r3, #100	@ 0x64
 8001c5e:	d902      	bls.n	8001c66 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	f000 bee9 	b.w	8002a38 <HAL_RCC_OscConfig+0x106c>
 8001c66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c6a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001c7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	095b      	lsrs	r3, r3, #5
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d102      	bne.n	8001c98 <HAL_RCC_OscConfig+0x2cc>
 8001c92:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	e015      	b.n	8001cc4 <HAL_RCC_OscConfig+0x2f8>
 8001c98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c9c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001cac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cb0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001cb4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <HAL_RCC_OscConfig+0x330>)
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cc8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001ccc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001cd0:	fa92 f2a2 	rbit	r2, r2
 8001cd4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001cd8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001cdc:	fab2 f282 	clz	r2, r2
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	f042 0220 	orr.w	r2, r2, #32
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	f002 021f 	and.w	r2, r2, #31
 8001cec:	2101      	movs	r1, #1
 8001cee:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1ab      	bne.n	8001c50 <HAL_RCC_OscConfig+0x284>
 8001cf8:	e003      	b.n	8001d02 <HAL_RCC_OscConfig+0x336>
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 817d 	beq.w	8002012 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d18:	4ba6      	ldr	r3, [pc, #664]	@ (8001fb4 <HAL_RCC_OscConfig+0x5e8>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00b      	beq.n	8001d3c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d24:	4ba3      	ldr	r3, [pc, #652]	@ (8001fb4 <HAL_RCC_OscConfig+0x5e8>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d172      	bne.n	8001e16 <HAL_RCC_OscConfig+0x44a>
 8001d30:	4ba0      	ldr	r3, [pc, #640]	@ (8001fb4 <HAL_RCC_OscConfig+0x5e8>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d16c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x44a>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001d4e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	095b      	lsrs	r3, r3, #5
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d102      	bne.n	8001d6c <HAL_RCC_OscConfig+0x3a0>
 8001d66:	4b93      	ldr	r3, [pc, #588]	@ (8001fb4 <HAL_RCC_OscConfig+0x5e8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	e013      	b.n	8001d94 <HAL_RCC_OscConfig+0x3c8>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001d7e:	2302      	movs	r3, #2
 8001d80:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001d84:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001d90:	4b88      	ldr	r3, [pc, #544]	@ (8001fb4 <HAL_RCC_OscConfig+0x5e8>)
 8001d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d94:	2202      	movs	r2, #2
 8001d96:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001d9a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001d9e:	fa92 f2a2 	rbit	r2, r2
 8001da2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001da6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001daa:	fab2 f282 	clz	r2, r2
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f042 0220 	orr.w	r2, r2, #32
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f002 021f 	and.w	r2, r2, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <HAL_RCC_OscConfig+0x410>
 8001dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d002      	beq.n	8001ddc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f000 be2e 	b.w	8002a38 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b75      	ldr	r3, [pc, #468]	@ (8001fb4 <HAL_RCC_OscConfig+0x5e8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	21f8      	movs	r1, #248	@ 0xf8
 8001df2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001dfa:	fa91 f1a1 	rbit	r1, r1
 8001dfe:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001e02:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001e06:	fab1 f181 	clz	r1, r1
 8001e0a:	b2c9      	uxtb	r1, r1
 8001e0c:	408b      	lsls	r3, r1
 8001e0e:	4969      	ldr	r1, [pc, #420]	@ (8001fb4 <HAL_RCC_OscConfig+0x5e8>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e14:	e0fd      	b.n	8002012 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8088 	beq.w	8001f38 <HAL_RCC_OscConfig+0x56c>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001e3a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e48:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2301      	movs	r3, #1
 8001e52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fa8a 	bl	800136c <HAL_GetTick>
 8001e58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e5e:	f7ff fa85 	bl	800136c <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d902      	bls.n	8001e74 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	f000 bde2 	b.w	8002a38 <HAL_RCC_OscConfig+0x106c>
 8001e74:	2302      	movs	r3, #2
 8001e76:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001e86:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d102      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4d8>
 8001e9e:	4b45      	ldr	r3, [pc, #276]	@ (8001fb4 <HAL_RCC_OscConfig+0x5e8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	e013      	b.n	8001ecc <HAL_RCC_OscConfig+0x500>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001ebc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001ec8:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb4 <HAL_RCC_OscConfig+0x5e8>)
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001ed2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001ed6:	fa92 f2a2 	rbit	r2, r2
 8001eda:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001ede:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001ee2:	fab2 f282 	clz	r2, r2
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f042 0220 	orr.w	r2, r2, #32
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	f002 021f 	and.w	r2, r2, #31
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0af      	beq.n	8001e5e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb4 <HAL_RCC_OscConfig+0x5e8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	21f8      	movs	r1, #248	@ 0xf8
 8001f14:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001f1c:	fa91 f1a1 	rbit	r1, r1
 8001f20:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001f24:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001f28:	fab1 f181 	clz	r1, r1
 8001f2c:	b2c9      	uxtb	r1, r1
 8001f2e:	408b      	lsls	r3, r1
 8001f30:	4920      	ldr	r1, [pc, #128]	@ (8001fb4 <HAL_RCC_OscConfig+0x5e8>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
 8001f36:	e06c      	b.n	8002012 <HAL_RCC_OscConfig+0x646>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001f4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f58:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2300      	movs	r3, #0
 8001f62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fa02 	bl	800136c <HAL_GetTick>
 8001f68:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7ff f9fd 	bl	800136c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d902      	bls.n	8001f84 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	f000 bd5a 	b.w	8002a38 <HAL_RCC_OscConfig+0x106c>
 8001f84:	2302      	movs	r3, #2
 8001f86:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	095b      	lsrs	r3, r3, #5
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d104      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x5ec>
 8001fae:	4b01      	ldr	r3, [pc, #4]	@ (8001fb4 <HAL_RCC_OscConfig+0x5e8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	e015      	b.n	8001fe0 <HAL_RCC_OscConfig+0x614>
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	2302      	movs	r3, #2
 8001fba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001fd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001fdc:	4bc8      	ldr	r3, [pc, #800]	@ (8002300 <HAL_RCC_OscConfig+0x934>)
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001fe6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001fea:	fa92 f2a2 	rbit	r2, r2
 8001fee:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001ff2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001ff6:	fab2 f282 	clz	r2, r2
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	f042 0220 	orr.w	r2, r2, #32
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	f002 021f 	and.w	r2, r2, #31
 8002006:	2101      	movs	r1, #1
 8002008:	fa01 f202 	lsl.w	r2, r1, r2
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1ad      	bne.n	8001f6e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002016:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8110 	beq.w	8002248 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d079      	beq.n	800212c <HAL_RCC_OscConfig+0x760>
 8002038:	2301      	movs	r3, #1
 800203a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800204a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	4bab      	ldr	r3, [pc, #684]	@ (8002304 <HAL_RCC_OscConfig+0x938>)
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	461a      	mov	r2, r3
 800205e:	2301      	movs	r3, #1
 8002060:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7ff f983 	bl	800136c <HAL_GetTick>
 8002066:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206a:	e00a      	b.n	8002082 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800206c:	f7ff f97e 	bl	800136c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d902      	bls.n	8002082 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	f000 bcdb 	b.w	8002a38 <HAL_RCC_OscConfig+0x106c>
 8002082:	2302      	movs	r3, #2
 8002084:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800208c:	fa93 f3a3 	rbit	r3, r3
 8002090:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002098:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800209c:	2202      	movs	r2, #2
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	fa93 f2a3 	rbit	r2, r3
 80020ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020c0:	2202      	movs	r2, #2
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	fa93 f2a3 	rbit	r2, r3
 80020d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020dc:	4b88      	ldr	r3, [pc, #544]	@ (8002300 <HAL_RCC_OscConfig+0x934>)
 80020de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020e8:	2102      	movs	r1, #2
 80020ea:	6019      	str	r1, [r3, #0]
 80020ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	fa93 f1a3 	rbit	r1, r3
 80020fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002102:	6019      	str	r1, [r3, #0]
  return result;
 8002104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002108:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	2101      	movs	r1, #1
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0a0      	beq.n	800206c <HAL_RCC_OscConfig+0x6a0>
 800212a:	e08d      	b.n	8002248 <HAL_RCC_OscConfig+0x87c>
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002134:	2201      	movs	r2, #1
 8002136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	fa93 f2a3 	rbit	r2, r3
 8002146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800214e:	601a      	str	r2, [r3, #0]
  return result;
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002158:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	4b68      	ldr	r3, [pc, #416]	@ (8002304 <HAL_RCC_OscConfig+0x938>)
 8002164:	4413      	add	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	461a      	mov	r2, r3
 800216a:	2300      	movs	r3, #0
 800216c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7ff f8fd 	bl	800136c <HAL_GetTick>
 8002172:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002176:	e00a      	b.n	800218e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002178:	f7ff f8f8 	bl	800136c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d902      	bls.n	800218e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	f000 bc55 	b.w	8002a38 <HAL_RCC_OscConfig+0x106c>
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002196:	2202      	movs	r2, #2
 8002198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	fa93 f2a3 	rbit	r2, r3
 80021a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021ba:	2202      	movs	r2, #2
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80021de:	2202      	movs	r2, #2
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	fa93 f2a3 	rbit	r2, r3
 80021f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80021f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fa:	4b41      	ldr	r3, [pc, #260]	@ (8002300 <HAL_RCC_OscConfig+0x934>)
 80021fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002202:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002206:	2102      	movs	r1, #2
 8002208:	6019      	str	r1, [r3, #0]
 800220a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	fa93 f1a3 	rbit	r1, r3
 8002218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002220:	6019      	str	r1, [r3, #0]
  return result;
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	2101      	movs	r1, #1
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d197      	bne.n	8002178 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 81a1 	beq.w	80025a0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002264:	4b26      	ldr	r3, [pc, #152]	@ (8002300 <HAL_RCC_OscConfig+0x934>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d116      	bne.n	800229e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002270:	4b23      	ldr	r3, [pc, #140]	@ (8002300 <HAL_RCC_OscConfig+0x934>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	4a22      	ldr	r2, [pc, #136]	@ (8002300 <HAL_RCC_OscConfig+0x934>)
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800227a:	61d3      	str	r3, [r2, #28]
 800227c:	4b20      	ldr	r3, [pc, #128]	@ (8002300 <HAL_RCC_OscConfig+0x934>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002288:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002292:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002296:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002298:	2301      	movs	r3, #1
 800229a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229e:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <HAL_RCC_OscConfig+0x93c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d11a      	bne.n	80022e0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022aa:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HAL_RCC_OscConfig+0x93c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a16      	ldr	r2, [pc, #88]	@ (8002308 <HAL_RCC_OscConfig+0x93c>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b6:	f7ff f859 	bl	800136c <HAL_GetTick>
 80022ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	e009      	b.n	80022d4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c0:	f7ff f854 	bl	800136c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b64      	cmp	r3, #100	@ 0x64
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e3b1      	b.n	8002a38 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <HAL_RCC_OscConfig+0x93c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ef      	beq.n	80022c0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d10d      	bne.n	800230c <HAL_RCC_OscConfig+0x940>
 80022f0:	4b03      	ldr	r3, [pc, #12]	@ (8002300 <HAL_RCC_OscConfig+0x934>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4a02      	ldr	r2, [pc, #8]	@ (8002300 <HAL_RCC_OscConfig+0x934>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6213      	str	r3, [r2, #32]
 80022fc:	e03c      	b.n	8002378 <HAL_RCC_OscConfig+0x9ac>
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	10908120 	.word	0x10908120
 8002308:	40007000 	.word	0x40007000
 800230c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002310:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10c      	bne.n	8002336 <HAL_RCC_OscConfig+0x96a>
 800231c:	4bc1      	ldr	r3, [pc, #772]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4ac0      	ldr	r2, [pc, #768]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	4bbe      	ldr	r3, [pc, #760]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4abd      	ldr	r2, [pc, #756]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 800232e:	f023 0304 	bic.w	r3, r3, #4
 8002332:	6213      	str	r3, [r2, #32]
 8002334:	e020      	b.n	8002378 <HAL_RCC_OscConfig+0x9ac>
 8002336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b05      	cmp	r3, #5
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x994>
 8002346:	4bb7      	ldr	r3, [pc, #732]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4ab6      	ldr	r2, [pc, #728]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	6213      	str	r3, [r2, #32]
 8002352:	4bb4      	ldr	r3, [pc, #720]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4ab3      	ldr	r2, [pc, #716]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6213      	str	r3, [r2, #32]
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0x9ac>
 8002360:	4bb0      	ldr	r3, [pc, #704]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4aaf      	ldr	r2, [pc, #700]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	6213      	str	r3, [r2, #32]
 800236c:	4bad      	ldr	r3, [pc, #692]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4aac      	ldr	r2, [pc, #688]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 8002372:	f023 0304 	bic.w	r3, r3, #4
 8002376:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8081 	beq.w	800248c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7fe ffef 	bl	800136c <HAL_GetTick>
 800238e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002394:	f7fe ffea 	bl	800136c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e345      	b.n	8002a38 <HAL_RCC_OscConfig+0x106c>
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023b4:	2202      	movs	r2, #2
 80023b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80023d8:	2202      	movs	r2, #2
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80023f2:	601a      	str	r2, [r3, #0]
  return result;
 80023f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80023fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d102      	bne.n	8002418 <HAL_RCC_OscConfig+0xa4c>
 8002412:	4b84      	ldr	r3, [pc, #528]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	e013      	b.n	8002440 <HAL_RCC_OscConfig+0xa74>
 8002418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002420:	2202      	movs	r2, #2
 8002422:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002428:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	fa93 f2a3 	rbit	r2, r3
 8002432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002436:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	4b79      	ldr	r3, [pc, #484]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002444:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002448:	2102      	movs	r1, #2
 800244a:	6011      	str	r1, [r2, #0]
 800244c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002450:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	fa92 f1a2 	rbit	r1, r2
 800245a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800245e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002462:	6011      	str	r1, [r2, #0]
  return result;
 8002464:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002468:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	fab2 f282 	clz	r2, r2
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	f002 021f 	and.w	r2, r2, #31
 800247e:	2101      	movs	r1, #1
 8002480:	fa01 f202 	lsl.w	r2, r1, r2
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d084      	beq.n	8002394 <HAL_RCC_OscConfig+0x9c8>
 800248a:	e07f      	b.n	800258c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248c:	f7fe ff6e 	bl	800136c <HAL_GetTick>
 8002490:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	e00b      	b.n	80024ae <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7fe ff69 	bl	800136c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e2c4      	b.n	8002a38 <HAL_RCC_OscConfig+0x106c>
 80024ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80024b6:	2202      	movs	r2, #2
 80024b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024be:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	fa93 f2a3 	rbit	r2, r3
 80024c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024cc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80024da:	2202      	movs	r2, #2
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	fa93 f2a3 	rbit	r2, r3
 80024ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80024f4:	601a      	str	r2, [r3, #0]
  return result;
 80024f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80024fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d102      	bne.n	800251a <HAL_RCC_OscConfig+0xb4e>
 8002514:	4b43      	ldr	r3, [pc, #268]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	e013      	b.n	8002542 <HAL_RCC_OscConfig+0xb76>
 800251a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002522:	2202      	movs	r2, #2
 8002524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fa93 f2a3 	rbit	r2, r3
 8002534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002538:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	4b39      	ldr	r3, [pc, #228]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002546:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800254a:	2102      	movs	r1, #2
 800254c:	6011      	str	r1, [r2, #0]
 800254e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002552:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	fa92 f1a2 	rbit	r1, r2
 800255c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002560:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002564:	6011      	str	r1, [r2, #0]
  return result;
 8002566:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800256a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	fab2 f282 	clz	r2, r2
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	f002 021f 	and.w	r2, r2, #31
 8002580:	2101      	movs	r1, #1
 8002582:	fa01 f202 	lsl.w	r2, r1, r2
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d184      	bne.n	8002496 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800258c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002590:	2b01      	cmp	r3, #1
 8002592:	d105      	bne.n	80025a0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002594:	4b23      	ldr	r3, [pc, #140]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	4a22      	ldr	r2, [pc, #136]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 800259a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800259e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 8242 	beq.w	8002a36 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002624 <HAL_RCC_OscConfig+0xc58>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	f000 8213 	beq.w	80029e6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	f040 8162 	bne.w	8002896 <HAL_RCC_OscConfig+0xeca>
 80025d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80025da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	fa93 f2a3 	rbit	r2, r3
 80025ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80025f6:	601a      	str	r2, [r3, #0]
  return result;
 80025f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002600:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800260c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	461a      	mov	r2, r3
 8002614:	2300      	movs	r3, #0
 8002616:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7fe fea8 	bl	800136c <HAL_GetTick>
 800261c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002620:	e00c      	b.n	800263c <HAL_RCC_OscConfig+0xc70>
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002628:	f7fe fea0 	bl	800136c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e1fd      	b.n	8002a38 <HAL_RCC_OscConfig+0x106c>
 800263c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002640:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002644:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	fa93 f2a3 	rbit	r2, r3
 8002658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002660:	601a      	str	r2, [r3, #0]
  return result;
 8002662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002666:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800266a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d102      	bne.n	8002686 <HAL_RCC_OscConfig+0xcba>
 8002680:	4bb0      	ldr	r3, [pc, #704]	@ (8002944 <HAL_RCC_OscConfig+0xf78>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	e027      	b.n	80026d6 <HAL_RCC_OscConfig+0xd0a>
 8002686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800268e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002698:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	fa93 f2a3 	rbit	r2, r3
 80026a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80026b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	fa93 f2a3 	rbit	r2, r3
 80026c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026cc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	4b9c      	ldr	r3, [pc, #624]	@ (8002944 <HAL_RCC_OscConfig+0xf78>)
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026da:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80026de:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026e2:	6011      	str	r1, [r2, #0]
 80026e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026e8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	fa92 f1a2 	rbit	r1, r2
 80026f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026f6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80026fa:	6011      	str	r1, [r2, #0]
  return result;
 80026fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002700:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	fab2 f282 	clz	r2, r2
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	f042 0220 	orr.w	r2, r2, #32
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	f002 021f 	and.w	r2, r2, #31
 8002716:	2101      	movs	r1, #1
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d182      	bne.n	8002628 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002722:	4b88      	ldr	r3, [pc, #544]	@ (8002944 <HAL_RCC_OscConfig+0xf78>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800272a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	430b      	orrs	r3, r1
 8002744:	497f      	ldr	r1, [pc, #508]	@ (8002944 <HAL_RCC_OscConfig+0xf78>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
 800274a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002752:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	fa93 f2a3 	rbit	r2, r3
 8002766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800276e:	601a      	str	r2, [r3, #0]
  return result;
 8002770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002774:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002778:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002784:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	461a      	mov	r2, r3
 800278c:	2301      	movs	r3, #1
 800278e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe fdec 	bl	800136c <HAL_GetTick>
 8002794:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002798:	e009      	b.n	80027ae <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279a:	f7fe fde7 	bl	800136c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e144      	b.n	8002a38 <HAL_RCC_OscConfig+0x106c>
 80027ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80027b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	fa93 f2a3 	rbit	r2, r3
 80027ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ce:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80027d2:	601a      	str	r2, [r3, #0]
  return result;
 80027d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80027dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d102      	bne.n	80027f8 <HAL_RCC_OscConfig+0xe2c>
 80027f2:	4b54      	ldr	r3, [pc, #336]	@ (8002944 <HAL_RCC_OscConfig+0xf78>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	e027      	b.n	8002848 <HAL_RCC_OscConfig+0xe7c>
 80027f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002800:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	fa93 f2a3 	rbit	r2, r3
 8002814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002818:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002822:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002826:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002830:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	fa93 f2a3 	rbit	r2, r3
 800283a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	4b3f      	ldr	r3, [pc, #252]	@ (8002944 <HAL_RCC_OscConfig+0xf78>)
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800284c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002850:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002854:	6011      	str	r1, [r2, #0]
 8002856:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800285a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	fa92 f1a2 	rbit	r1, r2
 8002864:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002868:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800286c:	6011      	str	r1, [r2, #0]
  return result;
 800286e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002872:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	fab2 f282 	clz	r2, r2
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f042 0220 	orr.w	r2, r2, #32
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	f002 021f 	and.w	r2, r2, #31
 8002888:	2101      	movs	r1, #1
 800288a:	fa01 f202 	lsl.w	r2, r1, r2
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d082      	beq.n	800279a <HAL_RCC_OscConfig+0xdce>
 8002894:	e0cf      	b.n	8002a36 <HAL_RCC_OscConfig+0x106a>
 8002896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800289e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	fa93 f2a3 	rbit	r2, r3
 80028b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028ba:	601a      	str	r2, [r3, #0]
  return result;
 80028bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	461a      	mov	r2, r3
 80028d8:	2300      	movs	r3, #0
 80028da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7fe fd46 	bl	800136c <HAL_GetTick>
 80028e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e4:	e009      	b.n	80028fa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe fd41 	bl	800136c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e09e      	b.n	8002a38 <HAL_RCC_OscConfig+0x106c>
 80028fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002902:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fa93 f2a3 	rbit	r2, r3
 8002916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800291e:	601a      	str	r2, [r3, #0]
  return result;
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002928:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d104      	bne.n	8002948 <HAL_RCC_OscConfig+0xf7c>
 800293e:	4b01      	ldr	r3, [pc, #4]	@ (8002944 <HAL_RCC_OscConfig+0xf78>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	e029      	b.n	8002998 <HAL_RCC_OscConfig+0xfcc>
 8002944:	40021000 	.word	0x40021000
 8002948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002950:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	fa93 f2a3 	rbit	r2, r3
 8002964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002968:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002972:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002976:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002980:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	fa93 f2a3 	rbit	r2, r3
 800298a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	4b2b      	ldr	r3, [pc, #172]	@ (8002a44 <HAL_RCC_OscConfig+0x1078>)
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800299c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80029a0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029a4:	6011      	str	r1, [r2, #0]
 80029a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029aa:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	fa92 f1a2 	rbit	r1, r2
 80029b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029b8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80029bc:	6011      	str	r1, [r2, #0]
  return result;
 80029be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029c2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	fab2 f282 	clz	r2, r2
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	f042 0220 	orr.w	r2, r2, #32
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	f002 021f 	and.w	r2, r2, #31
 80029d8:	2101      	movs	r1, #1
 80029da:	fa01 f202 	lsl.w	r2, r1, r2
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d180      	bne.n	80028e6 <HAL_RCC_OscConfig+0xf1a>
 80029e4:	e027      	b.n	8002a36 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e01e      	b.n	8002a38 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029fa:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <HAL_RCC_OscConfig+0x1078>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a06:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d10b      	bne.n	8002a32 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000

08002a48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b09e      	sub	sp, #120	@ 0x78
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e162      	b.n	8002d26 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b90      	ldr	r3, [pc, #576]	@ (8002ca4 <HAL_RCC_ClockConfig+0x25c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d910      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ca4 <HAL_RCC_ClockConfig+0x25c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 0207 	bic.w	r2, r3, #7
 8002a76:	498b      	ldr	r1, [pc, #556]	@ (8002ca4 <HAL_RCC_ClockConfig+0x25c>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b89      	ldr	r3, [pc, #548]	@ (8002ca4 <HAL_RCC_ClockConfig+0x25c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e14a      	b.n	8002d26 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a9c:	4b82      	ldr	r3, [pc, #520]	@ (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	497f      	ldr	r1, [pc, #508]	@ (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80dc 	beq.w	8002c74 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d13c      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xf6>
 8002ac4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ac8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d102      	bne.n	8002aee <HAL_RCC_ClockConfig+0xa6>
 8002ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	e00f      	b.n	8002b0e <HAL_RCC_ClockConfig+0xc6>
 8002aee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002af2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	667b      	str	r3, [r7, #100]	@ 0x64
 8002afc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b00:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b0a:	4b67      	ldr	r3, [pc, #412]	@ (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b16:	fa92 f2a2 	rbit	r2, r2
 8002b1a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002b1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b1e:	fab2 f282 	clz	r2, r2
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	f042 0220 	orr.w	r2, r2, #32
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f002 021f 	and.w	r2, r2, #31
 8002b2e:	2101      	movs	r1, #1
 8002b30:	fa01 f202 	lsl.w	r2, r1, r2
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d17b      	bne.n	8002c32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0f3      	b.n	8002d26 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d13c      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x178>
 8002b46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b4a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d102      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x128>
 8002b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	e00f      	b.n	8002b90 <HAL_RCC_ClockConfig+0x148>
 8002b70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b82:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b8c:	4b46      	ldr	r3, [pc, #280]	@ (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b94:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002b96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b98:	fa92 f2a2 	rbit	r2, r2
 8002b9c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002b9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ba0:	fab2 f282 	clz	r2, r2
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	f042 0220 	orr.w	r2, r2, #32
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	f002 021f 	and.w	r2, r2, #31
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d13a      	bne.n	8002c32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0b2      	b.n	8002d26 <HAL_RCC_ClockConfig+0x2de>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x1a0>
 8002be2:	4b31      	ldr	r3, [pc, #196]	@ (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e00d      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1bc>
 8002be8:	2302      	movs	r3, #2
 8002bea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	623b      	str	r3, [r7, #32]
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	4b29      	ldr	r3, [pc, #164]	@ (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	2202      	movs	r2, #2
 8002c06:	61ba      	str	r2, [r7, #24]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	fa92 f2a2 	rbit	r2, r2
 8002c0e:	617a      	str	r2, [r7, #20]
  return result;
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	fab2 f282 	clz	r2, r2
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	f042 0220 	orr.w	r2, r2, #32
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	f002 021f 	and.w	r2, r2, #31
 8002c22:	2101      	movs	r1, #1
 8002c24:	fa01 f202 	lsl.w	r2, r1, r2
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e079      	b.n	8002d26 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f023 0203 	bic.w	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	491a      	ldr	r1, [pc, #104]	@ (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c44:	f7fe fb92 	bl	800136c <HAL_GetTick>
 8002c48:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4a:	e00a      	b.n	8002c62 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c4c:	f7fe fb8e 	bl	800136c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e061      	b.n	8002d26 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_RCC_ClockConfig+0x260>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 020c 	and.w	r2, r3, #12
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d1eb      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <HAL_RCC_ClockConfig+0x25c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d214      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <HAL_RCC_ClockConfig+0x25c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 0207 	bic.w	r2, r3, #7
 8002c8a:	4906      	ldr	r1, [pc, #24]	@ (8002ca4 <HAL_RCC_ClockConfig+0x25c>)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c92:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <HAL_RCC_ClockConfig+0x25c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e040      	b.n	8002d26 <HAL_RCC_ClockConfig+0x2de>
 8002ca4:	40022000 	.word	0x40022000
 8002ca8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d30 <HAL_RCC_ClockConfig+0x2e8>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	491a      	ldr	r1, [pc, #104]	@ (8002d30 <HAL_RCC_ClockConfig+0x2e8>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd6:	4b16      	ldr	r3, [pc, #88]	@ (8002d30 <HAL_RCC_ClockConfig+0x2e8>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4912      	ldr	r1, [pc, #72]	@ (8002d30 <HAL_RCC_ClockConfig+0x2e8>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cea:	f000 f829 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cee:	4601      	mov	r1, r0
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d30 <HAL_RCC_ClockConfig+0x2e8>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cf8:	22f0      	movs	r2, #240	@ 0xf0
 8002cfa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	fa92 f2a2 	rbit	r2, r2
 8002d02:	60fa      	str	r2, [r7, #12]
  return result;
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	fab2 f282 	clz	r2, r2
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	40d3      	lsrs	r3, r2
 8002d0e:	4a09      	ldr	r2, [pc, #36]	@ (8002d34 <HAL_RCC_ClockConfig+0x2ec>)
 8002d10:	5cd3      	ldrb	r3, [r2, r3]
 8002d12:	fa21 f303 	lsr.w	r3, r1, r3
 8002d16:	4a08      	ldr	r2, [pc, #32]	@ (8002d38 <HAL_RCC_ClockConfig+0x2f0>)
 8002d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d1a:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <HAL_RCC_ClockConfig+0x2f4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fae0 	bl	80012e4 <HAL_InitTick>
  
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3778      	adds	r7, #120	@ 0x78
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08007190 	.word	0x08007190
 8002d38:	20000004 	.word	0x20000004
 8002d3c:	20000008 	.word	0x20000008

08002d40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d002      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x30>
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x36>
 8002d6e:	e026      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d70:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d72:	613b      	str	r3, [r7, #16]
      break;
 8002d74:	e026      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	0c9b      	lsrs	r3, r3, #18
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	4a17      	ldr	r2, [pc, #92]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d80:	5cd3      	ldrb	r3, [r2, r3]
 8002d82:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002d84:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	4a14      	ldr	r2, [pc, #80]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d9c:	4a0e      	ldr	r2, [pc, #56]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	e004      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a0c      	ldr	r2, [pc, #48]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	613b      	str	r3, [r7, #16]
      break;
 8002dbc:	e002      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dc0:	613b      	str	r3, [r7, #16]
      break;
 8002dc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dc4:	693b      	ldr	r3, [r7, #16]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	007a1200 	.word	0x007a1200
 8002ddc:	080071a8 	.word	0x080071a8
 8002de0:	080071b8 	.word	0x080071b8
 8002de4:	003d0900 	.word	0x003d0900

08002de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dec:	4b03      	ldr	r3, [pc, #12]	@ (8002dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000004 	.word	0x20000004

08002e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e06:	f7ff ffef 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e0a:	4601      	mov	r1, r0
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e14:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002e18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	fa92 f2a2 	rbit	r2, r2
 8002e20:	603a      	str	r2, [r7, #0]
  return result;
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	fab2 f282 	clz	r2, r2
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	40d3      	lsrs	r3, r2
 8002e2c:	4a04      	ldr	r2, [pc, #16]	@ (8002e40 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e2e:	5cd3      	ldrb	r3, [r2, r3]
 8002e30:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	080071a0 	.word	0x080071a0

08002e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e4a:	f7ff ffcd 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e4e:	4601      	mov	r1, r0
 8002e50:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002e58:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002e5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	fa92 f2a2 	rbit	r2, r2
 8002e64:	603a      	str	r2, [r7, #0]
  return result;
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	fab2 f282 	clz	r2, r2
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	40d3      	lsrs	r3, r2
 8002e70:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000
 8002e84:	080071a0 	.word	0x080071a0

08002e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e049      	b.n	8002f2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fe f812 	bl	8000ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	f000 f9e6 	bl	8003298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d001      	beq.n	8002f50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e038      	b.n	8002fc2 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd0 <HAL_TIM_Base_Start+0x98>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00e      	beq.n	8002f80 <HAL_TIM_Base_Start+0x48>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f6a:	d009      	beq.n	8002f80 <HAL_TIM_Base_Start+0x48>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a18      	ldr	r2, [pc, #96]	@ (8002fd4 <HAL_TIM_Base_Start+0x9c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_TIM_Base_Start+0x48>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a17      	ldr	r2, [pc, #92]	@ (8002fd8 <HAL_TIM_Base_Start+0xa0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d115      	bne.n	8002fac <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	4b15      	ldr	r3, [pc, #84]	@ (8002fdc <HAL_TIM_Base_Start+0xa4>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b06      	cmp	r3, #6
 8002f90:	d015      	beq.n	8002fbe <HAL_TIM_Base_Start+0x86>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f98:	d011      	beq.n	8002fbe <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002faa:	e008      	b.n	8002fbe <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e000      	b.n	8002fc0 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40014000 	.word	0x40014000
 8002fdc:	00010007 	.word	0x00010007

08002fe0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6a1a      	ldr	r2, [r3, #32]
 8002fee:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10f      	bne.n	8003018 <HAL_TIM_Base_Stop+0x38>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6a1a      	ldr	r2, [r3, #32]
 8002ffe:	f240 4344 	movw	r3, #1092	@ 0x444
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_TIM_Base_Stop+0x38>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01b      	beq.n	8003092 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f06f 0202 	mvn.w	r2, #2
 8003062:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f8ee 	bl	800325a <HAL_TIM_IC_CaptureCallback>
 800307e:	e005      	b.n	800308c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f8e0 	bl	8003246 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f8f1 	bl	800326e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01b      	beq.n	80030de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f06f 0204 	mvn.w	r2, #4
 80030ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f8c8 	bl	800325a <HAL_TIM_IC_CaptureCallback>
 80030ca:	e005      	b.n	80030d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f8ba 	bl	8003246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f8cb 	bl	800326e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01b      	beq.n	800312a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f06f 0208 	mvn.w	r2, #8
 80030fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2204      	movs	r2, #4
 8003100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f8a2 	bl	800325a <HAL_TIM_IC_CaptureCallback>
 8003116:	e005      	b.n	8003124 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f894 	bl	8003246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f8a5 	bl	800326e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01b      	beq.n	8003176 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f06f 0210 	mvn.w	r2, #16
 8003146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2208      	movs	r2, #8
 800314c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f87c 	bl	800325a <HAL_TIM_IC_CaptureCallback>
 8003162:	e005      	b.n	8003170 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f86e 	bl	8003246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f87f 	bl	800326e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00c      	beq.n	800319a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d007      	beq.n	800319a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f06f 0201 	mvn.w	r2, #1
 8003192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f84c 	bl	8003232 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00c      	beq.n	80031be <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d007      	beq.n	80031be <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f969 	bl	8003490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00c      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80031da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f961 	bl	80034a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00c      	beq.n	8003206 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f83e 	bl	8003282 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00c      	beq.n	800322a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f06f 0220 	mvn.w	r2, #32
 8003222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f929 	bl	800347c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a38      	ldr	r2, [pc, #224]	@ (800338c <TIM_Base_SetConfig+0xf4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d007      	beq.n	80032c0 <TIM_Base_SetConfig+0x28>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b6:	d003      	beq.n	80032c0 <TIM_Base_SetConfig+0x28>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a35      	ldr	r2, [pc, #212]	@ (8003390 <TIM_Base_SetConfig+0xf8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d108      	bne.n	80032d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a2d      	ldr	r2, [pc, #180]	@ (800338c <TIM_Base_SetConfig+0xf4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <TIM_Base_SetConfig+0x6a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e0:	d00f      	beq.n	8003302 <TIM_Base_SetConfig+0x6a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003390 <TIM_Base_SetConfig+0xf8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00b      	beq.n	8003302 <TIM_Base_SetConfig+0x6a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a29      	ldr	r2, [pc, #164]	@ (8003394 <TIM_Base_SetConfig+0xfc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <TIM_Base_SetConfig+0x6a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a28      	ldr	r2, [pc, #160]	@ (8003398 <TIM_Base_SetConfig+0x100>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d003      	beq.n	8003302 <TIM_Base_SetConfig+0x6a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a27      	ldr	r2, [pc, #156]	@ (800339c <TIM_Base_SetConfig+0x104>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d108      	bne.n	8003314 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a14      	ldr	r2, [pc, #80]	@ (800338c <TIM_Base_SetConfig+0xf4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00b      	beq.n	8003358 <TIM_Base_SetConfig+0xc0>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a14      	ldr	r2, [pc, #80]	@ (8003394 <TIM_Base_SetConfig+0xfc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d007      	beq.n	8003358 <TIM_Base_SetConfig+0xc0>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a13      	ldr	r2, [pc, #76]	@ (8003398 <TIM_Base_SetConfig+0x100>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_Base_SetConfig+0xc0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a12      	ldr	r2, [pc, #72]	@ (800339c <TIM_Base_SetConfig+0x104>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d103      	bne.n	8003360 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d105      	bne.n	800337e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f023 0201 	bic.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	611a      	str	r2, [r3, #16]
  }
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40000400 	.word	0x40000400
 8003394:	40014000 	.word	0x40014000
 8003398:	40014400 	.word	0x40014400
 800339c:	40014800 	.word	0x40014800

080033a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e054      	b.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a24      	ldr	r2, [pc, #144]	@ (8003470 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d108      	bne.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80033e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a17      	ldr	r2, [pc, #92]	@ (8003470 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00e      	beq.n	8003436 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003420:	d009      	beq.n	8003436 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a13      	ldr	r2, [pc, #76]	@ (8003474 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d004      	beq.n	8003436 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a11      	ldr	r2, [pc, #68]	@ (8003478 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d10c      	bne.n	8003450 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800343c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	4313      	orrs	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40012c00 	.word	0x40012c00
 8003474:	40000400 	.word	0x40000400
 8003478:	40014000 	.word	0x40014000

0800347c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e040      	b.n	800354c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fd fd22 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2224      	movs	r2, #36	@ 0x24
 80034e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fcc2 	bl	8003e88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fb89 	bl	8003c1c <UART_SetConfig>
 800350a:	4603      	mov	r3, r0
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e01b      	b.n	800354c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fd41 	bl	8003fcc <UART_CheckIdleState>
 800354a:	4603      	mov	r3, r0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003554:	b480      	push	{r7}
 8003556:	b08b      	sub	sp, #44	@ 0x2c
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	4613      	mov	r3, r2
 8003560:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003566:	2b20      	cmp	r3, #32
 8003568:	d147      	bne.n	80035fa <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_UART_Transmit_IT+0x22>
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e040      	b.n	80035fc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	88fa      	ldrh	r2, [r7, #6]
 8003584:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	88fa      	ldrh	r2, [r7, #6]
 800358c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2221      	movs	r2, #33	@ 0x21
 80035a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ac:	d107      	bne.n	80035be <HAL_UART_Transmit_IT+0x6a>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a13      	ldr	r2, [pc, #76]	@ (8003608 <HAL_UART_Transmit_IT+0xb4>)
 80035ba:	66da      	str	r2, [r3, #108]	@ 0x6c
 80035bc:	e002      	b.n	80035c4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4a12      	ldr	r2, [pc, #72]	@ (800360c <HAL_UART_Transmit_IT+0xb8>)
 80035c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	e853 3f00 	ldrex	r3, [r3]
 80035d0:	613b      	str	r3, [r7, #16]
   return(result);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	623b      	str	r3, [r7, #32]
 80035e4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e6:	69f9      	ldr	r1, [r7, #28]
 80035e8:	6a3a      	ldr	r2, [r7, #32]
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1e6      	bne.n	80035c4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e000      	b.n	80035fc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
  }
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	372c      	adds	r7, #44	@ 0x2c
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	080043a1 	.word	0x080043a1
 800360c:	080042eb 	.word	0x080042eb

08003610 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b0ba      	sub	sp, #232	@ 0xe8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003636:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800363a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800363e:	4013      	ands	r3, r2
 8003640:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d115      	bne.n	8003678 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800364c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00f      	beq.n	8003678 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 82ab 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
      }
      return;
 8003676:	e2a5      	b.n	8003bc4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8117 	beq.w	80038b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800368e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003692:	4b85      	ldr	r3, [pc, #532]	@ (80038a8 <HAL_UART_IRQHandler+0x298>)
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 810a 	beq.w	80038b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800369c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d011      	beq.n	80036cc <HAL_UART_IRQHandler+0xbc>
 80036a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2201      	movs	r2, #1
 80036ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036c2:	f043 0201 	orr.w	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d011      	beq.n	80036fc <HAL_UART_IRQHandler+0xec>
 80036d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2202      	movs	r2, #2
 80036ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036f2:	f043 0204 	orr.w	r2, r3, #4
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d011      	beq.n	800372c <HAL_UART_IRQHandler+0x11c>
 8003708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00b      	beq.n	800372c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2204      	movs	r2, #4
 800371a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003722:	f043 0202 	orr.w	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800372c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d017      	beq.n	8003768 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d105      	bne.n	8003750 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003748:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00b      	beq.n	8003768 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2208      	movs	r2, #8
 8003756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800375e:	f043 0208 	orr.w	r2, r3, #8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003770:	2b00      	cmp	r3, #0
 8003772:	d012      	beq.n	800379a <HAL_UART_IRQHandler+0x18a>
 8003774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003778:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00c      	beq.n	800379a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003788:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003790:	f043 0220 	orr.w	r2, r3, #32
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8211 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00d      	beq.n	80037ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d007      	beq.n	80037ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e2:	2b40      	cmp	r3, #64	@ 0x40
 80037e4:	d005      	beq.n	80037f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d04f      	beq.n	8003892 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fcff 	bl	80041f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003802:	2b40      	cmp	r3, #64	@ 0x40
 8003804:	d141      	bne.n	800388a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3308      	adds	r3, #8
 800380c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003810:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800381c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3308      	adds	r3, #8
 800382e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003832:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003836:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800383e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800384a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1d9      	bne.n	8003806 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003856:	2b00      	cmp	r3, #0
 8003858:	d013      	beq.n	8003882 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385e:	4a13      	ldr	r2, [pc, #76]	@ (80038ac <HAL_UART_IRQHandler+0x29c>)
 8003860:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd fedb 	bl	8001622 <HAL_DMA_Abort_IT>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d017      	beq.n	80038a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800387c:	4610      	mov	r0, r2
 800387e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003880:	e00f      	b.n	80038a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f9b4 	bl	8003bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003888:	e00b      	b.n	80038a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f9b0 	bl	8003bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003890:	e007      	b.n	80038a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f9ac 	bl	8003bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80038a0:	e192      	b.n	8003bc8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a2:	bf00      	nop
    return;
 80038a4:	e190      	b.n	8003bc8 <HAL_UART_IRQHandler+0x5b8>
 80038a6:	bf00      	nop
 80038a8:	04000120 	.word	0x04000120
 80038ac:	080042bf 	.word	0x080042bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	f040 814b 	bne.w	8003b50 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8144 	beq.w	8003b50 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 813d 	beq.w	8003b50 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2210      	movs	r2, #16
 80038dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e8:	2b40      	cmp	r3, #64	@ 0x40
 80038ea:	f040 80b5 	bne.w	8003a58 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8164 	beq.w	8003bcc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800390a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800390e:	429a      	cmp	r2, r3
 8003910:	f080 815c 	bcs.w	8003bcc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800391a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	2b20      	cmp	r3, #32
 8003926:	f000 8086 	beq.w	8003a36 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003932:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800393e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003942:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003946:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003954:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003958:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003960:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800396c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1da      	bne.n	800392a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3308      	adds	r3, #8
 800397a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003984:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3308      	adds	r3, #8
 8003994:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003998:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800399c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e1      	bne.n	8003974 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3308      	adds	r3, #8
 80039b6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039ba:	e853 3f00 	ldrex	r3, [r3]
 80039be:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3308      	adds	r3, #8
 80039d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039d4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e3      	bne.n	80039b0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039fe:	e853 3f00 	ldrex	r3, [r3]
 8003a02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a06:	f023 0310 	bic.w	r3, r3, #16
 8003a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a1a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e4      	bne.n	80039f6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fd fdb8 	bl	80015a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f8d7 	bl	8003c04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a56:	e0b9      	b.n	8003bcc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80ab 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003a7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80a6 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003aa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aa8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e4      	bne.n	8003a84 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	623b      	str	r3, [r7, #32]
   return(result);
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ade:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e3      	bne.n	8003aba <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0310 	bic.w	r3, r3, #16
 8003b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	69b9      	ldr	r1, [r7, #24]
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	617b      	str	r3, [r7, #20]
   return(result);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e4      	bne.n	8003b06 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f85b 	bl	8003c04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b4e:	e03f      	b.n	8003bd0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00e      	beq.n	8003b7a <HAL_UART_IRQHandler+0x56a>
 8003b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fc9e 	bl	80044b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b78:	e02d      	b.n	8003bd6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00e      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01c      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
    }
    return;
 8003ba2:	e017      	b.n	8003bd4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d012      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x5c6>
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00c      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fc4f 	bl	8004460 <UART_EndTransmit_IT>
    return;
 8003bc2:	e008      	b.n	8003bd6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003bc4:	bf00      	nop
 8003bc6:	e006      	b.n	8003bd6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003bc8:	bf00      	nop
 8003bca:	e004      	b.n	8003bd6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003bcc:	bf00      	nop
 8003bce:	e002      	b.n	8003bd6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003bd0:	bf00      	nop
 8003bd2:	e000      	b.n	8003bd6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003bd4:	bf00      	nop
  }

}
 8003bd6:	37e8      	adds	r7, #232	@ 0xe8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4b8a      	ldr	r3, [pc, #552]	@ (8003e70 <UART_SetConfig+0x254>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	6979      	ldr	r1, [r7, #20]
 8003c50:	430b      	orrs	r3, r1
 8003c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a78      	ldr	r2, [pc, #480]	@ (8003e74 <UART_SetConfig+0x258>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d120      	bne.n	8003cda <UART_SetConfig+0xbe>
 8003c98:	4b77      	ldr	r3, [pc, #476]	@ (8003e78 <UART_SetConfig+0x25c>)
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d817      	bhi.n	8003cd4 <UART_SetConfig+0xb8>
 8003ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cac <UART_SetConfig+0x90>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003cbd 	.word	0x08003cbd
 8003cb0:	08003cc9 	.word	0x08003cc9
 8003cb4:	08003ccf 	.word	0x08003ccf
 8003cb8:	08003cc3 	.word	0x08003cc3
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e01d      	b.n	8003cfe <UART_SetConfig+0xe2>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	e01a      	b.n	8003cfe <UART_SetConfig+0xe2>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e017      	b.n	8003cfe <UART_SetConfig+0xe2>
 8003cce:	2308      	movs	r3, #8
 8003cd0:	77fb      	strb	r3, [r7, #31]
 8003cd2:	e014      	b.n	8003cfe <UART_SetConfig+0xe2>
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e011      	b.n	8003cfe <UART_SetConfig+0xe2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a67      	ldr	r2, [pc, #412]	@ (8003e7c <UART_SetConfig+0x260>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d102      	bne.n	8003cea <UART_SetConfig+0xce>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e009      	b.n	8003cfe <UART_SetConfig+0xe2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a64      	ldr	r2, [pc, #400]	@ (8003e80 <UART_SetConfig+0x264>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d102      	bne.n	8003cfa <UART_SetConfig+0xde>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	77fb      	strb	r3, [r7, #31]
 8003cf8:	e001      	b.n	8003cfe <UART_SetConfig+0xe2>
 8003cfa:	2310      	movs	r3, #16
 8003cfc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d06:	d15a      	bne.n	8003dbe <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003d08:	7ffb      	ldrb	r3, [r7, #31]
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d827      	bhi.n	8003d5e <UART_SetConfig+0x142>
 8003d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d14 <UART_SetConfig+0xf8>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d39 	.word	0x08003d39
 8003d18:	08003d41 	.word	0x08003d41
 8003d1c:	08003d49 	.word	0x08003d49
 8003d20:	08003d5f 	.word	0x08003d5f
 8003d24:	08003d4f 	.word	0x08003d4f
 8003d28:	08003d5f 	.word	0x08003d5f
 8003d2c:	08003d5f 	.word	0x08003d5f
 8003d30:	08003d5f 	.word	0x08003d5f
 8003d34:	08003d57 	.word	0x08003d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d38:	f7ff f862 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 8003d3c:	61b8      	str	r0, [r7, #24]
        break;
 8003d3e:	e013      	b.n	8003d68 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d40:	f7ff f880 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
 8003d44:	61b8      	str	r0, [r7, #24]
        break;
 8003d46:	e00f      	b.n	8003d68 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d48:	4b4e      	ldr	r3, [pc, #312]	@ (8003e84 <UART_SetConfig+0x268>)
 8003d4a:	61bb      	str	r3, [r7, #24]
        break;
 8003d4c:	e00c      	b.n	8003d68 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d4e:	f7fe fff7 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8003d52:	61b8      	str	r0, [r7, #24]
        break;
 8003d54:	e008      	b.n	8003d68 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d5a:	61bb      	str	r3, [r7, #24]
        break;
 8003d5c:	e004      	b.n	8003d68 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	77bb      	strb	r3, [r7, #30]
        break;
 8003d66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d074      	beq.n	8003e58 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	005a      	lsls	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	441a      	add	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	2b0f      	cmp	r3, #15
 8003d88:	d916      	bls.n	8003db8 <UART_SetConfig+0x19c>
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d90:	d212      	bcs.n	8003db8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f023 030f 	bic.w	r3, r3, #15
 8003d9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	89fb      	ldrh	r3, [r7, #14]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	89fa      	ldrh	r2, [r7, #14]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	e04f      	b.n	8003e58 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	77bb      	strb	r3, [r7, #30]
 8003dbc:	e04c      	b.n	8003e58 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dbe:	7ffb      	ldrb	r3, [r7, #31]
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d828      	bhi.n	8003e16 <UART_SetConfig+0x1fa>
 8003dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <UART_SetConfig+0x1b0>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003df1 	.word	0x08003df1
 8003dd0:	08003df9 	.word	0x08003df9
 8003dd4:	08003e01 	.word	0x08003e01
 8003dd8:	08003e17 	.word	0x08003e17
 8003ddc:	08003e07 	.word	0x08003e07
 8003de0:	08003e17 	.word	0x08003e17
 8003de4:	08003e17 	.word	0x08003e17
 8003de8:	08003e17 	.word	0x08003e17
 8003dec:	08003e0f 	.word	0x08003e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df0:	f7ff f806 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 8003df4:	61b8      	str	r0, [r7, #24]
        break;
 8003df6:	e013      	b.n	8003e20 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df8:	f7ff f824 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
 8003dfc:	61b8      	str	r0, [r7, #24]
        break;
 8003dfe:	e00f      	b.n	8003e20 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e00:	4b20      	ldr	r3, [pc, #128]	@ (8003e84 <UART_SetConfig+0x268>)
 8003e02:	61bb      	str	r3, [r7, #24]
        break;
 8003e04:	e00c      	b.n	8003e20 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e06:	f7fe ff9b 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8003e0a:	61b8      	str	r0, [r7, #24]
        break;
 8003e0c:	e008      	b.n	8003e20 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e12:	61bb      	str	r3, [r7, #24]
        break;
 8003e14:	e004      	b.n	8003e20 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	77bb      	strb	r3, [r7, #30]
        break;
 8003e1e:	bf00      	nop
    }

    if (pclk != 0U)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d018      	beq.n	8003e58 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	085a      	lsrs	r2, r3, #1
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	441a      	add	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b0f      	cmp	r3, #15
 8003e3e:	d909      	bls.n	8003e54 <UART_SetConfig+0x238>
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e46:	d205      	bcs.n	8003e54 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	e001      	b.n	8003e58 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e64:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	efff69f3 	.word	0xefff69f3
 8003e74:	40013800 	.word	0x40013800
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40004400 	.word	0x40004400
 8003e80:	40004800 	.word	0x40004800
 8003e84:	007a1200 	.word	0x007a1200

08003e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01a      	beq.n	8003f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f86:	d10a      	bne.n	8003f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b098      	sub	sp, #96	@ 0x60
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fdc:	f7fd f9c6 	bl	800136c <HAL_GetTick>
 8003fe0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d12e      	bne.n	800404e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ff0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f88c 	bl	800411c <UART_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d021      	beq.n	800404e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800401e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004028:	647b      	str	r3, [r7, #68]	@ 0x44
 800402a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800402e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e6      	bne.n	800400a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e062      	b.n	8004114 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b04      	cmp	r3, #4
 800405a:	d149      	bne.n	80040f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800405c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004064:	2200      	movs	r2, #0
 8004066:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f856 	bl	800411c <UART_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d03c      	beq.n	80040f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	623b      	str	r3, [r7, #32]
   return(result);
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800408a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004094:	633b      	str	r3, [r7, #48]	@ 0x30
 8004096:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800409a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e6      	bne.n	8004076 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3308      	adds	r3, #8
 80040ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3308      	adds	r3, #8
 80040c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040c8:	61fa      	str	r2, [r7, #28]
 80040ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	69b9      	ldr	r1, [r7, #24]
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	617b      	str	r3, [r7, #20]
   return(result);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e5      	bne.n	80040a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e011      	b.n	8004114 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3758      	adds	r7, #88	@ 0x58
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	4613      	mov	r3, r2
 800412a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412c:	e04f      	b.n	80041ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d04b      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004136:	f7fd f919 	bl	800136c <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	429a      	cmp	r2, r3
 8004144:	d302      	bcc.n	800414c <UART_WaitOnFlagUntilTimeout+0x30>
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e04e      	b.n	80041ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	d037      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b80      	cmp	r3, #128	@ 0x80
 8004162:	d034      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b40      	cmp	r3, #64	@ 0x40
 8004168:	d031      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b08      	cmp	r3, #8
 8004176:	d110      	bne.n	800419a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2208      	movs	r2, #8
 800417e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f838 	bl	80041f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2208      	movs	r2, #8
 800418a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e029      	b.n	80041ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a8:	d111      	bne.n	80041ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f81e 	bl	80041f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e00f      	b.n	80041ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4013      	ands	r3, r2
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	bf0c      	ite	eq
 80041de:	2301      	moveq	r3, #1
 80041e0:	2300      	movne	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d0a0      	beq.n	800412e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b095      	sub	sp, #84	@ 0x54
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800420c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800421c:	643b      	str	r3, [r7, #64]	@ 0x40
 800421e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004222:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800422a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e6      	bne.n	80041fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3308      	adds	r3, #8
 8004236:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3308      	adds	r3, #8
 800424e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004250:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004252:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e5      	bne.n	8004230 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004268:	2b01      	cmp	r3, #1
 800426a:	d118      	bne.n	800429e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	60bb      	str	r3, [r7, #8]
   return(result);
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f023 0310 	bic.w	r3, r3, #16
 8004280:	647b      	str	r3, [r7, #68]	@ 0x44
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800428a:	61bb      	str	r3, [r7, #24]
 800428c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6979      	ldr	r1, [r7, #20]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	613b      	str	r3, [r7, #16]
   return(result);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e6      	bne.n	800426c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042b2:	bf00      	nop
 80042b4:	3754      	adds	r7, #84	@ 0x54
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f7ff fc87 	bl	8003bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b08f      	sub	sp, #60	@ 0x3c
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042f6:	2b21      	cmp	r3, #33	@ 0x21
 80042f8:	d14c      	bne.n	8004394 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d132      	bne.n	800436c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	61fb      	str	r3, [r7, #28]
   return(result);
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800431a:	637b      	str	r3, [r7, #52]	@ 0x34
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004326:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800432a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e6      	bne.n	8004306 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	e853 3f00 	ldrex	r3, [r3]
 8004344:	60bb      	str	r3, [r7, #8]
   return(result);
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800434c:	633b      	str	r3, [r7, #48]	@ 0x30
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	6979      	ldr	r1, [r7, #20]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	e841 2300 	strex	r3, r2, [r1]
 8004362:	613b      	str	r3, [r7, #16]
   return(result);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1e6      	bne.n	8004338 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800436a:	e013      	b.n	8004394 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004394:	bf00      	nop
 8004396:	373c      	adds	r7, #60	@ 0x3c
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b091      	sub	sp, #68	@ 0x44
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043ac:	2b21      	cmp	r3, #33	@ 0x21
 80043ae:	d151      	bne.n	8004454 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d132      	bne.n	8004422 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	623b      	str	r3, [r7, #32]
   return(result);
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043da:	633b      	str	r3, [r7, #48]	@ 0x30
 80043dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e6      	bne.n	80043bc <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004402:	637b      	str	r3, [r7, #52]	@ 0x34
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	617b      	str	r3, [r7, #20]
   return(result);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e6      	bne.n	80043ee <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004420:	e018      	b.n	8004454 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004426:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800442a:	881a      	ldrh	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004434:	b292      	uxth	r2, r2
 8004436:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443c:	1c9a      	adds	r2, r3, #2
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004454:	bf00      	nop
 8004456:	3744      	adds	r7, #68	@ 0x44
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	60bb      	str	r3, [r7, #8]
   return(result);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6979      	ldr	r1, [r7, #20]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	613b      	str	r3, [r7, #16]
   return(result);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e6      	bne.n	8004468 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff fb98 	bl	8003bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ac:	bf00      	nop
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <__cvt>:
 80044c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044cc:	ec57 6b10 	vmov	r6, r7, d0
 80044d0:	2f00      	cmp	r7, #0
 80044d2:	460c      	mov	r4, r1
 80044d4:	4619      	mov	r1, r3
 80044d6:	463b      	mov	r3, r7
 80044d8:	bfbb      	ittet	lt
 80044da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80044de:	461f      	movlt	r7, r3
 80044e0:	2300      	movge	r3, #0
 80044e2:	232d      	movlt	r3, #45	@ 0x2d
 80044e4:	700b      	strb	r3, [r1, #0]
 80044e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80044ec:	4691      	mov	r9, r2
 80044ee:	f023 0820 	bic.w	r8, r3, #32
 80044f2:	bfbc      	itt	lt
 80044f4:	4632      	movlt	r2, r6
 80044f6:	4616      	movlt	r6, r2
 80044f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80044fc:	d005      	beq.n	800450a <__cvt+0x42>
 80044fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004502:	d100      	bne.n	8004506 <__cvt+0x3e>
 8004504:	3401      	adds	r4, #1
 8004506:	2102      	movs	r1, #2
 8004508:	e000      	b.n	800450c <__cvt+0x44>
 800450a:	2103      	movs	r1, #3
 800450c:	ab03      	add	r3, sp, #12
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	ab02      	add	r3, sp, #8
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	ec47 6b10 	vmov	d0, r6, r7
 8004518:	4653      	mov	r3, sl
 800451a:	4622      	mov	r2, r4
 800451c:	f000 fe5c 	bl	80051d8 <_dtoa_r>
 8004520:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004524:	4605      	mov	r5, r0
 8004526:	d119      	bne.n	800455c <__cvt+0x94>
 8004528:	f019 0f01 	tst.w	r9, #1
 800452c:	d00e      	beq.n	800454c <__cvt+0x84>
 800452e:	eb00 0904 	add.w	r9, r0, r4
 8004532:	2200      	movs	r2, #0
 8004534:	2300      	movs	r3, #0
 8004536:	4630      	mov	r0, r6
 8004538:	4639      	mov	r1, r7
 800453a:	f7fc fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800453e:	b108      	cbz	r0, 8004544 <__cvt+0x7c>
 8004540:	f8cd 900c 	str.w	r9, [sp, #12]
 8004544:	2230      	movs	r2, #48	@ 0x30
 8004546:	9b03      	ldr	r3, [sp, #12]
 8004548:	454b      	cmp	r3, r9
 800454a:	d31e      	bcc.n	800458a <__cvt+0xc2>
 800454c:	9b03      	ldr	r3, [sp, #12]
 800454e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004550:	1b5b      	subs	r3, r3, r5
 8004552:	4628      	mov	r0, r5
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	b004      	add	sp, #16
 8004558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800455c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004560:	eb00 0904 	add.w	r9, r0, r4
 8004564:	d1e5      	bne.n	8004532 <__cvt+0x6a>
 8004566:	7803      	ldrb	r3, [r0, #0]
 8004568:	2b30      	cmp	r3, #48	@ 0x30
 800456a:	d10a      	bne.n	8004582 <__cvt+0xba>
 800456c:	2200      	movs	r2, #0
 800456e:	2300      	movs	r3, #0
 8004570:	4630      	mov	r0, r6
 8004572:	4639      	mov	r1, r7
 8004574:	f7fc faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004578:	b918      	cbnz	r0, 8004582 <__cvt+0xba>
 800457a:	f1c4 0401 	rsb	r4, r4, #1
 800457e:	f8ca 4000 	str.w	r4, [sl]
 8004582:	f8da 3000 	ldr.w	r3, [sl]
 8004586:	4499      	add	r9, r3
 8004588:	e7d3      	b.n	8004532 <__cvt+0x6a>
 800458a:	1c59      	adds	r1, r3, #1
 800458c:	9103      	str	r1, [sp, #12]
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	e7d9      	b.n	8004546 <__cvt+0x7e>

08004592 <__exponent>:
 8004592:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004594:	2900      	cmp	r1, #0
 8004596:	bfba      	itte	lt
 8004598:	4249      	neglt	r1, r1
 800459a:	232d      	movlt	r3, #45	@ 0x2d
 800459c:	232b      	movge	r3, #43	@ 0x2b
 800459e:	2909      	cmp	r1, #9
 80045a0:	7002      	strb	r2, [r0, #0]
 80045a2:	7043      	strb	r3, [r0, #1]
 80045a4:	dd29      	ble.n	80045fa <__exponent+0x68>
 80045a6:	f10d 0307 	add.w	r3, sp, #7
 80045aa:	461d      	mov	r5, r3
 80045ac:	270a      	movs	r7, #10
 80045ae:	461a      	mov	r2, r3
 80045b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80045b4:	fb07 1416 	mls	r4, r7, r6, r1
 80045b8:	3430      	adds	r4, #48	@ 0x30
 80045ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80045be:	460c      	mov	r4, r1
 80045c0:	2c63      	cmp	r4, #99	@ 0x63
 80045c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80045c6:	4631      	mov	r1, r6
 80045c8:	dcf1      	bgt.n	80045ae <__exponent+0x1c>
 80045ca:	3130      	adds	r1, #48	@ 0x30
 80045cc:	1e94      	subs	r4, r2, #2
 80045ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80045d2:	1c41      	adds	r1, r0, #1
 80045d4:	4623      	mov	r3, r4
 80045d6:	42ab      	cmp	r3, r5
 80045d8:	d30a      	bcc.n	80045f0 <__exponent+0x5e>
 80045da:	f10d 0309 	add.w	r3, sp, #9
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	42ac      	cmp	r4, r5
 80045e2:	bf88      	it	hi
 80045e4:	2300      	movhi	r3, #0
 80045e6:	3302      	adds	r3, #2
 80045e8:	4403      	add	r3, r0
 80045ea:	1a18      	subs	r0, r3, r0
 80045ec:	b003      	add	sp, #12
 80045ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80045f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80045f8:	e7ed      	b.n	80045d6 <__exponent+0x44>
 80045fa:	2330      	movs	r3, #48	@ 0x30
 80045fc:	3130      	adds	r1, #48	@ 0x30
 80045fe:	7083      	strb	r3, [r0, #2]
 8004600:	70c1      	strb	r1, [r0, #3]
 8004602:	1d03      	adds	r3, r0, #4
 8004604:	e7f1      	b.n	80045ea <__exponent+0x58>
	...

08004608 <_printf_float>:
 8004608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800460c:	b08d      	sub	sp, #52	@ 0x34
 800460e:	460c      	mov	r4, r1
 8004610:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004614:	4616      	mov	r6, r2
 8004616:	461f      	mov	r7, r3
 8004618:	4605      	mov	r5, r0
 800461a:	f000 fcdb 	bl	8004fd4 <_localeconv_r>
 800461e:	6803      	ldr	r3, [r0, #0]
 8004620:	9304      	str	r3, [sp, #16]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fb fe24 	bl	8000270 <strlen>
 8004628:	2300      	movs	r3, #0
 800462a:	930a      	str	r3, [sp, #40]	@ 0x28
 800462c:	f8d8 3000 	ldr.w	r3, [r8]
 8004630:	9005      	str	r0, [sp, #20]
 8004632:	3307      	adds	r3, #7
 8004634:	f023 0307 	bic.w	r3, r3, #7
 8004638:	f103 0208 	add.w	r2, r3, #8
 800463c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004640:	f8d4 b000 	ldr.w	fp, [r4]
 8004644:	f8c8 2000 	str.w	r2, [r8]
 8004648:	e9d3 8900 	ldrd	r8, r9, [r3]
 800464c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004650:	9307      	str	r3, [sp, #28]
 8004652:	f8cd 8018 	str.w	r8, [sp, #24]
 8004656:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800465a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800465e:	4b9c      	ldr	r3, [pc, #624]	@ (80048d0 <_printf_float+0x2c8>)
 8004660:	f04f 32ff 	mov.w	r2, #4294967295
 8004664:	f7fc fa62 	bl	8000b2c <__aeabi_dcmpun>
 8004668:	bb70      	cbnz	r0, 80046c8 <_printf_float+0xc0>
 800466a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800466e:	4b98      	ldr	r3, [pc, #608]	@ (80048d0 <_printf_float+0x2c8>)
 8004670:	f04f 32ff 	mov.w	r2, #4294967295
 8004674:	f7fc fa3c 	bl	8000af0 <__aeabi_dcmple>
 8004678:	bb30      	cbnz	r0, 80046c8 <_printf_float+0xc0>
 800467a:	2200      	movs	r2, #0
 800467c:	2300      	movs	r3, #0
 800467e:	4640      	mov	r0, r8
 8004680:	4649      	mov	r1, r9
 8004682:	f7fc fa2b 	bl	8000adc <__aeabi_dcmplt>
 8004686:	b110      	cbz	r0, 800468e <_printf_float+0x86>
 8004688:	232d      	movs	r3, #45	@ 0x2d
 800468a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800468e:	4a91      	ldr	r2, [pc, #580]	@ (80048d4 <_printf_float+0x2cc>)
 8004690:	4b91      	ldr	r3, [pc, #580]	@ (80048d8 <_printf_float+0x2d0>)
 8004692:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004696:	bf94      	ite	ls
 8004698:	4690      	movls	r8, r2
 800469a:	4698      	movhi	r8, r3
 800469c:	2303      	movs	r3, #3
 800469e:	6123      	str	r3, [r4, #16]
 80046a0:	f02b 0304 	bic.w	r3, fp, #4
 80046a4:	6023      	str	r3, [r4, #0]
 80046a6:	f04f 0900 	mov.w	r9, #0
 80046aa:	9700      	str	r7, [sp, #0]
 80046ac:	4633      	mov	r3, r6
 80046ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80046b0:	4621      	mov	r1, r4
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 f9d2 	bl	8004a5c <_printf_common>
 80046b8:	3001      	adds	r0, #1
 80046ba:	f040 808d 	bne.w	80047d8 <_printf_float+0x1d0>
 80046be:	f04f 30ff 	mov.w	r0, #4294967295
 80046c2:	b00d      	add	sp, #52	@ 0x34
 80046c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	4640      	mov	r0, r8
 80046ce:	4649      	mov	r1, r9
 80046d0:	f7fc fa2c 	bl	8000b2c <__aeabi_dcmpun>
 80046d4:	b140      	cbz	r0, 80046e8 <_printf_float+0xe0>
 80046d6:	464b      	mov	r3, r9
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bfbc      	itt	lt
 80046dc:	232d      	movlt	r3, #45	@ 0x2d
 80046de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80046e2:	4a7e      	ldr	r2, [pc, #504]	@ (80048dc <_printf_float+0x2d4>)
 80046e4:	4b7e      	ldr	r3, [pc, #504]	@ (80048e0 <_printf_float+0x2d8>)
 80046e6:	e7d4      	b.n	8004692 <_printf_float+0x8a>
 80046e8:	6863      	ldr	r3, [r4, #4]
 80046ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80046ee:	9206      	str	r2, [sp, #24]
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	d13b      	bne.n	800476c <_printf_float+0x164>
 80046f4:	2306      	movs	r3, #6
 80046f6:	6063      	str	r3, [r4, #4]
 80046f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80046fc:	2300      	movs	r3, #0
 80046fe:	6022      	str	r2, [r4, #0]
 8004700:	9303      	str	r3, [sp, #12]
 8004702:	ab0a      	add	r3, sp, #40	@ 0x28
 8004704:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004708:	ab09      	add	r3, sp, #36	@ 0x24
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	6861      	ldr	r1, [r4, #4]
 800470e:	ec49 8b10 	vmov	d0, r8, r9
 8004712:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004716:	4628      	mov	r0, r5
 8004718:	f7ff fed6 	bl	80044c8 <__cvt>
 800471c:	9b06      	ldr	r3, [sp, #24]
 800471e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004720:	2b47      	cmp	r3, #71	@ 0x47
 8004722:	4680      	mov	r8, r0
 8004724:	d129      	bne.n	800477a <_printf_float+0x172>
 8004726:	1cc8      	adds	r0, r1, #3
 8004728:	db02      	blt.n	8004730 <_printf_float+0x128>
 800472a:	6863      	ldr	r3, [r4, #4]
 800472c:	4299      	cmp	r1, r3
 800472e:	dd41      	ble.n	80047b4 <_printf_float+0x1ac>
 8004730:	f1aa 0a02 	sub.w	sl, sl, #2
 8004734:	fa5f fa8a 	uxtb.w	sl, sl
 8004738:	3901      	subs	r1, #1
 800473a:	4652      	mov	r2, sl
 800473c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004740:	9109      	str	r1, [sp, #36]	@ 0x24
 8004742:	f7ff ff26 	bl	8004592 <__exponent>
 8004746:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004748:	1813      	adds	r3, r2, r0
 800474a:	2a01      	cmp	r2, #1
 800474c:	4681      	mov	r9, r0
 800474e:	6123      	str	r3, [r4, #16]
 8004750:	dc02      	bgt.n	8004758 <_printf_float+0x150>
 8004752:	6822      	ldr	r2, [r4, #0]
 8004754:	07d2      	lsls	r2, r2, #31
 8004756:	d501      	bpl.n	800475c <_printf_float+0x154>
 8004758:	3301      	adds	r3, #1
 800475a:	6123      	str	r3, [r4, #16]
 800475c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0a2      	beq.n	80046aa <_printf_float+0xa2>
 8004764:	232d      	movs	r3, #45	@ 0x2d
 8004766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800476a:	e79e      	b.n	80046aa <_printf_float+0xa2>
 800476c:	9a06      	ldr	r2, [sp, #24]
 800476e:	2a47      	cmp	r2, #71	@ 0x47
 8004770:	d1c2      	bne.n	80046f8 <_printf_float+0xf0>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1c0      	bne.n	80046f8 <_printf_float+0xf0>
 8004776:	2301      	movs	r3, #1
 8004778:	e7bd      	b.n	80046f6 <_printf_float+0xee>
 800477a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800477e:	d9db      	bls.n	8004738 <_printf_float+0x130>
 8004780:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004784:	d118      	bne.n	80047b8 <_printf_float+0x1b0>
 8004786:	2900      	cmp	r1, #0
 8004788:	6863      	ldr	r3, [r4, #4]
 800478a:	dd0b      	ble.n	80047a4 <_printf_float+0x19c>
 800478c:	6121      	str	r1, [r4, #16]
 800478e:	b913      	cbnz	r3, 8004796 <_printf_float+0x18e>
 8004790:	6822      	ldr	r2, [r4, #0]
 8004792:	07d0      	lsls	r0, r2, #31
 8004794:	d502      	bpl.n	800479c <_printf_float+0x194>
 8004796:	3301      	adds	r3, #1
 8004798:	440b      	add	r3, r1
 800479a:	6123      	str	r3, [r4, #16]
 800479c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800479e:	f04f 0900 	mov.w	r9, #0
 80047a2:	e7db      	b.n	800475c <_printf_float+0x154>
 80047a4:	b913      	cbnz	r3, 80047ac <_printf_float+0x1a4>
 80047a6:	6822      	ldr	r2, [r4, #0]
 80047a8:	07d2      	lsls	r2, r2, #31
 80047aa:	d501      	bpl.n	80047b0 <_printf_float+0x1a8>
 80047ac:	3302      	adds	r3, #2
 80047ae:	e7f4      	b.n	800479a <_printf_float+0x192>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e7f2      	b.n	800479a <_printf_float+0x192>
 80047b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80047b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047ba:	4299      	cmp	r1, r3
 80047bc:	db05      	blt.n	80047ca <_printf_float+0x1c2>
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	6121      	str	r1, [r4, #16]
 80047c2:	07d8      	lsls	r0, r3, #31
 80047c4:	d5ea      	bpl.n	800479c <_printf_float+0x194>
 80047c6:	1c4b      	adds	r3, r1, #1
 80047c8:	e7e7      	b.n	800479a <_printf_float+0x192>
 80047ca:	2900      	cmp	r1, #0
 80047cc:	bfd4      	ite	le
 80047ce:	f1c1 0202 	rsble	r2, r1, #2
 80047d2:	2201      	movgt	r2, #1
 80047d4:	4413      	add	r3, r2
 80047d6:	e7e0      	b.n	800479a <_printf_float+0x192>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	055a      	lsls	r2, r3, #21
 80047dc:	d407      	bmi.n	80047ee <_printf_float+0x1e6>
 80047de:	6923      	ldr	r3, [r4, #16]
 80047e0:	4642      	mov	r2, r8
 80047e2:	4631      	mov	r1, r6
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b8      	blx	r7
 80047e8:	3001      	adds	r0, #1
 80047ea:	d12b      	bne.n	8004844 <_printf_float+0x23c>
 80047ec:	e767      	b.n	80046be <_printf_float+0xb6>
 80047ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80047f2:	f240 80dd 	bls.w	80049b0 <_printf_float+0x3a8>
 80047f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80047fa:	2200      	movs	r2, #0
 80047fc:	2300      	movs	r3, #0
 80047fe:	f7fc f963 	bl	8000ac8 <__aeabi_dcmpeq>
 8004802:	2800      	cmp	r0, #0
 8004804:	d033      	beq.n	800486e <_printf_float+0x266>
 8004806:	4a37      	ldr	r2, [pc, #220]	@ (80048e4 <_printf_float+0x2dc>)
 8004808:	2301      	movs	r3, #1
 800480a:	4631      	mov	r1, r6
 800480c:	4628      	mov	r0, r5
 800480e:	47b8      	blx	r7
 8004810:	3001      	adds	r0, #1
 8004812:	f43f af54 	beq.w	80046be <_printf_float+0xb6>
 8004816:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800481a:	4543      	cmp	r3, r8
 800481c:	db02      	blt.n	8004824 <_printf_float+0x21c>
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	07d8      	lsls	r0, r3, #31
 8004822:	d50f      	bpl.n	8004844 <_printf_float+0x23c>
 8004824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004828:	4631      	mov	r1, r6
 800482a:	4628      	mov	r0, r5
 800482c:	47b8      	blx	r7
 800482e:	3001      	adds	r0, #1
 8004830:	f43f af45 	beq.w	80046be <_printf_float+0xb6>
 8004834:	f04f 0900 	mov.w	r9, #0
 8004838:	f108 38ff 	add.w	r8, r8, #4294967295
 800483c:	f104 0a1a 	add.w	sl, r4, #26
 8004840:	45c8      	cmp	r8, r9
 8004842:	dc09      	bgt.n	8004858 <_printf_float+0x250>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	079b      	lsls	r3, r3, #30
 8004848:	f100 8103 	bmi.w	8004a52 <_printf_float+0x44a>
 800484c:	68e0      	ldr	r0, [r4, #12]
 800484e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004850:	4298      	cmp	r0, r3
 8004852:	bfb8      	it	lt
 8004854:	4618      	movlt	r0, r3
 8004856:	e734      	b.n	80046c2 <_printf_float+0xba>
 8004858:	2301      	movs	r3, #1
 800485a:	4652      	mov	r2, sl
 800485c:	4631      	mov	r1, r6
 800485e:	4628      	mov	r0, r5
 8004860:	47b8      	blx	r7
 8004862:	3001      	adds	r0, #1
 8004864:	f43f af2b 	beq.w	80046be <_printf_float+0xb6>
 8004868:	f109 0901 	add.w	r9, r9, #1
 800486c:	e7e8      	b.n	8004840 <_printf_float+0x238>
 800486e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	dc39      	bgt.n	80048e8 <_printf_float+0x2e0>
 8004874:	4a1b      	ldr	r2, [pc, #108]	@ (80048e4 <_printf_float+0x2dc>)
 8004876:	2301      	movs	r3, #1
 8004878:	4631      	mov	r1, r6
 800487a:	4628      	mov	r0, r5
 800487c:	47b8      	blx	r7
 800487e:	3001      	adds	r0, #1
 8004880:	f43f af1d 	beq.w	80046be <_printf_float+0xb6>
 8004884:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004888:	ea59 0303 	orrs.w	r3, r9, r3
 800488c:	d102      	bne.n	8004894 <_printf_float+0x28c>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	07d9      	lsls	r1, r3, #31
 8004892:	d5d7      	bpl.n	8004844 <_printf_float+0x23c>
 8004894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004898:	4631      	mov	r1, r6
 800489a:	4628      	mov	r0, r5
 800489c:	47b8      	blx	r7
 800489e:	3001      	adds	r0, #1
 80048a0:	f43f af0d 	beq.w	80046be <_printf_float+0xb6>
 80048a4:	f04f 0a00 	mov.w	sl, #0
 80048a8:	f104 0b1a 	add.w	fp, r4, #26
 80048ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048ae:	425b      	negs	r3, r3
 80048b0:	4553      	cmp	r3, sl
 80048b2:	dc01      	bgt.n	80048b8 <_printf_float+0x2b0>
 80048b4:	464b      	mov	r3, r9
 80048b6:	e793      	b.n	80047e0 <_printf_float+0x1d8>
 80048b8:	2301      	movs	r3, #1
 80048ba:	465a      	mov	r2, fp
 80048bc:	4631      	mov	r1, r6
 80048be:	4628      	mov	r0, r5
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	f43f aefb 	beq.w	80046be <_printf_float+0xb6>
 80048c8:	f10a 0a01 	add.w	sl, sl, #1
 80048cc:	e7ee      	b.n	80048ac <_printf_float+0x2a4>
 80048ce:	bf00      	nop
 80048d0:	7fefffff 	.word	0x7fefffff
 80048d4:	080071c8 	.word	0x080071c8
 80048d8:	080071cc 	.word	0x080071cc
 80048dc:	080071d0 	.word	0x080071d0
 80048e0:	080071d4 	.word	0x080071d4
 80048e4:	080071d8 	.word	0x080071d8
 80048e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80048ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80048ee:	4553      	cmp	r3, sl
 80048f0:	bfa8      	it	ge
 80048f2:	4653      	movge	r3, sl
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	4699      	mov	r9, r3
 80048f8:	dc36      	bgt.n	8004968 <_printf_float+0x360>
 80048fa:	f04f 0b00 	mov.w	fp, #0
 80048fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004902:	f104 021a 	add.w	r2, r4, #26
 8004906:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004908:	9306      	str	r3, [sp, #24]
 800490a:	eba3 0309 	sub.w	r3, r3, r9
 800490e:	455b      	cmp	r3, fp
 8004910:	dc31      	bgt.n	8004976 <_printf_float+0x36e>
 8004912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004914:	459a      	cmp	sl, r3
 8004916:	dc3a      	bgt.n	800498e <_printf_float+0x386>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	07da      	lsls	r2, r3, #31
 800491c:	d437      	bmi.n	800498e <_printf_float+0x386>
 800491e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004920:	ebaa 0903 	sub.w	r9, sl, r3
 8004924:	9b06      	ldr	r3, [sp, #24]
 8004926:	ebaa 0303 	sub.w	r3, sl, r3
 800492a:	4599      	cmp	r9, r3
 800492c:	bfa8      	it	ge
 800492e:	4699      	movge	r9, r3
 8004930:	f1b9 0f00 	cmp.w	r9, #0
 8004934:	dc33      	bgt.n	800499e <_printf_float+0x396>
 8004936:	f04f 0800 	mov.w	r8, #0
 800493a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800493e:	f104 0b1a 	add.w	fp, r4, #26
 8004942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004944:	ebaa 0303 	sub.w	r3, sl, r3
 8004948:	eba3 0309 	sub.w	r3, r3, r9
 800494c:	4543      	cmp	r3, r8
 800494e:	f77f af79 	ble.w	8004844 <_printf_float+0x23c>
 8004952:	2301      	movs	r3, #1
 8004954:	465a      	mov	r2, fp
 8004956:	4631      	mov	r1, r6
 8004958:	4628      	mov	r0, r5
 800495a:	47b8      	blx	r7
 800495c:	3001      	adds	r0, #1
 800495e:	f43f aeae 	beq.w	80046be <_printf_float+0xb6>
 8004962:	f108 0801 	add.w	r8, r8, #1
 8004966:	e7ec      	b.n	8004942 <_printf_float+0x33a>
 8004968:	4642      	mov	r2, r8
 800496a:	4631      	mov	r1, r6
 800496c:	4628      	mov	r0, r5
 800496e:	47b8      	blx	r7
 8004970:	3001      	adds	r0, #1
 8004972:	d1c2      	bne.n	80048fa <_printf_float+0x2f2>
 8004974:	e6a3      	b.n	80046be <_printf_float+0xb6>
 8004976:	2301      	movs	r3, #1
 8004978:	4631      	mov	r1, r6
 800497a:	4628      	mov	r0, r5
 800497c:	9206      	str	r2, [sp, #24]
 800497e:	47b8      	blx	r7
 8004980:	3001      	adds	r0, #1
 8004982:	f43f ae9c 	beq.w	80046be <_printf_float+0xb6>
 8004986:	9a06      	ldr	r2, [sp, #24]
 8004988:	f10b 0b01 	add.w	fp, fp, #1
 800498c:	e7bb      	b.n	8004906 <_printf_float+0x2fe>
 800498e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004992:	4631      	mov	r1, r6
 8004994:	4628      	mov	r0, r5
 8004996:	47b8      	blx	r7
 8004998:	3001      	adds	r0, #1
 800499a:	d1c0      	bne.n	800491e <_printf_float+0x316>
 800499c:	e68f      	b.n	80046be <_printf_float+0xb6>
 800499e:	9a06      	ldr	r2, [sp, #24]
 80049a0:	464b      	mov	r3, r9
 80049a2:	4442      	add	r2, r8
 80049a4:	4631      	mov	r1, r6
 80049a6:	4628      	mov	r0, r5
 80049a8:	47b8      	blx	r7
 80049aa:	3001      	adds	r0, #1
 80049ac:	d1c3      	bne.n	8004936 <_printf_float+0x32e>
 80049ae:	e686      	b.n	80046be <_printf_float+0xb6>
 80049b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80049b4:	f1ba 0f01 	cmp.w	sl, #1
 80049b8:	dc01      	bgt.n	80049be <_printf_float+0x3b6>
 80049ba:	07db      	lsls	r3, r3, #31
 80049bc:	d536      	bpl.n	8004a2c <_printf_float+0x424>
 80049be:	2301      	movs	r3, #1
 80049c0:	4642      	mov	r2, r8
 80049c2:	4631      	mov	r1, r6
 80049c4:	4628      	mov	r0, r5
 80049c6:	47b8      	blx	r7
 80049c8:	3001      	adds	r0, #1
 80049ca:	f43f ae78 	beq.w	80046be <_printf_float+0xb6>
 80049ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049d2:	4631      	mov	r1, r6
 80049d4:	4628      	mov	r0, r5
 80049d6:	47b8      	blx	r7
 80049d8:	3001      	adds	r0, #1
 80049da:	f43f ae70 	beq.w	80046be <_printf_float+0xb6>
 80049de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80049e2:	2200      	movs	r2, #0
 80049e4:	2300      	movs	r3, #0
 80049e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049ea:	f7fc f86d 	bl	8000ac8 <__aeabi_dcmpeq>
 80049ee:	b9c0      	cbnz	r0, 8004a22 <_printf_float+0x41a>
 80049f0:	4653      	mov	r3, sl
 80049f2:	f108 0201 	add.w	r2, r8, #1
 80049f6:	4631      	mov	r1, r6
 80049f8:	4628      	mov	r0, r5
 80049fa:	47b8      	blx	r7
 80049fc:	3001      	adds	r0, #1
 80049fe:	d10c      	bne.n	8004a1a <_printf_float+0x412>
 8004a00:	e65d      	b.n	80046be <_printf_float+0xb6>
 8004a02:	2301      	movs	r3, #1
 8004a04:	465a      	mov	r2, fp
 8004a06:	4631      	mov	r1, r6
 8004a08:	4628      	mov	r0, r5
 8004a0a:	47b8      	blx	r7
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	f43f ae56 	beq.w	80046be <_printf_float+0xb6>
 8004a12:	f108 0801 	add.w	r8, r8, #1
 8004a16:	45d0      	cmp	r8, sl
 8004a18:	dbf3      	blt.n	8004a02 <_printf_float+0x3fa>
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004a20:	e6df      	b.n	80047e2 <_printf_float+0x1da>
 8004a22:	f04f 0800 	mov.w	r8, #0
 8004a26:	f104 0b1a 	add.w	fp, r4, #26
 8004a2a:	e7f4      	b.n	8004a16 <_printf_float+0x40e>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	4642      	mov	r2, r8
 8004a30:	e7e1      	b.n	80049f6 <_printf_float+0x3ee>
 8004a32:	2301      	movs	r3, #1
 8004a34:	464a      	mov	r2, r9
 8004a36:	4631      	mov	r1, r6
 8004a38:	4628      	mov	r0, r5
 8004a3a:	47b8      	blx	r7
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	f43f ae3e 	beq.w	80046be <_printf_float+0xb6>
 8004a42:	f108 0801 	add.w	r8, r8, #1
 8004a46:	68e3      	ldr	r3, [r4, #12]
 8004a48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a4a:	1a5b      	subs	r3, r3, r1
 8004a4c:	4543      	cmp	r3, r8
 8004a4e:	dcf0      	bgt.n	8004a32 <_printf_float+0x42a>
 8004a50:	e6fc      	b.n	800484c <_printf_float+0x244>
 8004a52:	f04f 0800 	mov.w	r8, #0
 8004a56:	f104 0919 	add.w	r9, r4, #25
 8004a5a:	e7f4      	b.n	8004a46 <_printf_float+0x43e>

08004a5c <_printf_common>:
 8004a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a60:	4616      	mov	r6, r2
 8004a62:	4698      	mov	r8, r3
 8004a64:	688a      	ldr	r2, [r1, #8]
 8004a66:	690b      	ldr	r3, [r1, #16]
 8004a68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	bfb8      	it	lt
 8004a70:	4613      	movlt	r3, r2
 8004a72:	6033      	str	r3, [r6, #0]
 8004a74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a78:	4607      	mov	r7, r0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	b10a      	cbz	r2, 8004a82 <_printf_common+0x26>
 8004a7e:	3301      	adds	r3, #1
 8004a80:	6033      	str	r3, [r6, #0]
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	0699      	lsls	r1, r3, #26
 8004a86:	bf42      	ittt	mi
 8004a88:	6833      	ldrmi	r3, [r6, #0]
 8004a8a:	3302      	addmi	r3, #2
 8004a8c:	6033      	strmi	r3, [r6, #0]
 8004a8e:	6825      	ldr	r5, [r4, #0]
 8004a90:	f015 0506 	ands.w	r5, r5, #6
 8004a94:	d106      	bne.n	8004aa4 <_printf_common+0x48>
 8004a96:	f104 0a19 	add.w	sl, r4, #25
 8004a9a:	68e3      	ldr	r3, [r4, #12]
 8004a9c:	6832      	ldr	r2, [r6, #0]
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	42ab      	cmp	r3, r5
 8004aa2:	dc26      	bgt.n	8004af2 <_printf_common+0x96>
 8004aa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004aa8:	6822      	ldr	r2, [r4, #0]
 8004aaa:	3b00      	subs	r3, #0
 8004aac:	bf18      	it	ne
 8004aae:	2301      	movne	r3, #1
 8004ab0:	0692      	lsls	r2, r2, #26
 8004ab2:	d42b      	bmi.n	8004b0c <_printf_common+0xb0>
 8004ab4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ab8:	4641      	mov	r1, r8
 8004aba:	4638      	mov	r0, r7
 8004abc:	47c8      	blx	r9
 8004abe:	3001      	adds	r0, #1
 8004ac0:	d01e      	beq.n	8004b00 <_printf_common+0xa4>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	6922      	ldr	r2, [r4, #16]
 8004ac6:	f003 0306 	and.w	r3, r3, #6
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	bf02      	ittt	eq
 8004ace:	68e5      	ldreq	r5, [r4, #12]
 8004ad0:	6833      	ldreq	r3, [r6, #0]
 8004ad2:	1aed      	subeq	r5, r5, r3
 8004ad4:	68a3      	ldr	r3, [r4, #8]
 8004ad6:	bf0c      	ite	eq
 8004ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004adc:	2500      	movne	r5, #0
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	bfc4      	itt	gt
 8004ae2:	1a9b      	subgt	r3, r3, r2
 8004ae4:	18ed      	addgt	r5, r5, r3
 8004ae6:	2600      	movs	r6, #0
 8004ae8:	341a      	adds	r4, #26
 8004aea:	42b5      	cmp	r5, r6
 8004aec:	d11a      	bne.n	8004b24 <_printf_common+0xc8>
 8004aee:	2000      	movs	r0, #0
 8004af0:	e008      	b.n	8004b04 <_printf_common+0xa8>
 8004af2:	2301      	movs	r3, #1
 8004af4:	4652      	mov	r2, sl
 8004af6:	4641      	mov	r1, r8
 8004af8:	4638      	mov	r0, r7
 8004afa:	47c8      	blx	r9
 8004afc:	3001      	adds	r0, #1
 8004afe:	d103      	bne.n	8004b08 <_printf_common+0xac>
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b08:	3501      	adds	r5, #1
 8004b0a:	e7c6      	b.n	8004a9a <_printf_common+0x3e>
 8004b0c:	18e1      	adds	r1, r4, r3
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	2030      	movs	r0, #48	@ 0x30
 8004b12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b16:	4422      	add	r2, r4
 8004b18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b20:	3302      	adds	r3, #2
 8004b22:	e7c7      	b.n	8004ab4 <_printf_common+0x58>
 8004b24:	2301      	movs	r3, #1
 8004b26:	4622      	mov	r2, r4
 8004b28:	4641      	mov	r1, r8
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	47c8      	blx	r9
 8004b2e:	3001      	adds	r0, #1
 8004b30:	d0e6      	beq.n	8004b00 <_printf_common+0xa4>
 8004b32:	3601      	adds	r6, #1
 8004b34:	e7d9      	b.n	8004aea <_printf_common+0x8e>
	...

08004b38 <_printf_i>:
 8004b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b3c:	7e0f      	ldrb	r7, [r1, #24]
 8004b3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b40:	2f78      	cmp	r7, #120	@ 0x78
 8004b42:	4691      	mov	r9, r2
 8004b44:	4680      	mov	r8, r0
 8004b46:	460c      	mov	r4, r1
 8004b48:	469a      	mov	sl, r3
 8004b4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b4e:	d807      	bhi.n	8004b60 <_printf_i+0x28>
 8004b50:	2f62      	cmp	r7, #98	@ 0x62
 8004b52:	d80a      	bhi.n	8004b6a <_printf_i+0x32>
 8004b54:	2f00      	cmp	r7, #0
 8004b56:	f000 80d2 	beq.w	8004cfe <_printf_i+0x1c6>
 8004b5a:	2f58      	cmp	r7, #88	@ 0x58
 8004b5c:	f000 80b9 	beq.w	8004cd2 <_printf_i+0x19a>
 8004b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b68:	e03a      	b.n	8004be0 <_printf_i+0xa8>
 8004b6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b6e:	2b15      	cmp	r3, #21
 8004b70:	d8f6      	bhi.n	8004b60 <_printf_i+0x28>
 8004b72:	a101      	add	r1, pc, #4	@ (adr r1, 8004b78 <_printf_i+0x40>)
 8004b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b78:	08004bd1 	.word	0x08004bd1
 8004b7c:	08004be5 	.word	0x08004be5
 8004b80:	08004b61 	.word	0x08004b61
 8004b84:	08004b61 	.word	0x08004b61
 8004b88:	08004b61 	.word	0x08004b61
 8004b8c:	08004b61 	.word	0x08004b61
 8004b90:	08004be5 	.word	0x08004be5
 8004b94:	08004b61 	.word	0x08004b61
 8004b98:	08004b61 	.word	0x08004b61
 8004b9c:	08004b61 	.word	0x08004b61
 8004ba0:	08004b61 	.word	0x08004b61
 8004ba4:	08004ce5 	.word	0x08004ce5
 8004ba8:	08004c0f 	.word	0x08004c0f
 8004bac:	08004c9f 	.word	0x08004c9f
 8004bb0:	08004b61 	.word	0x08004b61
 8004bb4:	08004b61 	.word	0x08004b61
 8004bb8:	08004d07 	.word	0x08004d07
 8004bbc:	08004b61 	.word	0x08004b61
 8004bc0:	08004c0f 	.word	0x08004c0f
 8004bc4:	08004b61 	.word	0x08004b61
 8004bc8:	08004b61 	.word	0x08004b61
 8004bcc:	08004ca7 	.word	0x08004ca7
 8004bd0:	6833      	ldr	r3, [r6, #0]
 8004bd2:	1d1a      	adds	r2, r3, #4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6032      	str	r2, [r6, #0]
 8004bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004be0:	2301      	movs	r3, #1
 8004be2:	e09d      	b.n	8004d20 <_printf_i+0x1e8>
 8004be4:	6833      	ldr	r3, [r6, #0]
 8004be6:	6820      	ldr	r0, [r4, #0]
 8004be8:	1d19      	adds	r1, r3, #4
 8004bea:	6031      	str	r1, [r6, #0]
 8004bec:	0606      	lsls	r6, r0, #24
 8004bee:	d501      	bpl.n	8004bf4 <_printf_i+0xbc>
 8004bf0:	681d      	ldr	r5, [r3, #0]
 8004bf2:	e003      	b.n	8004bfc <_printf_i+0xc4>
 8004bf4:	0645      	lsls	r5, r0, #25
 8004bf6:	d5fb      	bpl.n	8004bf0 <_printf_i+0xb8>
 8004bf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004bfc:	2d00      	cmp	r5, #0
 8004bfe:	da03      	bge.n	8004c08 <_printf_i+0xd0>
 8004c00:	232d      	movs	r3, #45	@ 0x2d
 8004c02:	426d      	negs	r5, r5
 8004c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c08:	4859      	ldr	r0, [pc, #356]	@ (8004d70 <_printf_i+0x238>)
 8004c0a:	230a      	movs	r3, #10
 8004c0c:	e011      	b.n	8004c32 <_printf_i+0xfa>
 8004c0e:	6821      	ldr	r1, [r4, #0]
 8004c10:	6833      	ldr	r3, [r6, #0]
 8004c12:	0608      	lsls	r0, r1, #24
 8004c14:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c18:	d402      	bmi.n	8004c20 <_printf_i+0xe8>
 8004c1a:	0649      	lsls	r1, r1, #25
 8004c1c:	bf48      	it	mi
 8004c1e:	b2ad      	uxthmi	r5, r5
 8004c20:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c22:	4853      	ldr	r0, [pc, #332]	@ (8004d70 <_printf_i+0x238>)
 8004c24:	6033      	str	r3, [r6, #0]
 8004c26:	bf14      	ite	ne
 8004c28:	230a      	movne	r3, #10
 8004c2a:	2308      	moveq	r3, #8
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c32:	6866      	ldr	r6, [r4, #4]
 8004c34:	60a6      	str	r6, [r4, #8]
 8004c36:	2e00      	cmp	r6, #0
 8004c38:	bfa2      	ittt	ge
 8004c3a:	6821      	ldrge	r1, [r4, #0]
 8004c3c:	f021 0104 	bicge.w	r1, r1, #4
 8004c40:	6021      	strge	r1, [r4, #0]
 8004c42:	b90d      	cbnz	r5, 8004c48 <_printf_i+0x110>
 8004c44:	2e00      	cmp	r6, #0
 8004c46:	d04b      	beq.n	8004ce0 <_printf_i+0x1a8>
 8004c48:	4616      	mov	r6, r2
 8004c4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c4e:	fb03 5711 	mls	r7, r3, r1, r5
 8004c52:	5dc7      	ldrb	r7, [r0, r7]
 8004c54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c58:	462f      	mov	r7, r5
 8004c5a:	42bb      	cmp	r3, r7
 8004c5c:	460d      	mov	r5, r1
 8004c5e:	d9f4      	bls.n	8004c4a <_printf_i+0x112>
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d10b      	bne.n	8004c7c <_printf_i+0x144>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	07df      	lsls	r7, r3, #31
 8004c68:	d508      	bpl.n	8004c7c <_printf_i+0x144>
 8004c6a:	6923      	ldr	r3, [r4, #16]
 8004c6c:	6861      	ldr	r1, [r4, #4]
 8004c6e:	4299      	cmp	r1, r3
 8004c70:	bfde      	ittt	le
 8004c72:	2330      	movle	r3, #48	@ 0x30
 8004c74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c7c:	1b92      	subs	r2, r2, r6
 8004c7e:	6122      	str	r2, [r4, #16]
 8004c80:	f8cd a000 	str.w	sl, [sp]
 8004c84:	464b      	mov	r3, r9
 8004c86:	aa03      	add	r2, sp, #12
 8004c88:	4621      	mov	r1, r4
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	f7ff fee6 	bl	8004a5c <_printf_common>
 8004c90:	3001      	adds	r0, #1
 8004c92:	d14a      	bne.n	8004d2a <_printf_i+0x1f2>
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295
 8004c98:	b004      	add	sp, #16
 8004c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	f043 0320 	orr.w	r3, r3, #32
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	4833      	ldr	r0, [pc, #204]	@ (8004d74 <_printf_i+0x23c>)
 8004ca8:	2778      	movs	r7, #120	@ 0x78
 8004caa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	6831      	ldr	r1, [r6, #0]
 8004cb2:	061f      	lsls	r7, r3, #24
 8004cb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cb8:	d402      	bmi.n	8004cc0 <_printf_i+0x188>
 8004cba:	065f      	lsls	r7, r3, #25
 8004cbc:	bf48      	it	mi
 8004cbe:	b2ad      	uxthmi	r5, r5
 8004cc0:	6031      	str	r1, [r6, #0]
 8004cc2:	07d9      	lsls	r1, r3, #31
 8004cc4:	bf44      	itt	mi
 8004cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8004cca:	6023      	strmi	r3, [r4, #0]
 8004ccc:	b11d      	cbz	r5, 8004cd6 <_printf_i+0x19e>
 8004cce:	2310      	movs	r3, #16
 8004cd0:	e7ac      	b.n	8004c2c <_printf_i+0xf4>
 8004cd2:	4827      	ldr	r0, [pc, #156]	@ (8004d70 <_printf_i+0x238>)
 8004cd4:	e7e9      	b.n	8004caa <_printf_i+0x172>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	f023 0320 	bic.w	r3, r3, #32
 8004cdc:	6023      	str	r3, [r4, #0]
 8004cde:	e7f6      	b.n	8004cce <_printf_i+0x196>
 8004ce0:	4616      	mov	r6, r2
 8004ce2:	e7bd      	b.n	8004c60 <_printf_i+0x128>
 8004ce4:	6833      	ldr	r3, [r6, #0]
 8004ce6:	6825      	ldr	r5, [r4, #0]
 8004ce8:	6961      	ldr	r1, [r4, #20]
 8004cea:	1d18      	adds	r0, r3, #4
 8004cec:	6030      	str	r0, [r6, #0]
 8004cee:	062e      	lsls	r6, r5, #24
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	d501      	bpl.n	8004cf8 <_printf_i+0x1c0>
 8004cf4:	6019      	str	r1, [r3, #0]
 8004cf6:	e002      	b.n	8004cfe <_printf_i+0x1c6>
 8004cf8:	0668      	lsls	r0, r5, #25
 8004cfa:	d5fb      	bpl.n	8004cf4 <_printf_i+0x1bc>
 8004cfc:	8019      	strh	r1, [r3, #0]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	6123      	str	r3, [r4, #16]
 8004d02:	4616      	mov	r6, r2
 8004d04:	e7bc      	b.n	8004c80 <_printf_i+0x148>
 8004d06:	6833      	ldr	r3, [r6, #0]
 8004d08:	1d1a      	adds	r2, r3, #4
 8004d0a:	6032      	str	r2, [r6, #0]
 8004d0c:	681e      	ldr	r6, [r3, #0]
 8004d0e:	6862      	ldr	r2, [r4, #4]
 8004d10:	2100      	movs	r1, #0
 8004d12:	4630      	mov	r0, r6
 8004d14:	f7fb fa5c 	bl	80001d0 <memchr>
 8004d18:	b108      	cbz	r0, 8004d1e <_printf_i+0x1e6>
 8004d1a:	1b80      	subs	r0, r0, r6
 8004d1c:	6060      	str	r0, [r4, #4]
 8004d1e:	6863      	ldr	r3, [r4, #4]
 8004d20:	6123      	str	r3, [r4, #16]
 8004d22:	2300      	movs	r3, #0
 8004d24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d28:	e7aa      	b.n	8004c80 <_printf_i+0x148>
 8004d2a:	6923      	ldr	r3, [r4, #16]
 8004d2c:	4632      	mov	r2, r6
 8004d2e:	4649      	mov	r1, r9
 8004d30:	4640      	mov	r0, r8
 8004d32:	47d0      	blx	sl
 8004d34:	3001      	adds	r0, #1
 8004d36:	d0ad      	beq.n	8004c94 <_printf_i+0x15c>
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	079b      	lsls	r3, r3, #30
 8004d3c:	d413      	bmi.n	8004d66 <_printf_i+0x22e>
 8004d3e:	68e0      	ldr	r0, [r4, #12]
 8004d40:	9b03      	ldr	r3, [sp, #12]
 8004d42:	4298      	cmp	r0, r3
 8004d44:	bfb8      	it	lt
 8004d46:	4618      	movlt	r0, r3
 8004d48:	e7a6      	b.n	8004c98 <_printf_i+0x160>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	4632      	mov	r2, r6
 8004d4e:	4649      	mov	r1, r9
 8004d50:	4640      	mov	r0, r8
 8004d52:	47d0      	blx	sl
 8004d54:	3001      	adds	r0, #1
 8004d56:	d09d      	beq.n	8004c94 <_printf_i+0x15c>
 8004d58:	3501      	adds	r5, #1
 8004d5a:	68e3      	ldr	r3, [r4, #12]
 8004d5c:	9903      	ldr	r1, [sp, #12]
 8004d5e:	1a5b      	subs	r3, r3, r1
 8004d60:	42ab      	cmp	r3, r5
 8004d62:	dcf2      	bgt.n	8004d4a <_printf_i+0x212>
 8004d64:	e7eb      	b.n	8004d3e <_printf_i+0x206>
 8004d66:	2500      	movs	r5, #0
 8004d68:	f104 0619 	add.w	r6, r4, #25
 8004d6c:	e7f5      	b.n	8004d5a <_printf_i+0x222>
 8004d6e:	bf00      	nop
 8004d70:	080071da 	.word	0x080071da
 8004d74:	080071eb 	.word	0x080071eb

08004d78 <std>:
 8004d78:	2300      	movs	r3, #0
 8004d7a:	b510      	push	{r4, lr}
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d86:	6083      	str	r3, [r0, #8]
 8004d88:	8181      	strh	r1, [r0, #12]
 8004d8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d8c:	81c2      	strh	r2, [r0, #14]
 8004d8e:	6183      	str	r3, [r0, #24]
 8004d90:	4619      	mov	r1, r3
 8004d92:	2208      	movs	r2, #8
 8004d94:	305c      	adds	r0, #92	@ 0x5c
 8004d96:	f000 f914 	bl	8004fc2 <memset>
 8004d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd0 <std+0x58>)
 8004d9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd4 <std+0x5c>)
 8004da0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004da2:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd8 <std+0x60>)
 8004da4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004da6:	4b0d      	ldr	r3, [pc, #52]	@ (8004ddc <std+0x64>)
 8004da8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004daa:	4b0d      	ldr	r3, [pc, #52]	@ (8004de0 <std+0x68>)
 8004dac:	6224      	str	r4, [r4, #32]
 8004dae:	429c      	cmp	r4, r3
 8004db0:	d006      	beq.n	8004dc0 <std+0x48>
 8004db2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004db6:	4294      	cmp	r4, r2
 8004db8:	d002      	beq.n	8004dc0 <std+0x48>
 8004dba:	33d0      	adds	r3, #208	@ 0xd0
 8004dbc:	429c      	cmp	r4, r3
 8004dbe:	d105      	bne.n	8004dcc <std+0x54>
 8004dc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dc8:	f000 b978 	b.w	80050bc <__retarget_lock_init_recursive>
 8004dcc:	bd10      	pop	{r4, pc}
 8004dce:	bf00      	nop
 8004dd0:	08004f3d 	.word	0x08004f3d
 8004dd4:	08004f5f 	.word	0x08004f5f
 8004dd8:	08004f97 	.word	0x08004f97
 8004ddc:	08004fbb 	.word	0x08004fbb
 8004de0:	200002d4 	.word	0x200002d4

08004de4 <stdio_exit_handler>:
 8004de4:	4a02      	ldr	r2, [pc, #8]	@ (8004df0 <stdio_exit_handler+0xc>)
 8004de6:	4903      	ldr	r1, [pc, #12]	@ (8004df4 <stdio_exit_handler+0x10>)
 8004de8:	4803      	ldr	r0, [pc, #12]	@ (8004df8 <stdio_exit_handler+0x14>)
 8004dea:	f000 b869 	b.w	8004ec0 <_fwalk_sglue>
 8004dee:	bf00      	nop
 8004df0:	20000010 	.word	0x20000010
 8004df4:	08006a1d 	.word	0x08006a1d
 8004df8:	20000020 	.word	0x20000020

08004dfc <cleanup_stdio>:
 8004dfc:	6841      	ldr	r1, [r0, #4]
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8004e30 <cleanup_stdio+0x34>)
 8004e00:	4299      	cmp	r1, r3
 8004e02:	b510      	push	{r4, lr}
 8004e04:	4604      	mov	r4, r0
 8004e06:	d001      	beq.n	8004e0c <cleanup_stdio+0x10>
 8004e08:	f001 fe08 	bl	8006a1c <_fflush_r>
 8004e0c:	68a1      	ldr	r1, [r4, #8]
 8004e0e:	4b09      	ldr	r3, [pc, #36]	@ (8004e34 <cleanup_stdio+0x38>)
 8004e10:	4299      	cmp	r1, r3
 8004e12:	d002      	beq.n	8004e1a <cleanup_stdio+0x1e>
 8004e14:	4620      	mov	r0, r4
 8004e16:	f001 fe01 	bl	8006a1c <_fflush_r>
 8004e1a:	68e1      	ldr	r1, [r4, #12]
 8004e1c:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <cleanup_stdio+0x3c>)
 8004e1e:	4299      	cmp	r1, r3
 8004e20:	d004      	beq.n	8004e2c <cleanup_stdio+0x30>
 8004e22:	4620      	mov	r0, r4
 8004e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e28:	f001 bdf8 	b.w	8006a1c <_fflush_r>
 8004e2c:	bd10      	pop	{r4, pc}
 8004e2e:	bf00      	nop
 8004e30:	200002d4 	.word	0x200002d4
 8004e34:	2000033c 	.word	0x2000033c
 8004e38:	200003a4 	.word	0x200003a4

08004e3c <global_stdio_init.part.0>:
 8004e3c:	b510      	push	{r4, lr}
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <global_stdio_init.part.0+0x30>)
 8004e40:	4c0b      	ldr	r4, [pc, #44]	@ (8004e70 <global_stdio_init.part.0+0x34>)
 8004e42:	4a0c      	ldr	r2, [pc, #48]	@ (8004e74 <global_stdio_init.part.0+0x38>)
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	4620      	mov	r0, r4
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2104      	movs	r1, #4
 8004e4c:	f7ff ff94 	bl	8004d78 <std>
 8004e50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e54:	2201      	movs	r2, #1
 8004e56:	2109      	movs	r1, #9
 8004e58:	f7ff ff8e 	bl	8004d78 <std>
 8004e5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e60:	2202      	movs	r2, #2
 8004e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e66:	2112      	movs	r1, #18
 8004e68:	f7ff bf86 	b.w	8004d78 <std>
 8004e6c:	2000040c 	.word	0x2000040c
 8004e70:	200002d4 	.word	0x200002d4
 8004e74:	08004de5 	.word	0x08004de5

08004e78 <__sfp_lock_acquire>:
 8004e78:	4801      	ldr	r0, [pc, #4]	@ (8004e80 <__sfp_lock_acquire+0x8>)
 8004e7a:	f000 b920 	b.w	80050be <__retarget_lock_acquire_recursive>
 8004e7e:	bf00      	nop
 8004e80:	20000415 	.word	0x20000415

08004e84 <__sfp_lock_release>:
 8004e84:	4801      	ldr	r0, [pc, #4]	@ (8004e8c <__sfp_lock_release+0x8>)
 8004e86:	f000 b91b 	b.w	80050c0 <__retarget_lock_release_recursive>
 8004e8a:	bf00      	nop
 8004e8c:	20000415 	.word	0x20000415

08004e90 <__sinit>:
 8004e90:	b510      	push	{r4, lr}
 8004e92:	4604      	mov	r4, r0
 8004e94:	f7ff fff0 	bl	8004e78 <__sfp_lock_acquire>
 8004e98:	6a23      	ldr	r3, [r4, #32]
 8004e9a:	b11b      	cbz	r3, 8004ea4 <__sinit+0x14>
 8004e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea0:	f7ff bff0 	b.w	8004e84 <__sfp_lock_release>
 8004ea4:	4b04      	ldr	r3, [pc, #16]	@ (8004eb8 <__sinit+0x28>)
 8004ea6:	6223      	str	r3, [r4, #32]
 8004ea8:	4b04      	ldr	r3, [pc, #16]	@ (8004ebc <__sinit+0x2c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f5      	bne.n	8004e9c <__sinit+0xc>
 8004eb0:	f7ff ffc4 	bl	8004e3c <global_stdio_init.part.0>
 8004eb4:	e7f2      	b.n	8004e9c <__sinit+0xc>
 8004eb6:	bf00      	nop
 8004eb8:	08004dfd 	.word	0x08004dfd
 8004ebc:	2000040c 	.word	0x2000040c

08004ec0 <_fwalk_sglue>:
 8004ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	4688      	mov	r8, r1
 8004ec8:	4614      	mov	r4, r2
 8004eca:	2600      	movs	r6, #0
 8004ecc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ed0:	f1b9 0901 	subs.w	r9, r9, #1
 8004ed4:	d505      	bpl.n	8004ee2 <_fwalk_sglue+0x22>
 8004ed6:	6824      	ldr	r4, [r4, #0]
 8004ed8:	2c00      	cmp	r4, #0
 8004eda:	d1f7      	bne.n	8004ecc <_fwalk_sglue+0xc>
 8004edc:	4630      	mov	r0, r6
 8004ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ee2:	89ab      	ldrh	r3, [r5, #12]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d907      	bls.n	8004ef8 <_fwalk_sglue+0x38>
 8004ee8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004eec:	3301      	adds	r3, #1
 8004eee:	d003      	beq.n	8004ef8 <_fwalk_sglue+0x38>
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	47c0      	blx	r8
 8004ef6:	4306      	orrs	r6, r0
 8004ef8:	3568      	adds	r5, #104	@ 0x68
 8004efa:	e7e9      	b.n	8004ed0 <_fwalk_sglue+0x10>

08004efc <siprintf>:
 8004efc:	b40e      	push	{r1, r2, r3}
 8004efe:	b500      	push	{lr}
 8004f00:	b09c      	sub	sp, #112	@ 0x70
 8004f02:	ab1d      	add	r3, sp, #116	@ 0x74
 8004f04:	9002      	str	r0, [sp, #8]
 8004f06:	9006      	str	r0, [sp, #24]
 8004f08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004f0c:	4809      	ldr	r0, [pc, #36]	@ (8004f34 <siprintf+0x38>)
 8004f0e:	9107      	str	r1, [sp, #28]
 8004f10:	9104      	str	r1, [sp, #16]
 8004f12:	4909      	ldr	r1, [pc, #36]	@ (8004f38 <siprintf+0x3c>)
 8004f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f18:	9105      	str	r1, [sp, #20]
 8004f1a:	6800      	ldr	r0, [r0, #0]
 8004f1c:	9301      	str	r3, [sp, #4]
 8004f1e:	a902      	add	r1, sp, #8
 8004f20:	f001 fbfc 	bl	800671c <_svfiprintf_r>
 8004f24:	9b02      	ldr	r3, [sp, #8]
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	b01c      	add	sp, #112	@ 0x70
 8004f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f30:	b003      	add	sp, #12
 8004f32:	4770      	bx	lr
 8004f34:	2000001c 	.word	0x2000001c
 8004f38:	ffff0208 	.word	0xffff0208

08004f3c <__sread>:
 8004f3c:	b510      	push	{r4, lr}
 8004f3e:	460c      	mov	r4, r1
 8004f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f44:	f000 f86c 	bl	8005020 <_read_r>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	bfab      	itete	ge
 8004f4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f50:	181b      	addge	r3, r3, r0
 8004f52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f56:	bfac      	ite	ge
 8004f58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f5a:	81a3      	strhlt	r3, [r4, #12]
 8004f5c:	bd10      	pop	{r4, pc}

08004f5e <__swrite>:
 8004f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f62:	461f      	mov	r7, r3
 8004f64:	898b      	ldrh	r3, [r1, #12]
 8004f66:	05db      	lsls	r3, r3, #23
 8004f68:	4605      	mov	r5, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	4616      	mov	r6, r2
 8004f6e:	d505      	bpl.n	8004f7c <__swrite+0x1e>
 8004f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f74:	2302      	movs	r3, #2
 8004f76:	2200      	movs	r2, #0
 8004f78:	f000 f840 	bl	8004ffc <_lseek_r>
 8004f7c:	89a3      	ldrh	r3, [r4, #12]
 8004f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f86:	81a3      	strh	r3, [r4, #12]
 8004f88:	4632      	mov	r2, r6
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f92:	f000 b857 	b.w	8005044 <_write_r>

08004f96 <__sseek>:
 8004f96:	b510      	push	{r4, lr}
 8004f98:	460c      	mov	r4, r1
 8004f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9e:	f000 f82d 	bl	8004ffc <_lseek_r>
 8004fa2:	1c43      	adds	r3, r0, #1
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	bf15      	itete	ne
 8004fa8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004faa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004fae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004fb2:	81a3      	strheq	r3, [r4, #12]
 8004fb4:	bf18      	it	ne
 8004fb6:	81a3      	strhne	r3, [r4, #12]
 8004fb8:	bd10      	pop	{r4, pc}

08004fba <__sclose>:
 8004fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fbe:	f000 b80d 	b.w	8004fdc <_close_r>

08004fc2 <memset>:
 8004fc2:	4402      	add	r2, r0
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d100      	bne.n	8004fcc <memset+0xa>
 8004fca:	4770      	bx	lr
 8004fcc:	f803 1b01 	strb.w	r1, [r3], #1
 8004fd0:	e7f9      	b.n	8004fc6 <memset+0x4>
	...

08004fd4 <_localeconv_r>:
 8004fd4:	4800      	ldr	r0, [pc, #0]	@ (8004fd8 <_localeconv_r+0x4>)
 8004fd6:	4770      	bx	lr
 8004fd8:	2000015c 	.word	0x2000015c

08004fdc <_close_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	4d06      	ldr	r5, [pc, #24]	@ (8004ff8 <_close_r+0x1c>)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	4608      	mov	r0, r1
 8004fe6:	602b      	str	r3, [r5, #0]
 8004fe8:	f7fc f8c0 	bl	800116c <_close>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d102      	bne.n	8004ff6 <_close_r+0x1a>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	b103      	cbz	r3, 8004ff6 <_close_r+0x1a>
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	20000410 	.word	0x20000410

08004ffc <_lseek_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4d07      	ldr	r5, [pc, #28]	@ (800501c <_lseek_r+0x20>)
 8005000:	4604      	mov	r4, r0
 8005002:	4608      	mov	r0, r1
 8005004:	4611      	mov	r1, r2
 8005006:	2200      	movs	r2, #0
 8005008:	602a      	str	r2, [r5, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	f7fc f8d5 	bl	80011ba <_lseek>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d102      	bne.n	800501a <_lseek_r+0x1e>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	b103      	cbz	r3, 800501a <_lseek_r+0x1e>
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	20000410 	.word	0x20000410

08005020 <_read_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	4d07      	ldr	r5, [pc, #28]	@ (8005040 <_read_r+0x20>)
 8005024:	4604      	mov	r4, r0
 8005026:	4608      	mov	r0, r1
 8005028:	4611      	mov	r1, r2
 800502a:	2200      	movs	r2, #0
 800502c:	602a      	str	r2, [r5, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	f7fc f863 	bl	80010fa <_read>
 8005034:	1c43      	adds	r3, r0, #1
 8005036:	d102      	bne.n	800503e <_read_r+0x1e>
 8005038:	682b      	ldr	r3, [r5, #0]
 800503a:	b103      	cbz	r3, 800503e <_read_r+0x1e>
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	bd38      	pop	{r3, r4, r5, pc}
 8005040:	20000410 	.word	0x20000410

08005044 <_write_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4d07      	ldr	r5, [pc, #28]	@ (8005064 <_write_r+0x20>)
 8005048:	4604      	mov	r4, r0
 800504a:	4608      	mov	r0, r1
 800504c:	4611      	mov	r1, r2
 800504e:	2200      	movs	r2, #0
 8005050:	602a      	str	r2, [r5, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	f7fc f86e 	bl	8001134 <_write>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_write_r+0x1e>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	b103      	cbz	r3, 8005062 <_write_r+0x1e>
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	20000410 	.word	0x20000410

08005068 <__errno>:
 8005068:	4b01      	ldr	r3, [pc, #4]	@ (8005070 <__errno+0x8>)
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	2000001c 	.word	0x2000001c

08005074 <__libc_init_array>:
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	4d0d      	ldr	r5, [pc, #52]	@ (80050ac <__libc_init_array+0x38>)
 8005078:	4c0d      	ldr	r4, [pc, #52]	@ (80050b0 <__libc_init_array+0x3c>)
 800507a:	1b64      	subs	r4, r4, r5
 800507c:	10a4      	asrs	r4, r4, #2
 800507e:	2600      	movs	r6, #0
 8005080:	42a6      	cmp	r6, r4
 8005082:	d109      	bne.n	8005098 <__libc_init_array+0x24>
 8005084:	4d0b      	ldr	r5, [pc, #44]	@ (80050b4 <__libc_init_array+0x40>)
 8005086:	4c0c      	ldr	r4, [pc, #48]	@ (80050b8 <__libc_init_array+0x44>)
 8005088:	f002 f866 	bl	8007158 <_init>
 800508c:	1b64      	subs	r4, r4, r5
 800508e:	10a4      	asrs	r4, r4, #2
 8005090:	2600      	movs	r6, #0
 8005092:	42a6      	cmp	r6, r4
 8005094:	d105      	bne.n	80050a2 <__libc_init_array+0x2e>
 8005096:	bd70      	pop	{r4, r5, r6, pc}
 8005098:	f855 3b04 	ldr.w	r3, [r5], #4
 800509c:	4798      	blx	r3
 800509e:	3601      	adds	r6, #1
 80050a0:	e7ee      	b.n	8005080 <__libc_init_array+0xc>
 80050a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a6:	4798      	blx	r3
 80050a8:	3601      	adds	r6, #1
 80050aa:	e7f2      	b.n	8005092 <__libc_init_array+0x1e>
 80050ac:	08007540 	.word	0x08007540
 80050b0:	08007540 	.word	0x08007540
 80050b4:	08007540 	.word	0x08007540
 80050b8:	08007544 	.word	0x08007544

080050bc <__retarget_lock_init_recursive>:
 80050bc:	4770      	bx	lr

080050be <__retarget_lock_acquire_recursive>:
 80050be:	4770      	bx	lr

080050c0 <__retarget_lock_release_recursive>:
 80050c0:	4770      	bx	lr

080050c2 <quorem>:
 80050c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c6:	6903      	ldr	r3, [r0, #16]
 80050c8:	690c      	ldr	r4, [r1, #16]
 80050ca:	42a3      	cmp	r3, r4
 80050cc:	4607      	mov	r7, r0
 80050ce:	db7e      	blt.n	80051ce <quorem+0x10c>
 80050d0:	3c01      	subs	r4, #1
 80050d2:	f101 0814 	add.w	r8, r1, #20
 80050d6:	00a3      	lsls	r3, r4, #2
 80050d8:	f100 0514 	add.w	r5, r0, #20
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80050e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050ec:	3301      	adds	r3, #1
 80050ee:	429a      	cmp	r2, r3
 80050f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80050f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80050f8:	d32e      	bcc.n	8005158 <quorem+0x96>
 80050fa:	f04f 0a00 	mov.w	sl, #0
 80050fe:	46c4      	mov	ip, r8
 8005100:	46ae      	mov	lr, r5
 8005102:	46d3      	mov	fp, sl
 8005104:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005108:	b298      	uxth	r0, r3
 800510a:	fb06 a000 	mla	r0, r6, r0, sl
 800510e:	0c02      	lsrs	r2, r0, #16
 8005110:	0c1b      	lsrs	r3, r3, #16
 8005112:	fb06 2303 	mla	r3, r6, r3, r2
 8005116:	f8de 2000 	ldr.w	r2, [lr]
 800511a:	b280      	uxth	r0, r0
 800511c:	b292      	uxth	r2, r2
 800511e:	1a12      	subs	r2, r2, r0
 8005120:	445a      	add	r2, fp
 8005122:	f8de 0000 	ldr.w	r0, [lr]
 8005126:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800512a:	b29b      	uxth	r3, r3
 800512c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005130:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005134:	b292      	uxth	r2, r2
 8005136:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800513a:	45e1      	cmp	r9, ip
 800513c:	f84e 2b04 	str.w	r2, [lr], #4
 8005140:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005144:	d2de      	bcs.n	8005104 <quorem+0x42>
 8005146:	9b00      	ldr	r3, [sp, #0]
 8005148:	58eb      	ldr	r3, [r5, r3]
 800514a:	b92b      	cbnz	r3, 8005158 <quorem+0x96>
 800514c:	9b01      	ldr	r3, [sp, #4]
 800514e:	3b04      	subs	r3, #4
 8005150:	429d      	cmp	r5, r3
 8005152:	461a      	mov	r2, r3
 8005154:	d32f      	bcc.n	80051b6 <quorem+0xf4>
 8005156:	613c      	str	r4, [r7, #16]
 8005158:	4638      	mov	r0, r7
 800515a:	f001 f97b 	bl	8006454 <__mcmp>
 800515e:	2800      	cmp	r0, #0
 8005160:	db25      	blt.n	80051ae <quorem+0xec>
 8005162:	4629      	mov	r1, r5
 8005164:	2000      	movs	r0, #0
 8005166:	f858 2b04 	ldr.w	r2, [r8], #4
 800516a:	f8d1 c000 	ldr.w	ip, [r1]
 800516e:	fa1f fe82 	uxth.w	lr, r2
 8005172:	fa1f f38c 	uxth.w	r3, ip
 8005176:	eba3 030e 	sub.w	r3, r3, lr
 800517a:	4403      	add	r3, r0
 800517c:	0c12      	lsrs	r2, r2, #16
 800517e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005182:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005186:	b29b      	uxth	r3, r3
 8005188:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800518c:	45c1      	cmp	r9, r8
 800518e:	f841 3b04 	str.w	r3, [r1], #4
 8005192:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005196:	d2e6      	bcs.n	8005166 <quorem+0xa4>
 8005198:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800519c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051a0:	b922      	cbnz	r2, 80051ac <quorem+0xea>
 80051a2:	3b04      	subs	r3, #4
 80051a4:	429d      	cmp	r5, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	d30b      	bcc.n	80051c2 <quorem+0x100>
 80051aa:	613c      	str	r4, [r7, #16]
 80051ac:	3601      	adds	r6, #1
 80051ae:	4630      	mov	r0, r6
 80051b0:	b003      	add	sp, #12
 80051b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	3b04      	subs	r3, #4
 80051ba:	2a00      	cmp	r2, #0
 80051bc:	d1cb      	bne.n	8005156 <quorem+0x94>
 80051be:	3c01      	subs	r4, #1
 80051c0:	e7c6      	b.n	8005150 <quorem+0x8e>
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	3b04      	subs	r3, #4
 80051c6:	2a00      	cmp	r2, #0
 80051c8:	d1ef      	bne.n	80051aa <quorem+0xe8>
 80051ca:	3c01      	subs	r4, #1
 80051cc:	e7ea      	b.n	80051a4 <quorem+0xe2>
 80051ce:	2000      	movs	r0, #0
 80051d0:	e7ee      	b.n	80051b0 <quorem+0xee>
 80051d2:	0000      	movs	r0, r0
 80051d4:	0000      	movs	r0, r0
	...

080051d8 <_dtoa_r>:
 80051d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051dc:	69c7      	ldr	r7, [r0, #28]
 80051de:	b099      	sub	sp, #100	@ 0x64
 80051e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80051e4:	ec55 4b10 	vmov	r4, r5, d0
 80051e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80051ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80051ec:	4683      	mov	fp, r0
 80051ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80051f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80051f2:	b97f      	cbnz	r7, 8005214 <_dtoa_r+0x3c>
 80051f4:	2010      	movs	r0, #16
 80051f6:	f000 fdfd 	bl	8005df4 <malloc>
 80051fa:	4602      	mov	r2, r0
 80051fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8005200:	b920      	cbnz	r0, 800520c <_dtoa_r+0x34>
 8005202:	4ba7      	ldr	r3, [pc, #668]	@ (80054a0 <_dtoa_r+0x2c8>)
 8005204:	21ef      	movs	r1, #239	@ 0xef
 8005206:	48a7      	ldr	r0, [pc, #668]	@ (80054a4 <_dtoa_r+0x2cc>)
 8005208:	f001 fc68 	bl	8006adc <__assert_func>
 800520c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005210:	6007      	str	r7, [r0, #0]
 8005212:	60c7      	str	r7, [r0, #12]
 8005214:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005218:	6819      	ldr	r1, [r3, #0]
 800521a:	b159      	cbz	r1, 8005234 <_dtoa_r+0x5c>
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	604a      	str	r2, [r1, #4]
 8005220:	2301      	movs	r3, #1
 8005222:	4093      	lsls	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
 8005226:	4658      	mov	r0, fp
 8005228:	f000 feda 	bl	8005fe0 <_Bfree>
 800522c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	1e2b      	subs	r3, r5, #0
 8005236:	bfb9      	ittee	lt
 8005238:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800523c:	9303      	strlt	r3, [sp, #12]
 800523e:	2300      	movge	r3, #0
 8005240:	6033      	strge	r3, [r6, #0]
 8005242:	9f03      	ldr	r7, [sp, #12]
 8005244:	4b98      	ldr	r3, [pc, #608]	@ (80054a8 <_dtoa_r+0x2d0>)
 8005246:	bfbc      	itt	lt
 8005248:	2201      	movlt	r2, #1
 800524a:	6032      	strlt	r2, [r6, #0]
 800524c:	43bb      	bics	r3, r7
 800524e:	d112      	bne.n	8005276 <_dtoa_r+0x9e>
 8005250:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005252:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800525c:	4323      	orrs	r3, r4
 800525e:	f000 854d 	beq.w	8005cfc <_dtoa_r+0xb24>
 8005262:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005264:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80054bc <_dtoa_r+0x2e4>
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 854f 	beq.w	8005d0c <_dtoa_r+0xb34>
 800526e:	f10a 0303 	add.w	r3, sl, #3
 8005272:	f000 bd49 	b.w	8005d08 <_dtoa_r+0xb30>
 8005276:	ed9d 7b02 	vldr	d7, [sp, #8]
 800527a:	2200      	movs	r2, #0
 800527c:	ec51 0b17 	vmov	r0, r1, d7
 8005280:	2300      	movs	r3, #0
 8005282:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005286:	f7fb fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800528a:	4680      	mov	r8, r0
 800528c:	b158      	cbz	r0, 80052a6 <_dtoa_r+0xce>
 800528e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005290:	2301      	movs	r3, #1
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005296:	b113      	cbz	r3, 800529e <_dtoa_r+0xc6>
 8005298:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800529a:	4b84      	ldr	r3, [pc, #528]	@ (80054ac <_dtoa_r+0x2d4>)
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80054c0 <_dtoa_r+0x2e8>
 80052a2:	f000 bd33 	b.w	8005d0c <_dtoa_r+0xb34>
 80052a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80052aa:	aa16      	add	r2, sp, #88	@ 0x58
 80052ac:	a917      	add	r1, sp, #92	@ 0x5c
 80052ae:	4658      	mov	r0, fp
 80052b0:	f001 f980 	bl	80065b4 <__d2b>
 80052b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80052b8:	4681      	mov	r9, r0
 80052ba:	2e00      	cmp	r6, #0
 80052bc:	d077      	beq.n	80053ae <_dtoa_r+0x1d6>
 80052be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80052c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80052d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80052d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80052d8:	4619      	mov	r1, r3
 80052da:	2200      	movs	r2, #0
 80052dc:	4b74      	ldr	r3, [pc, #464]	@ (80054b0 <_dtoa_r+0x2d8>)
 80052de:	f7fa ffd3 	bl	8000288 <__aeabi_dsub>
 80052e2:	a369      	add	r3, pc, #420	@ (adr r3, 8005488 <_dtoa_r+0x2b0>)
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	f7fb f986 	bl	80005f8 <__aeabi_dmul>
 80052ec:	a368      	add	r3, pc, #416	@ (adr r3, 8005490 <_dtoa_r+0x2b8>)
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	f7fa ffcb 	bl	800028c <__adddf3>
 80052f6:	4604      	mov	r4, r0
 80052f8:	4630      	mov	r0, r6
 80052fa:	460d      	mov	r5, r1
 80052fc:	f7fb f912 	bl	8000524 <__aeabi_i2d>
 8005300:	a365      	add	r3, pc, #404	@ (adr r3, 8005498 <_dtoa_r+0x2c0>)
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	f7fb f977 	bl	80005f8 <__aeabi_dmul>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4620      	mov	r0, r4
 8005310:	4629      	mov	r1, r5
 8005312:	f7fa ffbb 	bl	800028c <__adddf3>
 8005316:	4604      	mov	r4, r0
 8005318:	460d      	mov	r5, r1
 800531a:	f7fb fc1d 	bl	8000b58 <__aeabi_d2iz>
 800531e:	2200      	movs	r2, #0
 8005320:	4607      	mov	r7, r0
 8005322:	2300      	movs	r3, #0
 8005324:	4620      	mov	r0, r4
 8005326:	4629      	mov	r1, r5
 8005328:	f7fb fbd8 	bl	8000adc <__aeabi_dcmplt>
 800532c:	b140      	cbz	r0, 8005340 <_dtoa_r+0x168>
 800532e:	4638      	mov	r0, r7
 8005330:	f7fb f8f8 	bl	8000524 <__aeabi_i2d>
 8005334:	4622      	mov	r2, r4
 8005336:	462b      	mov	r3, r5
 8005338:	f7fb fbc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800533c:	b900      	cbnz	r0, 8005340 <_dtoa_r+0x168>
 800533e:	3f01      	subs	r7, #1
 8005340:	2f16      	cmp	r7, #22
 8005342:	d851      	bhi.n	80053e8 <_dtoa_r+0x210>
 8005344:	4b5b      	ldr	r3, [pc, #364]	@ (80054b4 <_dtoa_r+0x2dc>)
 8005346:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005352:	f7fb fbc3 	bl	8000adc <__aeabi_dcmplt>
 8005356:	2800      	cmp	r0, #0
 8005358:	d048      	beq.n	80053ec <_dtoa_r+0x214>
 800535a:	3f01      	subs	r7, #1
 800535c:	2300      	movs	r3, #0
 800535e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005360:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005362:	1b9b      	subs	r3, r3, r6
 8005364:	1e5a      	subs	r2, r3, #1
 8005366:	bf44      	itt	mi
 8005368:	f1c3 0801 	rsbmi	r8, r3, #1
 800536c:	2300      	movmi	r3, #0
 800536e:	9208      	str	r2, [sp, #32]
 8005370:	bf54      	ite	pl
 8005372:	f04f 0800 	movpl.w	r8, #0
 8005376:	9308      	strmi	r3, [sp, #32]
 8005378:	2f00      	cmp	r7, #0
 800537a:	db39      	blt.n	80053f0 <_dtoa_r+0x218>
 800537c:	9b08      	ldr	r3, [sp, #32]
 800537e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005380:	443b      	add	r3, r7
 8005382:	9308      	str	r3, [sp, #32]
 8005384:	2300      	movs	r3, #0
 8005386:	930a      	str	r3, [sp, #40]	@ 0x28
 8005388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800538a:	2b09      	cmp	r3, #9
 800538c:	d864      	bhi.n	8005458 <_dtoa_r+0x280>
 800538e:	2b05      	cmp	r3, #5
 8005390:	bfc4      	itt	gt
 8005392:	3b04      	subgt	r3, #4
 8005394:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005398:	f1a3 0302 	sub.w	r3, r3, #2
 800539c:	bfcc      	ite	gt
 800539e:	2400      	movgt	r4, #0
 80053a0:	2401      	movle	r4, #1
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d863      	bhi.n	800546e <_dtoa_r+0x296>
 80053a6:	e8df f003 	tbb	[pc, r3]
 80053aa:	372a      	.short	0x372a
 80053ac:	5535      	.short	0x5535
 80053ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80053b2:	441e      	add	r6, r3
 80053b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	bfc1      	itttt	gt
 80053bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80053c0:	409f      	lslgt	r7, r3
 80053c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80053c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80053ca:	bfd6      	itet	le
 80053cc:	f1c3 0320 	rsble	r3, r3, #32
 80053d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80053d4:	fa04 f003 	lslle.w	r0, r4, r3
 80053d8:	f7fb f894 	bl	8000504 <__aeabi_ui2d>
 80053dc:	2201      	movs	r2, #1
 80053de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80053e2:	3e01      	subs	r6, #1
 80053e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80053e6:	e777      	b.n	80052d8 <_dtoa_r+0x100>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e7b8      	b.n	800535e <_dtoa_r+0x186>
 80053ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80053ee:	e7b7      	b.n	8005360 <_dtoa_r+0x188>
 80053f0:	427b      	negs	r3, r7
 80053f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80053f4:	2300      	movs	r3, #0
 80053f6:	eba8 0807 	sub.w	r8, r8, r7
 80053fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80053fc:	e7c4      	b.n	8005388 <_dtoa_r+0x1b0>
 80053fe:	2300      	movs	r3, #0
 8005400:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005404:	2b00      	cmp	r3, #0
 8005406:	dc35      	bgt.n	8005474 <_dtoa_r+0x29c>
 8005408:	2301      	movs	r3, #1
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	9307      	str	r3, [sp, #28]
 800540e:	461a      	mov	r2, r3
 8005410:	920e      	str	r2, [sp, #56]	@ 0x38
 8005412:	e00b      	b.n	800542c <_dtoa_r+0x254>
 8005414:	2301      	movs	r3, #1
 8005416:	e7f3      	b.n	8005400 <_dtoa_r+0x228>
 8005418:	2300      	movs	r3, #0
 800541a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800541c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	3301      	adds	r3, #1
 8005424:	2b01      	cmp	r3, #1
 8005426:	9307      	str	r3, [sp, #28]
 8005428:	bfb8      	it	lt
 800542a:	2301      	movlt	r3, #1
 800542c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005430:	2100      	movs	r1, #0
 8005432:	2204      	movs	r2, #4
 8005434:	f102 0514 	add.w	r5, r2, #20
 8005438:	429d      	cmp	r5, r3
 800543a:	d91f      	bls.n	800547c <_dtoa_r+0x2a4>
 800543c:	6041      	str	r1, [r0, #4]
 800543e:	4658      	mov	r0, fp
 8005440:	f000 fd8e 	bl	8005f60 <_Balloc>
 8005444:	4682      	mov	sl, r0
 8005446:	2800      	cmp	r0, #0
 8005448:	d13c      	bne.n	80054c4 <_dtoa_r+0x2ec>
 800544a:	4b1b      	ldr	r3, [pc, #108]	@ (80054b8 <_dtoa_r+0x2e0>)
 800544c:	4602      	mov	r2, r0
 800544e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005452:	e6d8      	b.n	8005206 <_dtoa_r+0x2e>
 8005454:	2301      	movs	r3, #1
 8005456:	e7e0      	b.n	800541a <_dtoa_r+0x242>
 8005458:	2401      	movs	r4, #1
 800545a:	2300      	movs	r3, #0
 800545c:	9309      	str	r3, [sp, #36]	@ 0x24
 800545e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005460:	f04f 33ff 	mov.w	r3, #4294967295
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	9307      	str	r3, [sp, #28]
 8005468:	2200      	movs	r2, #0
 800546a:	2312      	movs	r3, #18
 800546c:	e7d0      	b.n	8005410 <_dtoa_r+0x238>
 800546e:	2301      	movs	r3, #1
 8005470:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005472:	e7f5      	b.n	8005460 <_dtoa_r+0x288>
 8005474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	9307      	str	r3, [sp, #28]
 800547a:	e7d7      	b.n	800542c <_dtoa_r+0x254>
 800547c:	3101      	adds	r1, #1
 800547e:	0052      	lsls	r2, r2, #1
 8005480:	e7d8      	b.n	8005434 <_dtoa_r+0x25c>
 8005482:	bf00      	nop
 8005484:	f3af 8000 	nop.w
 8005488:	636f4361 	.word	0x636f4361
 800548c:	3fd287a7 	.word	0x3fd287a7
 8005490:	8b60c8b3 	.word	0x8b60c8b3
 8005494:	3fc68a28 	.word	0x3fc68a28
 8005498:	509f79fb 	.word	0x509f79fb
 800549c:	3fd34413 	.word	0x3fd34413
 80054a0:	08007209 	.word	0x08007209
 80054a4:	08007220 	.word	0x08007220
 80054a8:	7ff00000 	.word	0x7ff00000
 80054ac:	080071d9 	.word	0x080071d9
 80054b0:	3ff80000 	.word	0x3ff80000
 80054b4:	08007318 	.word	0x08007318
 80054b8:	08007278 	.word	0x08007278
 80054bc:	08007205 	.word	0x08007205
 80054c0:	080071d8 	.word	0x080071d8
 80054c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80054c8:	6018      	str	r0, [r3, #0]
 80054ca:	9b07      	ldr	r3, [sp, #28]
 80054cc:	2b0e      	cmp	r3, #14
 80054ce:	f200 80a4 	bhi.w	800561a <_dtoa_r+0x442>
 80054d2:	2c00      	cmp	r4, #0
 80054d4:	f000 80a1 	beq.w	800561a <_dtoa_r+0x442>
 80054d8:	2f00      	cmp	r7, #0
 80054da:	dd33      	ble.n	8005544 <_dtoa_r+0x36c>
 80054dc:	4bad      	ldr	r3, [pc, #692]	@ (8005794 <_dtoa_r+0x5bc>)
 80054de:	f007 020f 	and.w	r2, r7, #15
 80054e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054e6:	ed93 7b00 	vldr	d7, [r3]
 80054ea:	05f8      	lsls	r0, r7, #23
 80054ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80054f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80054f4:	d516      	bpl.n	8005524 <_dtoa_r+0x34c>
 80054f6:	4ba8      	ldr	r3, [pc, #672]	@ (8005798 <_dtoa_r+0x5c0>)
 80054f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005500:	f7fb f9a4 	bl	800084c <__aeabi_ddiv>
 8005504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005508:	f004 040f 	and.w	r4, r4, #15
 800550c:	2603      	movs	r6, #3
 800550e:	4da2      	ldr	r5, [pc, #648]	@ (8005798 <_dtoa_r+0x5c0>)
 8005510:	b954      	cbnz	r4, 8005528 <_dtoa_r+0x350>
 8005512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800551a:	f7fb f997 	bl	800084c <__aeabi_ddiv>
 800551e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005522:	e028      	b.n	8005576 <_dtoa_r+0x39e>
 8005524:	2602      	movs	r6, #2
 8005526:	e7f2      	b.n	800550e <_dtoa_r+0x336>
 8005528:	07e1      	lsls	r1, r4, #31
 800552a:	d508      	bpl.n	800553e <_dtoa_r+0x366>
 800552c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005530:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005534:	f7fb f860 	bl	80005f8 <__aeabi_dmul>
 8005538:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800553c:	3601      	adds	r6, #1
 800553e:	1064      	asrs	r4, r4, #1
 8005540:	3508      	adds	r5, #8
 8005542:	e7e5      	b.n	8005510 <_dtoa_r+0x338>
 8005544:	f000 80d2 	beq.w	80056ec <_dtoa_r+0x514>
 8005548:	427c      	negs	r4, r7
 800554a:	4b92      	ldr	r3, [pc, #584]	@ (8005794 <_dtoa_r+0x5bc>)
 800554c:	4d92      	ldr	r5, [pc, #584]	@ (8005798 <_dtoa_r+0x5c0>)
 800554e:	f004 020f 	and.w	r2, r4, #15
 8005552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800555e:	f7fb f84b 	bl	80005f8 <__aeabi_dmul>
 8005562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005566:	1124      	asrs	r4, r4, #4
 8005568:	2300      	movs	r3, #0
 800556a:	2602      	movs	r6, #2
 800556c:	2c00      	cmp	r4, #0
 800556e:	f040 80b2 	bne.w	80056d6 <_dtoa_r+0x4fe>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1d3      	bne.n	800551e <_dtoa_r+0x346>
 8005576:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005578:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 80b7 	beq.w	80056f0 <_dtoa_r+0x518>
 8005582:	4b86      	ldr	r3, [pc, #536]	@ (800579c <_dtoa_r+0x5c4>)
 8005584:	2200      	movs	r2, #0
 8005586:	4620      	mov	r0, r4
 8005588:	4629      	mov	r1, r5
 800558a:	f7fb faa7 	bl	8000adc <__aeabi_dcmplt>
 800558e:	2800      	cmp	r0, #0
 8005590:	f000 80ae 	beq.w	80056f0 <_dtoa_r+0x518>
 8005594:	9b07      	ldr	r3, [sp, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80aa 	beq.w	80056f0 <_dtoa_r+0x518>
 800559c:	9b00      	ldr	r3, [sp, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	dd37      	ble.n	8005612 <_dtoa_r+0x43a>
 80055a2:	1e7b      	subs	r3, r7, #1
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	4620      	mov	r0, r4
 80055a8:	4b7d      	ldr	r3, [pc, #500]	@ (80057a0 <_dtoa_r+0x5c8>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	4629      	mov	r1, r5
 80055ae:	f7fb f823 	bl	80005f8 <__aeabi_dmul>
 80055b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055b6:	9c00      	ldr	r4, [sp, #0]
 80055b8:	3601      	adds	r6, #1
 80055ba:	4630      	mov	r0, r6
 80055bc:	f7fa ffb2 	bl	8000524 <__aeabi_i2d>
 80055c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055c4:	f7fb f818 	bl	80005f8 <__aeabi_dmul>
 80055c8:	4b76      	ldr	r3, [pc, #472]	@ (80057a4 <_dtoa_r+0x5cc>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	f7fa fe5e 	bl	800028c <__adddf3>
 80055d0:	4605      	mov	r5, r0
 80055d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80055d6:	2c00      	cmp	r4, #0
 80055d8:	f040 808d 	bne.w	80056f6 <_dtoa_r+0x51e>
 80055dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055e0:	4b71      	ldr	r3, [pc, #452]	@ (80057a8 <_dtoa_r+0x5d0>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	f7fa fe50 	bl	8000288 <__aeabi_dsub>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055f0:	462a      	mov	r2, r5
 80055f2:	4633      	mov	r3, r6
 80055f4:	f7fb fa90 	bl	8000b18 <__aeabi_dcmpgt>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	f040 828b 	bne.w	8005b14 <_dtoa_r+0x93c>
 80055fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005602:	462a      	mov	r2, r5
 8005604:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005608:	f7fb fa68 	bl	8000adc <__aeabi_dcmplt>
 800560c:	2800      	cmp	r0, #0
 800560e:	f040 8128 	bne.w	8005862 <_dtoa_r+0x68a>
 8005612:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005616:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800561a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800561c:	2b00      	cmp	r3, #0
 800561e:	f2c0 815a 	blt.w	80058d6 <_dtoa_r+0x6fe>
 8005622:	2f0e      	cmp	r7, #14
 8005624:	f300 8157 	bgt.w	80058d6 <_dtoa_r+0x6fe>
 8005628:	4b5a      	ldr	r3, [pc, #360]	@ (8005794 <_dtoa_r+0x5bc>)
 800562a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800562e:	ed93 7b00 	vldr	d7, [r3]
 8005632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005634:	2b00      	cmp	r3, #0
 8005636:	ed8d 7b00 	vstr	d7, [sp]
 800563a:	da03      	bge.n	8005644 <_dtoa_r+0x46c>
 800563c:	9b07      	ldr	r3, [sp, #28]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f340 8101 	ble.w	8005846 <_dtoa_r+0x66e>
 8005644:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005648:	4656      	mov	r6, sl
 800564a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800564e:	4620      	mov	r0, r4
 8005650:	4629      	mov	r1, r5
 8005652:	f7fb f8fb 	bl	800084c <__aeabi_ddiv>
 8005656:	f7fb fa7f 	bl	8000b58 <__aeabi_d2iz>
 800565a:	4680      	mov	r8, r0
 800565c:	f7fa ff62 	bl	8000524 <__aeabi_i2d>
 8005660:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005664:	f7fa ffc8 	bl	80005f8 <__aeabi_dmul>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4620      	mov	r0, r4
 800566e:	4629      	mov	r1, r5
 8005670:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005674:	f7fa fe08 	bl	8000288 <__aeabi_dsub>
 8005678:	f806 4b01 	strb.w	r4, [r6], #1
 800567c:	9d07      	ldr	r5, [sp, #28]
 800567e:	eba6 040a 	sub.w	r4, r6, sl
 8005682:	42a5      	cmp	r5, r4
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	f040 8117 	bne.w	80058ba <_dtoa_r+0x6e2>
 800568c:	f7fa fdfe 	bl	800028c <__adddf3>
 8005690:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005694:	4604      	mov	r4, r0
 8005696:	460d      	mov	r5, r1
 8005698:	f7fb fa3e 	bl	8000b18 <__aeabi_dcmpgt>
 800569c:	2800      	cmp	r0, #0
 800569e:	f040 80f9 	bne.w	8005894 <_dtoa_r+0x6bc>
 80056a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056a6:	4620      	mov	r0, r4
 80056a8:	4629      	mov	r1, r5
 80056aa:	f7fb fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80056ae:	b118      	cbz	r0, 80056b8 <_dtoa_r+0x4e0>
 80056b0:	f018 0f01 	tst.w	r8, #1
 80056b4:	f040 80ee 	bne.w	8005894 <_dtoa_r+0x6bc>
 80056b8:	4649      	mov	r1, r9
 80056ba:	4658      	mov	r0, fp
 80056bc:	f000 fc90 	bl	8005fe0 <_Bfree>
 80056c0:	2300      	movs	r3, #0
 80056c2:	7033      	strb	r3, [r6, #0]
 80056c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80056c6:	3701      	adds	r7, #1
 80056c8:	601f      	str	r7, [r3, #0]
 80056ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 831d 	beq.w	8005d0c <_dtoa_r+0xb34>
 80056d2:	601e      	str	r6, [r3, #0]
 80056d4:	e31a      	b.n	8005d0c <_dtoa_r+0xb34>
 80056d6:	07e2      	lsls	r2, r4, #31
 80056d8:	d505      	bpl.n	80056e6 <_dtoa_r+0x50e>
 80056da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056de:	f7fa ff8b 	bl	80005f8 <__aeabi_dmul>
 80056e2:	3601      	adds	r6, #1
 80056e4:	2301      	movs	r3, #1
 80056e6:	1064      	asrs	r4, r4, #1
 80056e8:	3508      	adds	r5, #8
 80056ea:	e73f      	b.n	800556c <_dtoa_r+0x394>
 80056ec:	2602      	movs	r6, #2
 80056ee:	e742      	b.n	8005576 <_dtoa_r+0x39e>
 80056f0:	9c07      	ldr	r4, [sp, #28]
 80056f2:	9704      	str	r7, [sp, #16]
 80056f4:	e761      	b.n	80055ba <_dtoa_r+0x3e2>
 80056f6:	4b27      	ldr	r3, [pc, #156]	@ (8005794 <_dtoa_r+0x5bc>)
 80056f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80056fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80056fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005702:	4454      	add	r4, sl
 8005704:	2900      	cmp	r1, #0
 8005706:	d053      	beq.n	80057b0 <_dtoa_r+0x5d8>
 8005708:	4928      	ldr	r1, [pc, #160]	@ (80057ac <_dtoa_r+0x5d4>)
 800570a:	2000      	movs	r0, #0
 800570c:	f7fb f89e 	bl	800084c <__aeabi_ddiv>
 8005710:	4633      	mov	r3, r6
 8005712:	462a      	mov	r2, r5
 8005714:	f7fa fdb8 	bl	8000288 <__aeabi_dsub>
 8005718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800571c:	4656      	mov	r6, sl
 800571e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005722:	f7fb fa19 	bl	8000b58 <__aeabi_d2iz>
 8005726:	4605      	mov	r5, r0
 8005728:	f7fa fefc 	bl	8000524 <__aeabi_i2d>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005734:	f7fa fda8 	bl	8000288 <__aeabi_dsub>
 8005738:	3530      	adds	r5, #48	@ 0x30
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005742:	f806 5b01 	strb.w	r5, [r6], #1
 8005746:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800574a:	f7fb f9c7 	bl	8000adc <__aeabi_dcmplt>
 800574e:	2800      	cmp	r0, #0
 8005750:	d171      	bne.n	8005836 <_dtoa_r+0x65e>
 8005752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005756:	4911      	ldr	r1, [pc, #68]	@ (800579c <_dtoa_r+0x5c4>)
 8005758:	2000      	movs	r0, #0
 800575a:	f7fa fd95 	bl	8000288 <__aeabi_dsub>
 800575e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005762:	f7fb f9bb 	bl	8000adc <__aeabi_dcmplt>
 8005766:	2800      	cmp	r0, #0
 8005768:	f040 8095 	bne.w	8005896 <_dtoa_r+0x6be>
 800576c:	42a6      	cmp	r6, r4
 800576e:	f43f af50 	beq.w	8005612 <_dtoa_r+0x43a>
 8005772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005776:	4b0a      	ldr	r3, [pc, #40]	@ (80057a0 <_dtoa_r+0x5c8>)
 8005778:	2200      	movs	r2, #0
 800577a:	f7fa ff3d 	bl	80005f8 <__aeabi_dmul>
 800577e:	4b08      	ldr	r3, [pc, #32]	@ (80057a0 <_dtoa_r+0x5c8>)
 8005780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005784:	2200      	movs	r2, #0
 8005786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800578a:	f7fa ff35 	bl	80005f8 <__aeabi_dmul>
 800578e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005792:	e7c4      	b.n	800571e <_dtoa_r+0x546>
 8005794:	08007318 	.word	0x08007318
 8005798:	080072f0 	.word	0x080072f0
 800579c:	3ff00000 	.word	0x3ff00000
 80057a0:	40240000 	.word	0x40240000
 80057a4:	401c0000 	.word	0x401c0000
 80057a8:	40140000 	.word	0x40140000
 80057ac:	3fe00000 	.word	0x3fe00000
 80057b0:	4631      	mov	r1, r6
 80057b2:	4628      	mov	r0, r5
 80057b4:	f7fa ff20 	bl	80005f8 <__aeabi_dmul>
 80057b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80057bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80057be:	4656      	mov	r6, sl
 80057c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057c4:	f7fb f9c8 	bl	8000b58 <__aeabi_d2iz>
 80057c8:	4605      	mov	r5, r0
 80057ca:	f7fa feab 	bl	8000524 <__aeabi_i2d>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057d6:	f7fa fd57 	bl	8000288 <__aeabi_dsub>
 80057da:	3530      	adds	r5, #48	@ 0x30
 80057dc:	f806 5b01 	strb.w	r5, [r6], #1
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	42a6      	cmp	r6, r4
 80057e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	d124      	bne.n	800583a <_dtoa_r+0x662>
 80057f0:	4bac      	ldr	r3, [pc, #688]	@ (8005aa4 <_dtoa_r+0x8cc>)
 80057f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80057f6:	f7fa fd49 	bl	800028c <__adddf3>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005802:	f7fb f989 	bl	8000b18 <__aeabi_dcmpgt>
 8005806:	2800      	cmp	r0, #0
 8005808:	d145      	bne.n	8005896 <_dtoa_r+0x6be>
 800580a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800580e:	49a5      	ldr	r1, [pc, #660]	@ (8005aa4 <_dtoa_r+0x8cc>)
 8005810:	2000      	movs	r0, #0
 8005812:	f7fa fd39 	bl	8000288 <__aeabi_dsub>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800581e:	f7fb f95d 	bl	8000adc <__aeabi_dcmplt>
 8005822:	2800      	cmp	r0, #0
 8005824:	f43f aef5 	beq.w	8005612 <_dtoa_r+0x43a>
 8005828:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800582a:	1e73      	subs	r3, r6, #1
 800582c:	9315      	str	r3, [sp, #84]	@ 0x54
 800582e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005832:	2b30      	cmp	r3, #48	@ 0x30
 8005834:	d0f8      	beq.n	8005828 <_dtoa_r+0x650>
 8005836:	9f04      	ldr	r7, [sp, #16]
 8005838:	e73e      	b.n	80056b8 <_dtoa_r+0x4e0>
 800583a:	4b9b      	ldr	r3, [pc, #620]	@ (8005aa8 <_dtoa_r+0x8d0>)
 800583c:	f7fa fedc 	bl	80005f8 <__aeabi_dmul>
 8005840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005844:	e7bc      	b.n	80057c0 <_dtoa_r+0x5e8>
 8005846:	d10c      	bne.n	8005862 <_dtoa_r+0x68a>
 8005848:	4b98      	ldr	r3, [pc, #608]	@ (8005aac <_dtoa_r+0x8d4>)
 800584a:	2200      	movs	r2, #0
 800584c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005850:	f7fa fed2 	bl	80005f8 <__aeabi_dmul>
 8005854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005858:	f7fb f954 	bl	8000b04 <__aeabi_dcmpge>
 800585c:	2800      	cmp	r0, #0
 800585e:	f000 8157 	beq.w	8005b10 <_dtoa_r+0x938>
 8005862:	2400      	movs	r4, #0
 8005864:	4625      	mov	r5, r4
 8005866:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005868:	43db      	mvns	r3, r3
 800586a:	9304      	str	r3, [sp, #16]
 800586c:	4656      	mov	r6, sl
 800586e:	2700      	movs	r7, #0
 8005870:	4621      	mov	r1, r4
 8005872:	4658      	mov	r0, fp
 8005874:	f000 fbb4 	bl	8005fe0 <_Bfree>
 8005878:	2d00      	cmp	r5, #0
 800587a:	d0dc      	beq.n	8005836 <_dtoa_r+0x65e>
 800587c:	b12f      	cbz	r7, 800588a <_dtoa_r+0x6b2>
 800587e:	42af      	cmp	r7, r5
 8005880:	d003      	beq.n	800588a <_dtoa_r+0x6b2>
 8005882:	4639      	mov	r1, r7
 8005884:	4658      	mov	r0, fp
 8005886:	f000 fbab 	bl	8005fe0 <_Bfree>
 800588a:	4629      	mov	r1, r5
 800588c:	4658      	mov	r0, fp
 800588e:	f000 fba7 	bl	8005fe0 <_Bfree>
 8005892:	e7d0      	b.n	8005836 <_dtoa_r+0x65e>
 8005894:	9704      	str	r7, [sp, #16]
 8005896:	4633      	mov	r3, r6
 8005898:	461e      	mov	r6, r3
 800589a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800589e:	2a39      	cmp	r2, #57	@ 0x39
 80058a0:	d107      	bne.n	80058b2 <_dtoa_r+0x6da>
 80058a2:	459a      	cmp	sl, r3
 80058a4:	d1f8      	bne.n	8005898 <_dtoa_r+0x6c0>
 80058a6:	9a04      	ldr	r2, [sp, #16]
 80058a8:	3201      	adds	r2, #1
 80058aa:	9204      	str	r2, [sp, #16]
 80058ac:	2230      	movs	r2, #48	@ 0x30
 80058ae:	f88a 2000 	strb.w	r2, [sl]
 80058b2:	781a      	ldrb	r2, [r3, #0]
 80058b4:	3201      	adds	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	e7bd      	b.n	8005836 <_dtoa_r+0x65e>
 80058ba:	4b7b      	ldr	r3, [pc, #492]	@ (8005aa8 <_dtoa_r+0x8d0>)
 80058bc:	2200      	movs	r2, #0
 80058be:	f7fa fe9b 	bl	80005f8 <__aeabi_dmul>
 80058c2:	2200      	movs	r2, #0
 80058c4:	2300      	movs	r3, #0
 80058c6:	4604      	mov	r4, r0
 80058c8:	460d      	mov	r5, r1
 80058ca:	f7fb f8fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	f43f aebb 	beq.w	800564a <_dtoa_r+0x472>
 80058d4:	e6f0      	b.n	80056b8 <_dtoa_r+0x4e0>
 80058d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80058d8:	2a00      	cmp	r2, #0
 80058da:	f000 80db 	beq.w	8005a94 <_dtoa_r+0x8bc>
 80058de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058e0:	2a01      	cmp	r2, #1
 80058e2:	f300 80bf 	bgt.w	8005a64 <_dtoa_r+0x88c>
 80058e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80058e8:	2a00      	cmp	r2, #0
 80058ea:	f000 80b7 	beq.w	8005a5c <_dtoa_r+0x884>
 80058ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80058f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80058f4:	4646      	mov	r6, r8
 80058f6:	9a08      	ldr	r2, [sp, #32]
 80058f8:	2101      	movs	r1, #1
 80058fa:	441a      	add	r2, r3
 80058fc:	4658      	mov	r0, fp
 80058fe:	4498      	add	r8, r3
 8005900:	9208      	str	r2, [sp, #32]
 8005902:	f000 fc21 	bl	8006148 <__i2b>
 8005906:	4605      	mov	r5, r0
 8005908:	b15e      	cbz	r6, 8005922 <_dtoa_r+0x74a>
 800590a:	9b08      	ldr	r3, [sp, #32]
 800590c:	2b00      	cmp	r3, #0
 800590e:	dd08      	ble.n	8005922 <_dtoa_r+0x74a>
 8005910:	42b3      	cmp	r3, r6
 8005912:	9a08      	ldr	r2, [sp, #32]
 8005914:	bfa8      	it	ge
 8005916:	4633      	movge	r3, r6
 8005918:	eba8 0803 	sub.w	r8, r8, r3
 800591c:	1af6      	subs	r6, r6, r3
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	9308      	str	r3, [sp, #32]
 8005922:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005924:	b1f3      	cbz	r3, 8005964 <_dtoa_r+0x78c>
 8005926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80b7 	beq.w	8005a9c <_dtoa_r+0x8c4>
 800592e:	b18c      	cbz	r4, 8005954 <_dtoa_r+0x77c>
 8005930:	4629      	mov	r1, r5
 8005932:	4622      	mov	r2, r4
 8005934:	4658      	mov	r0, fp
 8005936:	f000 fcc7 	bl	80062c8 <__pow5mult>
 800593a:	464a      	mov	r2, r9
 800593c:	4601      	mov	r1, r0
 800593e:	4605      	mov	r5, r0
 8005940:	4658      	mov	r0, fp
 8005942:	f000 fc17 	bl	8006174 <__multiply>
 8005946:	4649      	mov	r1, r9
 8005948:	9004      	str	r0, [sp, #16]
 800594a:	4658      	mov	r0, fp
 800594c:	f000 fb48 	bl	8005fe0 <_Bfree>
 8005950:	9b04      	ldr	r3, [sp, #16]
 8005952:	4699      	mov	r9, r3
 8005954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005956:	1b1a      	subs	r2, r3, r4
 8005958:	d004      	beq.n	8005964 <_dtoa_r+0x78c>
 800595a:	4649      	mov	r1, r9
 800595c:	4658      	mov	r0, fp
 800595e:	f000 fcb3 	bl	80062c8 <__pow5mult>
 8005962:	4681      	mov	r9, r0
 8005964:	2101      	movs	r1, #1
 8005966:	4658      	mov	r0, fp
 8005968:	f000 fbee 	bl	8006148 <__i2b>
 800596c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800596e:	4604      	mov	r4, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 81cf 	beq.w	8005d14 <_dtoa_r+0xb3c>
 8005976:	461a      	mov	r2, r3
 8005978:	4601      	mov	r1, r0
 800597a:	4658      	mov	r0, fp
 800597c:	f000 fca4 	bl	80062c8 <__pow5mult>
 8005980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005982:	2b01      	cmp	r3, #1
 8005984:	4604      	mov	r4, r0
 8005986:	f300 8095 	bgt.w	8005ab4 <_dtoa_r+0x8dc>
 800598a:	9b02      	ldr	r3, [sp, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f040 8087 	bne.w	8005aa0 <_dtoa_r+0x8c8>
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005998:	2b00      	cmp	r3, #0
 800599a:	f040 8089 	bne.w	8005ab0 <_dtoa_r+0x8d8>
 800599e:	9b03      	ldr	r3, [sp, #12]
 80059a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059a4:	0d1b      	lsrs	r3, r3, #20
 80059a6:	051b      	lsls	r3, r3, #20
 80059a8:	b12b      	cbz	r3, 80059b6 <_dtoa_r+0x7de>
 80059aa:	9b08      	ldr	r3, [sp, #32]
 80059ac:	3301      	adds	r3, #1
 80059ae:	9308      	str	r3, [sp, #32]
 80059b0:	f108 0801 	add.w	r8, r8, #1
 80059b4:	2301      	movs	r3, #1
 80059b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80059b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 81b0 	beq.w	8005d20 <_dtoa_r+0xb48>
 80059c0:	6923      	ldr	r3, [r4, #16]
 80059c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80059c6:	6918      	ldr	r0, [r3, #16]
 80059c8:	f000 fb72 	bl	80060b0 <__hi0bits>
 80059cc:	f1c0 0020 	rsb	r0, r0, #32
 80059d0:	9b08      	ldr	r3, [sp, #32]
 80059d2:	4418      	add	r0, r3
 80059d4:	f010 001f 	ands.w	r0, r0, #31
 80059d8:	d077      	beq.n	8005aca <_dtoa_r+0x8f2>
 80059da:	f1c0 0320 	rsb	r3, r0, #32
 80059de:	2b04      	cmp	r3, #4
 80059e0:	dd6b      	ble.n	8005aba <_dtoa_r+0x8e2>
 80059e2:	9b08      	ldr	r3, [sp, #32]
 80059e4:	f1c0 001c 	rsb	r0, r0, #28
 80059e8:	4403      	add	r3, r0
 80059ea:	4480      	add	r8, r0
 80059ec:	4406      	add	r6, r0
 80059ee:	9308      	str	r3, [sp, #32]
 80059f0:	f1b8 0f00 	cmp.w	r8, #0
 80059f4:	dd05      	ble.n	8005a02 <_dtoa_r+0x82a>
 80059f6:	4649      	mov	r1, r9
 80059f8:	4642      	mov	r2, r8
 80059fa:	4658      	mov	r0, fp
 80059fc:	f000 fcbe 	bl	800637c <__lshift>
 8005a00:	4681      	mov	r9, r0
 8005a02:	9b08      	ldr	r3, [sp, #32]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	dd05      	ble.n	8005a14 <_dtoa_r+0x83c>
 8005a08:	4621      	mov	r1, r4
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	4658      	mov	r0, fp
 8005a0e:	f000 fcb5 	bl	800637c <__lshift>
 8005a12:	4604      	mov	r4, r0
 8005a14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d059      	beq.n	8005ace <_dtoa_r+0x8f6>
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	4648      	mov	r0, r9
 8005a1e:	f000 fd19 	bl	8006454 <__mcmp>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	da53      	bge.n	8005ace <_dtoa_r+0x8f6>
 8005a26:	1e7b      	subs	r3, r7, #1
 8005a28:	9304      	str	r3, [sp, #16]
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	220a      	movs	r2, #10
 8005a30:	4658      	mov	r0, fp
 8005a32:	f000 faf7 	bl	8006024 <__multadd>
 8005a36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a38:	4681      	mov	r9, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8172 	beq.w	8005d24 <_dtoa_r+0xb4c>
 8005a40:	2300      	movs	r3, #0
 8005a42:	4629      	mov	r1, r5
 8005a44:	220a      	movs	r2, #10
 8005a46:	4658      	mov	r0, fp
 8005a48:	f000 faec 	bl	8006024 <__multadd>
 8005a4c:	9b00      	ldr	r3, [sp, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	4605      	mov	r5, r0
 8005a52:	dc67      	bgt.n	8005b24 <_dtoa_r+0x94c>
 8005a54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	dc41      	bgt.n	8005ade <_dtoa_r+0x906>
 8005a5a:	e063      	b.n	8005b24 <_dtoa_r+0x94c>
 8005a5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005a5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005a62:	e746      	b.n	80058f2 <_dtoa_r+0x71a>
 8005a64:	9b07      	ldr	r3, [sp, #28]
 8005a66:	1e5c      	subs	r4, r3, #1
 8005a68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a6a:	42a3      	cmp	r3, r4
 8005a6c:	bfbf      	itttt	lt
 8005a6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005a70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005a72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005a74:	1ae3      	sublt	r3, r4, r3
 8005a76:	bfb4      	ite	lt
 8005a78:	18d2      	addlt	r2, r2, r3
 8005a7a:	1b1c      	subge	r4, r3, r4
 8005a7c:	9b07      	ldr	r3, [sp, #28]
 8005a7e:	bfbc      	itt	lt
 8005a80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005a82:	2400      	movlt	r4, #0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bfb5      	itete	lt
 8005a88:	eba8 0603 	sublt.w	r6, r8, r3
 8005a8c:	9b07      	ldrge	r3, [sp, #28]
 8005a8e:	2300      	movlt	r3, #0
 8005a90:	4646      	movge	r6, r8
 8005a92:	e730      	b.n	80058f6 <_dtoa_r+0x71e>
 8005a94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005a98:	4646      	mov	r6, r8
 8005a9a:	e735      	b.n	8005908 <_dtoa_r+0x730>
 8005a9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a9e:	e75c      	b.n	800595a <_dtoa_r+0x782>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e788      	b.n	80059b6 <_dtoa_r+0x7de>
 8005aa4:	3fe00000 	.word	0x3fe00000
 8005aa8:	40240000 	.word	0x40240000
 8005aac:	40140000 	.word	0x40140000
 8005ab0:	9b02      	ldr	r3, [sp, #8]
 8005ab2:	e780      	b.n	80059b6 <_dtoa_r+0x7de>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ab8:	e782      	b.n	80059c0 <_dtoa_r+0x7e8>
 8005aba:	d099      	beq.n	80059f0 <_dtoa_r+0x818>
 8005abc:	9a08      	ldr	r2, [sp, #32]
 8005abe:	331c      	adds	r3, #28
 8005ac0:	441a      	add	r2, r3
 8005ac2:	4498      	add	r8, r3
 8005ac4:	441e      	add	r6, r3
 8005ac6:	9208      	str	r2, [sp, #32]
 8005ac8:	e792      	b.n	80059f0 <_dtoa_r+0x818>
 8005aca:	4603      	mov	r3, r0
 8005acc:	e7f6      	b.n	8005abc <_dtoa_r+0x8e4>
 8005ace:	9b07      	ldr	r3, [sp, #28]
 8005ad0:	9704      	str	r7, [sp, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	dc20      	bgt.n	8005b18 <_dtoa_r+0x940>
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	dd1e      	ble.n	8005b1c <_dtoa_r+0x944>
 8005ade:	9b00      	ldr	r3, [sp, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f47f aec0 	bne.w	8005866 <_dtoa_r+0x68e>
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	2205      	movs	r2, #5
 8005aea:	4658      	mov	r0, fp
 8005aec:	f000 fa9a 	bl	8006024 <__multadd>
 8005af0:	4601      	mov	r1, r0
 8005af2:	4604      	mov	r4, r0
 8005af4:	4648      	mov	r0, r9
 8005af6:	f000 fcad 	bl	8006454 <__mcmp>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	f77f aeb3 	ble.w	8005866 <_dtoa_r+0x68e>
 8005b00:	4656      	mov	r6, sl
 8005b02:	2331      	movs	r3, #49	@ 0x31
 8005b04:	f806 3b01 	strb.w	r3, [r6], #1
 8005b08:	9b04      	ldr	r3, [sp, #16]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	e6ae      	b.n	800586e <_dtoa_r+0x696>
 8005b10:	9c07      	ldr	r4, [sp, #28]
 8005b12:	9704      	str	r7, [sp, #16]
 8005b14:	4625      	mov	r5, r4
 8005b16:	e7f3      	b.n	8005b00 <_dtoa_r+0x928>
 8005b18:	9b07      	ldr	r3, [sp, #28]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 8104 	beq.w	8005d2c <_dtoa_r+0xb54>
 8005b24:	2e00      	cmp	r6, #0
 8005b26:	dd05      	ble.n	8005b34 <_dtoa_r+0x95c>
 8005b28:	4629      	mov	r1, r5
 8005b2a:	4632      	mov	r2, r6
 8005b2c:	4658      	mov	r0, fp
 8005b2e:	f000 fc25 	bl	800637c <__lshift>
 8005b32:	4605      	mov	r5, r0
 8005b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d05a      	beq.n	8005bf0 <_dtoa_r+0xa18>
 8005b3a:	6869      	ldr	r1, [r5, #4]
 8005b3c:	4658      	mov	r0, fp
 8005b3e:	f000 fa0f 	bl	8005f60 <_Balloc>
 8005b42:	4606      	mov	r6, r0
 8005b44:	b928      	cbnz	r0, 8005b52 <_dtoa_r+0x97a>
 8005b46:	4b84      	ldr	r3, [pc, #528]	@ (8005d58 <_dtoa_r+0xb80>)
 8005b48:	4602      	mov	r2, r0
 8005b4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005b4e:	f7ff bb5a 	b.w	8005206 <_dtoa_r+0x2e>
 8005b52:	692a      	ldr	r2, [r5, #16]
 8005b54:	3202      	adds	r2, #2
 8005b56:	0092      	lsls	r2, r2, #2
 8005b58:	f105 010c 	add.w	r1, r5, #12
 8005b5c:	300c      	adds	r0, #12
 8005b5e:	f000 ffaf 	bl	8006ac0 <memcpy>
 8005b62:	2201      	movs	r2, #1
 8005b64:	4631      	mov	r1, r6
 8005b66:	4658      	mov	r0, fp
 8005b68:	f000 fc08 	bl	800637c <__lshift>
 8005b6c:	f10a 0301 	add.w	r3, sl, #1
 8005b70:	9307      	str	r3, [sp, #28]
 8005b72:	9b00      	ldr	r3, [sp, #0]
 8005b74:	4453      	add	r3, sl
 8005b76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b78:	9b02      	ldr	r3, [sp, #8]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	462f      	mov	r7, r5
 8005b80:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b82:	4605      	mov	r5, r0
 8005b84:	9b07      	ldr	r3, [sp, #28]
 8005b86:	4621      	mov	r1, r4
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	4648      	mov	r0, r9
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	f7ff fa98 	bl	80050c2 <quorem>
 8005b92:	4639      	mov	r1, r7
 8005b94:	9002      	str	r0, [sp, #8]
 8005b96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005b9a:	4648      	mov	r0, r9
 8005b9c:	f000 fc5a 	bl	8006454 <__mcmp>
 8005ba0:	462a      	mov	r2, r5
 8005ba2:	9008      	str	r0, [sp, #32]
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	4658      	mov	r0, fp
 8005ba8:	f000 fc70 	bl	800648c <__mdiff>
 8005bac:	68c2      	ldr	r2, [r0, #12]
 8005bae:	4606      	mov	r6, r0
 8005bb0:	bb02      	cbnz	r2, 8005bf4 <_dtoa_r+0xa1c>
 8005bb2:	4601      	mov	r1, r0
 8005bb4:	4648      	mov	r0, r9
 8005bb6:	f000 fc4d 	bl	8006454 <__mcmp>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	4658      	mov	r0, fp
 8005bc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005bc2:	f000 fa0d 	bl	8005fe0 <_Bfree>
 8005bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bca:	9e07      	ldr	r6, [sp, #28]
 8005bcc:	ea43 0102 	orr.w	r1, r3, r2
 8005bd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bd2:	4319      	orrs	r1, r3
 8005bd4:	d110      	bne.n	8005bf8 <_dtoa_r+0xa20>
 8005bd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005bda:	d029      	beq.n	8005c30 <_dtoa_r+0xa58>
 8005bdc:	9b08      	ldr	r3, [sp, #32]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	dd02      	ble.n	8005be8 <_dtoa_r+0xa10>
 8005be2:	9b02      	ldr	r3, [sp, #8]
 8005be4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005be8:	9b00      	ldr	r3, [sp, #0]
 8005bea:	f883 8000 	strb.w	r8, [r3]
 8005bee:	e63f      	b.n	8005870 <_dtoa_r+0x698>
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	e7bb      	b.n	8005b6c <_dtoa_r+0x994>
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	e7e1      	b.n	8005bbc <_dtoa_r+0x9e4>
 8005bf8:	9b08      	ldr	r3, [sp, #32]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	db04      	blt.n	8005c08 <_dtoa_r+0xa30>
 8005bfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c00:	430b      	orrs	r3, r1
 8005c02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c04:	430b      	orrs	r3, r1
 8005c06:	d120      	bne.n	8005c4a <_dtoa_r+0xa72>
 8005c08:	2a00      	cmp	r2, #0
 8005c0a:	dded      	ble.n	8005be8 <_dtoa_r+0xa10>
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	2201      	movs	r2, #1
 8005c10:	4658      	mov	r0, fp
 8005c12:	f000 fbb3 	bl	800637c <__lshift>
 8005c16:	4621      	mov	r1, r4
 8005c18:	4681      	mov	r9, r0
 8005c1a:	f000 fc1b 	bl	8006454 <__mcmp>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	dc03      	bgt.n	8005c2a <_dtoa_r+0xa52>
 8005c22:	d1e1      	bne.n	8005be8 <_dtoa_r+0xa10>
 8005c24:	f018 0f01 	tst.w	r8, #1
 8005c28:	d0de      	beq.n	8005be8 <_dtoa_r+0xa10>
 8005c2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005c2e:	d1d8      	bne.n	8005be2 <_dtoa_r+0xa0a>
 8005c30:	9a00      	ldr	r2, [sp, #0]
 8005c32:	2339      	movs	r3, #57	@ 0x39
 8005c34:	7013      	strb	r3, [r2, #0]
 8005c36:	4633      	mov	r3, r6
 8005c38:	461e      	mov	r6, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005c40:	2a39      	cmp	r2, #57	@ 0x39
 8005c42:	d052      	beq.n	8005cea <_dtoa_r+0xb12>
 8005c44:	3201      	adds	r2, #1
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	e612      	b.n	8005870 <_dtoa_r+0x698>
 8005c4a:	2a00      	cmp	r2, #0
 8005c4c:	dd07      	ble.n	8005c5e <_dtoa_r+0xa86>
 8005c4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005c52:	d0ed      	beq.n	8005c30 <_dtoa_r+0xa58>
 8005c54:	9a00      	ldr	r2, [sp, #0]
 8005c56:	f108 0301 	add.w	r3, r8, #1
 8005c5a:	7013      	strb	r3, [r2, #0]
 8005c5c:	e608      	b.n	8005870 <_dtoa_r+0x698>
 8005c5e:	9b07      	ldr	r3, [sp, #28]
 8005c60:	9a07      	ldr	r2, [sp, #28]
 8005c62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005c66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d028      	beq.n	8005cbe <_dtoa_r+0xae6>
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	2300      	movs	r3, #0
 8005c70:	220a      	movs	r2, #10
 8005c72:	4658      	mov	r0, fp
 8005c74:	f000 f9d6 	bl	8006024 <__multadd>
 8005c78:	42af      	cmp	r7, r5
 8005c7a:	4681      	mov	r9, r0
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	f04f 020a 	mov.w	r2, #10
 8005c84:	4639      	mov	r1, r7
 8005c86:	4658      	mov	r0, fp
 8005c88:	d107      	bne.n	8005c9a <_dtoa_r+0xac2>
 8005c8a:	f000 f9cb 	bl	8006024 <__multadd>
 8005c8e:	4607      	mov	r7, r0
 8005c90:	4605      	mov	r5, r0
 8005c92:	9b07      	ldr	r3, [sp, #28]
 8005c94:	3301      	adds	r3, #1
 8005c96:	9307      	str	r3, [sp, #28]
 8005c98:	e774      	b.n	8005b84 <_dtoa_r+0x9ac>
 8005c9a:	f000 f9c3 	bl	8006024 <__multadd>
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	4607      	mov	r7, r0
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	220a      	movs	r2, #10
 8005ca6:	4658      	mov	r0, fp
 8005ca8:	f000 f9bc 	bl	8006024 <__multadd>
 8005cac:	4605      	mov	r5, r0
 8005cae:	e7f0      	b.n	8005c92 <_dtoa_r+0xaba>
 8005cb0:	9b00      	ldr	r3, [sp, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bfcc      	ite	gt
 8005cb6:	461e      	movgt	r6, r3
 8005cb8:	2601      	movle	r6, #1
 8005cba:	4456      	add	r6, sl
 8005cbc:	2700      	movs	r7, #0
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	4658      	mov	r0, fp
 8005cc4:	f000 fb5a 	bl	800637c <__lshift>
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4681      	mov	r9, r0
 8005ccc:	f000 fbc2 	bl	8006454 <__mcmp>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	dcb0      	bgt.n	8005c36 <_dtoa_r+0xa5e>
 8005cd4:	d102      	bne.n	8005cdc <_dtoa_r+0xb04>
 8005cd6:	f018 0f01 	tst.w	r8, #1
 8005cda:	d1ac      	bne.n	8005c36 <_dtoa_r+0xa5e>
 8005cdc:	4633      	mov	r3, r6
 8005cde:	461e      	mov	r6, r3
 8005ce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ce4:	2a30      	cmp	r2, #48	@ 0x30
 8005ce6:	d0fa      	beq.n	8005cde <_dtoa_r+0xb06>
 8005ce8:	e5c2      	b.n	8005870 <_dtoa_r+0x698>
 8005cea:	459a      	cmp	sl, r3
 8005cec:	d1a4      	bne.n	8005c38 <_dtoa_r+0xa60>
 8005cee:	9b04      	ldr	r3, [sp, #16]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	9304      	str	r3, [sp, #16]
 8005cf4:	2331      	movs	r3, #49	@ 0x31
 8005cf6:	f88a 3000 	strb.w	r3, [sl]
 8005cfa:	e5b9      	b.n	8005870 <_dtoa_r+0x698>
 8005cfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cfe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005d5c <_dtoa_r+0xb84>
 8005d02:	b11b      	cbz	r3, 8005d0c <_dtoa_r+0xb34>
 8005d04:	f10a 0308 	add.w	r3, sl, #8
 8005d08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	4650      	mov	r0, sl
 8005d0e:	b019      	add	sp, #100	@ 0x64
 8005d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	f77f ae37 	ble.w	800598a <_dtoa_r+0x7b2>
 8005d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d20:	2001      	movs	r0, #1
 8005d22:	e655      	b.n	80059d0 <_dtoa_r+0x7f8>
 8005d24:	9b00      	ldr	r3, [sp, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f77f aed6 	ble.w	8005ad8 <_dtoa_r+0x900>
 8005d2c:	4656      	mov	r6, sl
 8005d2e:	4621      	mov	r1, r4
 8005d30:	4648      	mov	r0, r9
 8005d32:	f7ff f9c6 	bl	80050c2 <quorem>
 8005d36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005d3a:	f806 8b01 	strb.w	r8, [r6], #1
 8005d3e:	9b00      	ldr	r3, [sp, #0]
 8005d40:	eba6 020a 	sub.w	r2, r6, sl
 8005d44:	4293      	cmp	r3, r2
 8005d46:	ddb3      	ble.n	8005cb0 <_dtoa_r+0xad8>
 8005d48:	4649      	mov	r1, r9
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	220a      	movs	r2, #10
 8005d4e:	4658      	mov	r0, fp
 8005d50:	f000 f968 	bl	8006024 <__multadd>
 8005d54:	4681      	mov	r9, r0
 8005d56:	e7ea      	b.n	8005d2e <_dtoa_r+0xb56>
 8005d58:	08007278 	.word	0x08007278
 8005d5c:	080071fc 	.word	0x080071fc

08005d60 <_free_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4605      	mov	r5, r0
 8005d64:	2900      	cmp	r1, #0
 8005d66:	d041      	beq.n	8005dec <_free_r+0x8c>
 8005d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d6c:	1f0c      	subs	r4, r1, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	bfb8      	it	lt
 8005d72:	18e4      	addlt	r4, r4, r3
 8005d74:	f000 f8e8 	bl	8005f48 <__malloc_lock>
 8005d78:	4a1d      	ldr	r2, [pc, #116]	@ (8005df0 <_free_r+0x90>)
 8005d7a:	6813      	ldr	r3, [r2, #0]
 8005d7c:	b933      	cbnz	r3, 8005d8c <_free_r+0x2c>
 8005d7e:	6063      	str	r3, [r4, #4]
 8005d80:	6014      	str	r4, [r2, #0]
 8005d82:	4628      	mov	r0, r5
 8005d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d88:	f000 b8e4 	b.w	8005f54 <__malloc_unlock>
 8005d8c:	42a3      	cmp	r3, r4
 8005d8e:	d908      	bls.n	8005da2 <_free_r+0x42>
 8005d90:	6820      	ldr	r0, [r4, #0]
 8005d92:	1821      	adds	r1, r4, r0
 8005d94:	428b      	cmp	r3, r1
 8005d96:	bf01      	itttt	eq
 8005d98:	6819      	ldreq	r1, [r3, #0]
 8005d9a:	685b      	ldreq	r3, [r3, #4]
 8005d9c:	1809      	addeq	r1, r1, r0
 8005d9e:	6021      	streq	r1, [r4, #0]
 8005da0:	e7ed      	b.n	8005d7e <_free_r+0x1e>
 8005da2:	461a      	mov	r2, r3
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	b10b      	cbz	r3, 8005dac <_free_r+0x4c>
 8005da8:	42a3      	cmp	r3, r4
 8005daa:	d9fa      	bls.n	8005da2 <_free_r+0x42>
 8005dac:	6811      	ldr	r1, [r2, #0]
 8005dae:	1850      	adds	r0, r2, r1
 8005db0:	42a0      	cmp	r0, r4
 8005db2:	d10b      	bne.n	8005dcc <_free_r+0x6c>
 8005db4:	6820      	ldr	r0, [r4, #0]
 8005db6:	4401      	add	r1, r0
 8005db8:	1850      	adds	r0, r2, r1
 8005dba:	4283      	cmp	r3, r0
 8005dbc:	6011      	str	r1, [r2, #0]
 8005dbe:	d1e0      	bne.n	8005d82 <_free_r+0x22>
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	6053      	str	r3, [r2, #4]
 8005dc6:	4408      	add	r0, r1
 8005dc8:	6010      	str	r0, [r2, #0]
 8005dca:	e7da      	b.n	8005d82 <_free_r+0x22>
 8005dcc:	d902      	bls.n	8005dd4 <_free_r+0x74>
 8005dce:	230c      	movs	r3, #12
 8005dd0:	602b      	str	r3, [r5, #0]
 8005dd2:	e7d6      	b.n	8005d82 <_free_r+0x22>
 8005dd4:	6820      	ldr	r0, [r4, #0]
 8005dd6:	1821      	adds	r1, r4, r0
 8005dd8:	428b      	cmp	r3, r1
 8005dda:	bf04      	itt	eq
 8005ddc:	6819      	ldreq	r1, [r3, #0]
 8005dde:	685b      	ldreq	r3, [r3, #4]
 8005de0:	6063      	str	r3, [r4, #4]
 8005de2:	bf04      	itt	eq
 8005de4:	1809      	addeq	r1, r1, r0
 8005de6:	6021      	streq	r1, [r4, #0]
 8005de8:	6054      	str	r4, [r2, #4]
 8005dea:	e7ca      	b.n	8005d82 <_free_r+0x22>
 8005dec:	bd38      	pop	{r3, r4, r5, pc}
 8005dee:	bf00      	nop
 8005df0:	2000041c 	.word	0x2000041c

08005df4 <malloc>:
 8005df4:	4b02      	ldr	r3, [pc, #8]	@ (8005e00 <malloc+0xc>)
 8005df6:	4601      	mov	r1, r0
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	f000 b825 	b.w	8005e48 <_malloc_r>
 8005dfe:	bf00      	nop
 8005e00:	2000001c 	.word	0x2000001c

08005e04 <sbrk_aligned>:
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	4e0f      	ldr	r6, [pc, #60]	@ (8005e44 <sbrk_aligned+0x40>)
 8005e08:	460c      	mov	r4, r1
 8005e0a:	6831      	ldr	r1, [r6, #0]
 8005e0c:	4605      	mov	r5, r0
 8005e0e:	b911      	cbnz	r1, 8005e16 <sbrk_aligned+0x12>
 8005e10:	f000 fe46 	bl	8006aa0 <_sbrk_r>
 8005e14:	6030      	str	r0, [r6, #0]
 8005e16:	4621      	mov	r1, r4
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f000 fe41 	bl	8006aa0 <_sbrk_r>
 8005e1e:	1c43      	adds	r3, r0, #1
 8005e20:	d103      	bne.n	8005e2a <sbrk_aligned+0x26>
 8005e22:	f04f 34ff 	mov.w	r4, #4294967295
 8005e26:	4620      	mov	r0, r4
 8005e28:	bd70      	pop	{r4, r5, r6, pc}
 8005e2a:	1cc4      	adds	r4, r0, #3
 8005e2c:	f024 0403 	bic.w	r4, r4, #3
 8005e30:	42a0      	cmp	r0, r4
 8005e32:	d0f8      	beq.n	8005e26 <sbrk_aligned+0x22>
 8005e34:	1a21      	subs	r1, r4, r0
 8005e36:	4628      	mov	r0, r5
 8005e38:	f000 fe32 	bl	8006aa0 <_sbrk_r>
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d1f2      	bne.n	8005e26 <sbrk_aligned+0x22>
 8005e40:	e7ef      	b.n	8005e22 <sbrk_aligned+0x1e>
 8005e42:	bf00      	nop
 8005e44:	20000418 	.word	0x20000418

08005e48 <_malloc_r>:
 8005e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e4c:	1ccd      	adds	r5, r1, #3
 8005e4e:	f025 0503 	bic.w	r5, r5, #3
 8005e52:	3508      	adds	r5, #8
 8005e54:	2d0c      	cmp	r5, #12
 8005e56:	bf38      	it	cc
 8005e58:	250c      	movcc	r5, #12
 8005e5a:	2d00      	cmp	r5, #0
 8005e5c:	4606      	mov	r6, r0
 8005e5e:	db01      	blt.n	8005e64 <_malloc_r+0x1c>
 8005e60:	42a9      	cmp	r1, r5
 8005e62:	d904      	bls.n	8005e6e <_malloc_r+0x26>
 8005e64:	230c      	movs	r3, #12
 8005e66:	6033      	str	r3, [r6, #0]
 8005e68:	2000      	movs	r0, #0
 8005e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f44 <_malloc_r+0xfc>
 8005e72:	f000 f869 	bl	8005f48 <__malloc_lock>
 8005e76:	f8d8 3000 	ldr.w	r3, [r8]
 8005e7a:	461c      	mov	r4, r3
 8005e7c:	bb44      	cbnz	r4, 8005ed0 <_malloc_r+0x88>
 8005e7e:	4629      	mov	r1, r5
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7ff ffbf 	bl	8005e04 <sbrk_aligned>
 8005e86:	1c43      	adds	r3, r0, #1
 8005e88:	4604      	mov	r4, r0
 8005e8a:	d158      	bne.n	8005f3e <_malloc_r+0xf6>
 8005e8c:	f8d8 4000 	ldr.w	r4, [r8]
 8005e90:	4627      	mov	r7, r4
 8005e92:	2f00      	cmp	r7, #0
 8005e94:	d143      	bne.n	8005f1e <_malloc_r+0xd6>
 8005e96:	2c00      	cmp	r4, #0
 8005e98:	d04b      	beq.n	8005f32 <_malloc_r+0xea>
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	4639      	mov	r1, r7
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	eb04 0903 	add.w	r9, r4, r3
 8005ea4:	f000 fdfc 	bl	8006aa0 <_sbrk_r>
 8005ea8:	4581      	cmp	r9, r0
 8005eaa:	d142      	bne.n	8005f32 <_malloc_r+0xea>
 8005eac:	6821      	ldr	r1, [r4, #0]
 8005eae:	1a6d      	subs	r5, r5, r1
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f7ff ffa6 	bl	8005e04 <sbrk_aligned>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d03a      	beq.n	8005f32 <_malloc_r+0xea>
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	442b      	add	r3, r5
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	bb62      	cbnz	r2, 8005f24 <_malloc_r+0xdc>
 8005eca:	f8c8 7000 	str.w	r7, [r8]
 8005ece:	e00f      	b.n	8005ef0 <_malloc_r+0xa8>
 8005ed0:	6822      	ldr	r2, [r4, #0]
 8005ed2:	1b52      	subs	r2, r2, r5
 8005ed4:	d420      	bmi.n	8005f18 <_malloc_r+0xd0>
 8005ed6:	2a0b      	cmp	r2, #11
 8005ed8:	d917      	bls.n	8005f0a <_malloc_r+0xc2>
 8005eda:	1961      	adds	r1, r4, r5
 8005edc:	42a3      	cmp	r3, r4
 8005ede:	6025      	str	r5, [r4, #0]
 8005ee0:	bf18      	it	ne
 8005ee2:	6059      	strne	r1, [r3, #4]
 8005ee4:	6863      	ldr	r3, [r4, #4]
 8005ee6:	bf08      	it	eq
 8005ee8:	f8c8 1000 	streq.w	r1, [r8]
 8005eec:	5162      	str	r2, [r4, r5]
 8005eee:	604b      	str	r3, [r1, #4]
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f000 f82f 	bl	8005f54 <__malloc_unlock>
 8005ef6:	f104 000b 	add.w	r0, r4, #11
 8005efa:	1d23      	adds	r3, r4, #4
 8005efc:	f020 0007 	bic.w	r0, r0, #7
 8005f00:	1ac2      	subs	r2, r0, r3
 8005f02:	bf1c      	itt	ne
 8005f04:	1a1b      	subne	r3, r3, r0
 8005f06:	50a3      	strne	r3, [r4, r2]
 8005f08:	e7af      	b.n	8005e6a <_malloc_r+0x22>
 8005f0a:	6862      	ldr	r2, [r4, #4]
 8005f0c:	42a3      	cmp	r3, r4
 8005f0e:	bf0c      	ite	eq
 8005f10:	f8c8 2000 	streq.w	r2, [r8]
 8005f14:	605a      	strne	r2, [r3, #4]
 8005f16:	e7eb      	b.n	8005ef0 <_malloc_r+0xa8>
 8005f18:	4623      	mov	r3, r4
 8005f1a:	6864      	ldr	r4, [r4, #4]
 8005f1c:	e7ae      	b.n	8005e7c <_malloc_r+0x34>
 8005f1e:	463c      	mov	r4, r7
 8005f20:	687f      	ldr	r7, [r7, #4]
 8005f22:	e7b6      	b.n	8005e92 <_malloc_r+0x4a>
 8005f24:	461a      	mov	r2, r3
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	d1fb      	bne.n	8005f24 <_malloc_r+0xdc>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	6053      	str	r3, [r2, #4]
 8005f30:	e7de      	b.n	8005ef0 <_malloc_r+0xa8>
 8005f32:	230c      	movs	r3, #12
 8005f34:	6033      	str	r3, [r6, #0]
 8005f36:	4630      	mov	r0, r6
 8005f38:	f000 f80c 	bl	8005f54 <__malloc_unlock>
 8005f3c:	e794      	b.n	8005e68 <_malloc_r+0x20>
 8005f3e:	6005      	str	r5, [r0, #0]
 8005f40:	e7d6      	b.n	8005ef0 <_malloc_r+0xa8>
 8005f42:	bf00      	nop
 8005f44:	2000041c 	.word	0x2000041c

08005f48 <__malloc_lock>:
 8005f48:	4801      	ldr	r0, [pc, #4]	@ (8005f50 <__malloc_lock+0x8>)
 8005f4a:	f7ff b8b8 	b.w	80050be <__retarget_lock_acquire_recursive>
 8005f4e:	bf00      	nop
 8005f50:	20000414 	.word	0x20000414

08005f54 <__malloc_unlock>:
 8005f54:	4801      	ldr	r0, [pc, #4]	@ (8005f5c <__malloc_unlock+0x8>)
 8005f56:	f7ff b8b3 	b.w	80050c0 <__retarget_lock_release_recursive>
 8005f5a:	bf00      	nop
 8005f5c:	20000414 	.word	0x20000414

08005f60 <_Balloc>:
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	69c6      	ldr	r6, [r0, #28]
 8005f64:	4604      	mov	r4, r0
 8005f66:	460d      	mov	r5, r1
 8005f68:	b976      	cbnz	r6, 8005f88 <_Balloc+0x28>
 8005f6a:	2010      	movs	r0, #16
 8005f6c:	f7ff ff42 	bl	8005df4 <malloc>
 8005f70:	4602      	mov	r2, r0
 8005f72:	61e0      	str	r0, [r4, #28]
 8005f74:	b920      	cbnz	r0, 8005f80 <_Balloc+0x20>
 8005f76:	4b18      	ldr	r3, [pc, #96]	@ (8005fd8 <_Balloc+0x78>)
 8005f78:	4818      	ldr	r0, [pc, #96]	@ (8005fdc <_Balloc+0x7c>)
 8005f7a:	216b      	movs	r1, #107	@ 0x6b
 8005f7c:	f000 fdae 	bl	8006adc <__assert_func>
 8005f80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f84:	6006      	str	r6, [r0, #0]
 8005f86:	60c6      	str	r6, [r0, #12]
 8005f88:	69e6      	ldr	r6, [r4, #28]
 8005f8a:	68f3      	ldr	r3, [r6, #12]
 8005f8c:	b183      	cbz	r3, 8005fb0 <_Balloc+0x50>
 8005f8e:	69e3      	ldr	r3, [r4, #28]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f96:	b9b8      	cbnz	r0, 8005fc8 <_Balloc+0x68>
 8005f98:	2101      	movs	r1, #1
 8005f9a:	fa01 f605 	lsl.w	r6, r1, r5
 8005f9e:	1d72      	adds	r2, r6, #5
 8005fa0:	0092      	lsls	r2, r2, #2
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 fdb8 	bl	8006b18 <_calloc_r>
 8005fa8:	b160      	cbz	r0, 8005fc4 <_Balloc+0x64>
 8005faa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005fae:	e00e      	b.n	8005fce <_Balloc+0x6e>
 8005fb0:	2221      	movs	r2, #33	@ 0x21
 8005fb2:	2104      	movs	r1, #4
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f000 fdaf 	bl	8006b18 <_calloc_r>
 8005fba:	69e3      	ldr	r3, [r4, #28]
 8005fbc:	60f0      	str	r0, [r6, #12]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e4      	bne.n	8005f8e <_Balloc+0x2e>
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	bd70      	pop	{r4, r5, r6, pc}
 8005fc8:	6802      	ldr	r2, [r0, #0]
 8005fca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fd4:	e7f7      	b.n	8005fc6 <_Balloc+0x66>
 8005fd6:	bf00      	nop
 8005fd8:	08007209 	.word	0x08007209
 8005fdc:	08007289 	.word	0x08007289

08005fe0 <_Bfree>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	69c6      	ldr	r6, [r0, #28]
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	b976      	cbnz	r6, 8006008 <_Bfree+0x28>
 8005fea:	2010      	movs	r0, #16
 8005fec:	f7ff ff02 	bl	8005df4 <malloc>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	61e8      	str	r0, [r5, #28]
 8005ff4:	b920      	cbnz	r0, 8006000 <_Bfree+0x20>
 8005ff6:	4b09      	ldr	r3, [pc, #36]	@ (800601c <_Bfree+0x3c>)
 8005ff8:	4809      	ldr	r0, [pc, #36]	@ (8006020 <_Bfree+0x40>)
 8005ffa:	218f      	movs	r1, #143	@ 0x8f
 8005ffc:	f000 fd6e 	bl	8006adc <__assert_func>
 8006000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006004:	6006      	str	r6, [r0, #0]
 8006006:	60c6      	str	r6, [r0, #12]
 8006008:	b13c      	cbz	r4, 800601a <_Bfree+0x3a>
 800600a:	69eb      	ldr	r3, [r5, #28]
 800600c:	6862      	ldr	r2, [r4, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006014:	6021      	str	r1, [r4, #0]
 8006016:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800601a:	bd70      	pop	{r4, r5, r6, pc}
 800601c:	08007209 	.word	0x08007209
 8006020:	08007289 	.word	0x08007289

08006024 <__multadd>:
 8006024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006028:	690d      	ldr	r5, [r1, #16]
 800602a:	4607      	mov	r7, r0
 800602c:	460c      	mov	r4, r1
 800602e:	461e      	mov	r6, r3
 8006030:	f101 0c14 	add.w	ip, r1, #20
 8006034:	2000      	movs	r0, #0
 8006036:	f8dc 3000 	ldr.w	r3, [ip]
 800603a:	b299      	uxth	r1, r3
 800603c:	fb02 6101 	mla	r1, r2, r1, r6
 8006040:	0c1e      	lsrs	r6, r3, #16
 8006042:	0c0b      	lsrs	r3, r1, #16
 8006044:	fb02 3306 	mla	r3, r2, r6, r3
 8006048:	b289      	uxth	r1, r1
 800604a:	3001      	adds	r0, #1
 800604c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006050:	4285      	cmp	r5, r0
 8006052:	f84c 1b04 	str.w	r1, [ip], #4
 8006056:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800605a:	dcec      	bgt.n	8006036 <__multadd+0x12>
 800605c:	b30e      	cbz	r6, 80060a2 <__multadd+0x7e>
 800605e:	68a3      	ldr	r3, [r4, #8]
 8006060:	42ab      	cmp	r3, r5
 8006062:	dc19      	bgt.n	8006098 <__multadd+0x74>
 8006064:	6861      	ldr	r1, [r4, #4]
 8006066:	4638      	mov	r0, r7
 8006068:	3101      	adds	r1, #1
 800606a:	f7ff ff79 	bl	8005f60 <_Balloc>
 800606e:	4680      	mov	r8, r0
 8006070:	b928      	cbnz	r0, 800607e <__multadd+0x5a>
 8006072:	4602      	mov	r2, r0
 8006074:	4b0c      	ldr	r3, [pc, #48]	@ (80060a8 <__multadd+0x84>)
 8006076:	480d      	ldr	r0, [pc, #52]	@ (80060ac <__multadd+0x88>)
 8006078:	21ba      	movs	r1, #186	@ 0xba
 800607a:	f000 fd2f 	bl	8006adc <__assert_func>
 800607e:	6922      	ldr	r2, [r4, #16]
 8006080:	3202      	adds	r2, #2
 8006082:	f104 010c 	add.w	r1, r4, #12
 8006086:	0092      	lsls	r2, r2, #2
 8006088:	300c      	adds	r0, #12
 800608a:	f000 fd19 	bl	8006ac0 <memcpy>
 800608e:	4621      	mov	r1, r4
 8006090:	4638      	mov	r0, r7
 8006092:	f7ff ffa5 	bl	8005fe0 <_Bfree>
 8006096:	4644      	mov	r4, r8
 8006098:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800609c:	3501      	adds	r5, #1
 800609e:	615e      	str	r6, [r3, #20]
 80060a0:	6125      	str	r5, [r4, #16]
 80060a2:	4620      	mov	r0, r4
 80060a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a8:	08007278 	.word	0x08007278
 80060ac:	08007289 	.word	0x08007289

080060b0 <__hi0bits>:
 80060b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80060b4:	4603      	mov	r3, r0
 80060b6:	bf36      	itet	cc
 80060b8:	0403      	lslcc	r3, r0, #16
 80060ba:	2000      	movcs	r0, #0
 80060bc:	2010      	movcc	r0, #16
 80060be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060c2:	bf3c      	itt	cc
 80060c4:	021b      	lslcc	r3, r3, #8
 80060c6:	3008      	addcc	r0, #8
 80060c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060cc:	bf3c      	itt	cc
 80060ce:	011b      	lslcc	r3, r3, #4
 80060d0:	3004      	addcc	r0, #4
 80060d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060d6:	bf3c      	itt	cc
 80060d8:	009b      	lslcc	r3, r3, #2
 80060da:	3002      	addcc	r0, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	db05      	blt.n	80060ec <__hi0bits+0x3c>
 80060e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80060e4:	f100 0001 	add.w	r0, r0, #1
 80060e8:	bf08      	it	eq
 80060ea:	2020      	moveq	r0, #32
 80060ec:	4770      	bx	lr

080060ee <__lo0bits>:
 80060ee:	6803      	ldr	r3, [r0, #0]
 80060f0:	4602      	mov	r2, r0
 80060f2:	f013 0007 	ands.w	r0, r3, #7
 80060f6:	d00b      	beq.n	8006110 <__lo0bits+0x22>
 80060f8:	07d9      	lsls	r1, r3, #31
 80060fa:	d421      	bmi.n	8006140 <__lo0bits+0x52>
 80060fc:	0798      	lsls	r0, r3, #30
 80060fe:	bf49      	itett	mi
 8006100:	085b      	lsrmi	r3, r3, #1
 8006102:	089b      	lsrpl	r3, r3, #2
 8006104:	2001      	movmi	r0, #1
 8006106:	6013      	strmi	r3, [r2, #0]
 8006108:	bf5c      	itt	pl
 800610a:	6013      	strpl	r3, [r2, #0]
 800610c:	2002      	movpl	r0, #2
 800610e:	4770      	bx	lr
 8006110:	b299      	uxth	r1, r3
 8006112:	b909      	cbnz	r1, 8006118 <__lo0bits+0x2a>
 8006114:	0c1b      	lsrs	r3, r3, #16
 8006116:	2010      	movs	r0, #16
 8006118:	b2d9      	uxtb	r1, r3
 800611a:	b909      	cbnz	r1, 8006120 <__lo0bits+0x32>
 800611c:	3008      	adds	r0, #8
 800611e:	0a1b      	lsrs	r3, r3, #8
 8006120:	0719      	lsls	r1, r3, #28
 8006122:	bf04      	itt	eq
 8006124:	091b      	lsreq	r3, r3, #4
 8006126:	3004      	addeq	r0, #4
 8006128:	0799      	lsls	r1, r3, #30
 800612a:	bf04      	itt	eq
 800612c:	089b      	lsreq	r3, r3, #2
 800612e:	3002      	addeq	r0, #2
 8006130:	07d9      	lsls	r1, r3, #31
 8006132:	d403      	bmi.n	800613c <__lo0bits+0x4e>
 8006134:	085b      	lsrs	r3, r3, #1
 8006136:	f100 0001 	add.w	r0, r0, #1
 800613a:	d003      	beq.n	8006144 <__lo0bits+0x56>
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	4770      	bx	lr
 8006140:	2000      	movs	r0, #0
 8006142:	4770      	bx	lr
 8006144:	2020      	movs	r0, #32
 8006146:	4770      	bx	lr

08006148 <__i2b>:
 8006148:	b510      	push	{r4, lr}
 800614a:	460c      	mov	r4, r1
 800614c:	2101      	movs	r1, #1
 800614e:	f7ff ff07 	bl	8005f60 <_Balloc>
 8006152:	4602      	mov	r2, r0
 8006154:	b928      	cbnz	r0, 8006162 <__i2b+0x1a>
 8006156:	4b05      	ldr	r3, [pc, #20]	@ (800616c <__i2b+0x24>)
 8006158:	4805      	ldr	r0, [pc, #20]	@ (8006170 <__i2b+0x28>)
 800615a:	f240 1145 	movw	r1, #325	@ 0x145
 800615e:	f000 fcbd 	bl	8006adc <__assert_func>
 8006162:	2301      	movs	r3, #1
 8006164:	6144      	str	r4, [r0, #20]
 8006166:	6103      	str	r3, [r0, #16]
 8006168:	bd10      	pop	{r4, pc}
 800616a:	bf00      	nop
 800616c:	08007278 	.word	0x08007278
 8006170:	08007289 	.word	0x08007289

08006174 <__multiply>:
 8006174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006178:	4614      	mov	r4, r2
 800617a:	690a      	ldr	r2, [r1, #16]
 800617c:	6923      	ldr	r3, [r4, #16]
 800617e:	429a      	cmp	r2, r3
 8006180:	bfa8      	it	ge
 8006182:	4623      	movge	r3, r4
 8006184:	460f      	mov	r7, r1
 8006186:	bfa4      	itt	ge
 8006188:	460c      	movge	r4, r1
 800618a:	461f      	movge	r7, r3
 800618c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006190:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006194:	68a3      	ldr	r3, [r4, #8]
 8006196:	6861      	ldr	r1, [r4, #4]
 8006198:	eb0a 0609 	add.w	r6, sl, r9
 800619c:	42b3      	cmp	r3, r6
 800619e:	b085      	sub	sp, #20
 80061a0:	bfb8      	it	lt
 80061a2:	3101      	addlt	r1, #1
 80061a4:	f7ff fedc 	bl	8005f60 <_Balloc>
 80061a8:	b930      	cbnz	r0, 80061b8 <__multiply+0x44>
 80061aa:	4602      	mov	r2, r0
 80061ac:	4b44      	ldr	r3, [pc, #272]	@ (80062c0 <__multiply+0x14c>)
 80061ae:	4845      	ldr	r0, [pc, #276]	@ (80062c4 <__multiply+0x150>)
 80061b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80061b4:	f000 fc92 	bl	8006adc <__assert_func>
 80061b8:	f100 0514 	add.w	r5, r0, #20
 80061bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80061c0:	462b      	mov	r3, r5
 80061c2:	2200      	movs	r2, #0
 80061c4:	4543      	cmp	r3, r8
 80061c6:	d321      	bcc.n	800620c <__multiply+0x98>
 80061c8:	f107 0114 	add.w	r1, r7, #20
 80061cc:	f104 0214 	add.w	r2, r4, #20
 80061d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80061d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80061d8:	9302      	str	r3, [sp, #8]
 80061da:	1b13      	subs	r3, r2, r4
 80061dc:	3b15      	subs	r3, #21
 80061de:	f023 0303 	bic.w	r3, r3, #3
 80061e2:	3304      	adds	r3, #4
 80061e4:	f104 0715 	add.w	r7, r4, #21
 80061e8:	42ba      	cmp	r2, r7
 80061ea:	bf38      	it	cc
 80061ec:	2304      	movcc	r3, #4
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	9b02      	ldr	r3, [sp, #8]
 80061f2:	9103      	str	r1, [sp, #12]
 80061f4:	428b      	cmp	r3, r1
 80061f6:	d80c      	bhi.n	8006212 <__multiply+0x9e>
 80061f8:	2e00      	cmp	r6, #0
 80061fa:	dd03      	ble.n	8006204 <__multiply+0x90>
 80061fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006200:	2b00      	cmp	r3, #0
 8006202:	d05b      	beq.n	80062bc <__multiply+0x148>
 8006204:	6106      	str	r6, [r0, #16]
 8006206:	b005      	add	sp, #20
 8006208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620c:	f843 2b04 	str.w	r2, [r3], #4
 8006210:	e7d8      	b.n	80061c4 <__multiply+0x50>
 8006212:	f8b1 a000 	ldrh.w	sl, [r1]
 8006216:	f1ba 0f00 	cmp.w	sl, #0
 800621a:	d024      	beq.n	8006266 <__multiply+0xf2>
 800621c:	f104 0e14 	add.w	lr, r4, #20
 8006220:	46a9      	mov	r9, r5
 8006222:	f04f 0c00 	mov.w	ip, #0
 8006226:	f85e 7b04 	ldr.w	r7, [lr], #4
 800622a:	f8d9 3000 	ldr.w	r3, [r9]
 800622e:	fa1f fb87 	uxth.w	fp, r7
 8006232:	b29b      	uxth	r3, r3
 8006234:	fb0a 330b 	mla	r3, sl, fp, r3
 8006238:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800623c:	f8d9 7000 	ldr.w	r7, [r9]
 8006240:	4463      	add	r3, ip
 8006242:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006246:	fb0a c70b 	mla	r7, sl, fp, ip
 800624a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800624e:	b29b      	uxth	r3, r3
 8006250:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006254:	4572      	cmp	r2, lr
 8006256:	f849 3b04 	str.w	r3, [r9], #4
 800625a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800625e:	d8e2      	bhi.n	8006226 <__multiply+0xb2>
 8006260:	9b01      	ldr	r3, [sp, #4]
 8006262:	f845 c003 	str.w	ip, [r5, r3]
 8006266:	9b03      	ldr	r3, [sp, #12]
 8006268:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800626c:	3104      	adds	r1, #4
 800626e:	f1b9 0f00 	cmp.w	r9, #0
 8006272:	d021      	beq.n	80062b8 <__multiply+0x144>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	f104 0c14 	add.w	ip, r4, #20
 800627a:	46ae      	mov	lr, r5
 800627c:	f04f 0a00 	mov.w	sl, #0
 8006280:	f8bc b000 	ldrh.w	fp, [ip]
 8006284:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006288:	fb09 770b 	mla	r7, r9, fp, r7
 800628c:	4457      	add	r7, sl
 800628e:	b29b      	uxth	r3, r3
 8006290:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006294:	f84e 3b04 	str.w	r3, [lr], #4
 8006298:	f85c 3b04 	ldr.w	r3, [ip], #4
 800629c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062a0:	f8be 3000 	ldrh.w	r3, [lr]
 80062a4:	fb09 330a 	mla	r3, r9, sl, r3
 80062a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80062ac:	4562      	cmp	r2, ip
 80062ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062b2:	d8e5      	bhi.n	8006280 <__multiply+0x10c>
 80062b4:	9f01      	ldr	r7, [sp, #4]
 80062b6:	51eb      	str	r3, [r5, r7]
 80062b8:	3504      	adds	r5, #4
 80062ba:	e799      	b.n	80061f0 <__multiply+0x7c>
 80062bc:	3e01      	subs	r6, #1
 80062be:	e79b      	b.n	80061f8 <__multiply+0x84>
 80062c0:	08007278 	.word	0x08007278
 80062c4:	08007289 	.word	0x08007289

080062c8 <__pow5mult>:
 80062c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062cc:	4615      	mov	r5, r2
 80062ce:	f012 0203 	ands.w	r2, r2, #3
 80062d2:	4607      	mov	r7, r0
 80062d4:	460e      	mov	r6, r1
 80062d6:	d007      	beq.n	80062e8 <__pow5mult+0x20>
 80062d8:	4c25      	ldr	r4, [pc, #148]	@ (8006370 <__pow5mult+0xa8>)
 80062da:	3a01      	subs	r2, #1
 80062dc:	2300      	movs	r3, #0
 80062de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062e2:	f7ff fe9f 	bl	8006024 <__multadd>
 80062e6:	4606      	mov	r6, r0
 80062e8:	10ad      	asrs	r5, r5, #2
 80062ea:	d03d      	beq.n	8006368 <__pow5mult+0xa0>
 80062ec:	69fc      	ldr	r4, [r7, #28]
 80062ee:	b97c      	cbnz	r4, 8006310 <__pow5mult+0x48>
 80062f0:	2010      	movs	r0, #16
 80062f2:	f7ff fd7f 	bl	8005df4 <malloc>
 80062f6:	4602      	mov	r2, r0
 80062f8:	61f8      	str	r0, [r7, #28]
 80062fa:	b928      	cbnz	r0, 8006308 <__pow5mult+0x40>
 80062fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006374 <__pow5mult+0xac>)
 80062fe:	481e      	ldr	r0, [pc, #120]	@ (8006378 <__pow5mult+0xb0>)
 8006300:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006304:	f000 fbea 	bl	8006adc <__assert_func>
 8006308:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800630c:	6004      	str	r4, [r0, #0]
 800630e:	60c4      	str	r4, [r0, #12]
 8006310:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006314:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006318:	b94c      	cbnz	r4, 800632e <__pow5mult+0x66>
 800631a:	f240 2171 	movw	r1, #625	@ 0x271
 800631e:	4638      	mov	r0, r7
 8006320:	f7ff ff12 	bl	8006148 <__i2b>
 8006324:	2300      	movs	r3, #0
 8006326:	f8c8 0008 	str.w	r0, [r8, #8]
 800632a:	4604      	mov	r4, r0
 800632c:	6003      	str	r3, [r0, #0]
 800632e:	f04f 0900 	mov.w	r9, #0
 8006332:	07eb      	lsls	r3, r5, #31
 8006334:	d50a      	bpl.n	800634c <__pow5mult+0x84>
 8006336:	4631      	mov	r1, r6
 8006338:	4622      	mov	r2, r4
 800633a:	4638      	mov	r0, r7
 800633c:	f7ff ff1a 	bl	8006174 <__multiply>
 8006340:	4631      	mov	r1, r6
 8006342:	4680      	mov	r8, r0
 8006344:	4638      	mov	r0, r7
 8006346:	f7ff fe4b 	bl	8005fe0 <_Bfree>
 800634a:	4646      	mov	r6, r8
 800634c:	106d      	asrs	r5, r5, #1
 800634e:	d00b      	beq.n	8006368 <__pow5mult+0xa0>
 8006350:	6820      	ldr	r0, [r4, #0]
 8006352:	b938      	cbnz	r0, 8006364 <__pow5mult+0x9c>
 8006354:	4622      	mov	r2, r4
 8006356:	4621      	mov	r1, r4
 8006358:	4638      	mov	r0, r7
 800635a:	f7ff ff0b 	bl	8006174 <__multiply>
 800635e:	6020      	str	r0, [r4, #0]
 8006360:	f8c0 9000 	str.w	r9, [r0]
 8006364:	4604      	mov	r4, r0
 8006366:	e7e4      	b.n	8006332 <__pow5mult+0x6a>
 8006368:	4630      	mov	r0, r6
 800636a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800636e:	bf00      	nop
 8006370:	080072e4 	.word	0x080072e4
 8006374:	08007209 	.word	0x08007209
 8006378:	08007289 	.word	0x08007289

0800637c <__lshift>:
 800637c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006380:	460c      	mov	r4, r1
 8006382:	6849      	ldr	r1, [r1, #4]
 8006384:	6923      	ldr	r3, [r4, #16]
 8006386:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800638a:	68a3      	ldr	r3, [r4, #8]
 800638c:	4607      	mov	r7, r0
 800638e:	4691      	mov	r9, r2
 8006390:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006394:	f108 0601 	add.w	r6, r8, #1
 8006398:	42b3      	cmp	r3, r6
 800639a:	db0b      	blt.n	80063b4 <__lshift+0x38>
 800639c:	4638      	mov	r0, r7
 800639e:	f7ff fddf 	bl	8005f60 <_Balloc>
 80063a2:	4605      	mov	r5, r0
 80063a4:	b948      	cbnz	r0, 80063ba <__lshift+0x3e>
 80063a6:	4602      	mov	r2, r0
 80063a8:	4b28      	ldr	r3, [pc, #160]	@ (800644c <__lshift+0xd0>)
 80063aa:	4829      	ldr	r0, [pc, #164]	@ (8006450 <__lshift+0xd4>)
 80063ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80063b0:	f000 fb94 	bl	8006adc <__assert_func>
 80063b4:	3101      	adds	r1, #1
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	e7ee      	b.n	8006398 <__lshift+0x1c>
 80063ba:	2300      	movs	r3, #0
 80063bc:	f100 0114 	add.w	r1, r0, #20
 80063c0:	f100 0210 	add.w	r2, r0, #16
 80063c4:	4618      	mov	r0, r3
 80063c6:	4553      	cmp	r3, sl
 80063c8:	db33      	blt.n	8006432 <__lshift+0xb6>
 80063ca:	6920      	ldr	r0, [r4, #16]
 80063cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063d0:	f104 0314 	add.w	r3, r4, #20
 80063d4:	f019 091f 	ands.w	r9, r9, #31
 80063d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063e0:	d02b      	beq.n	800643a <__lshift+0xbe>
 80063e2:	f1c9 0e20 	rsb	lr, r9, #32
 80063e6:	468a      	mov	sl, r1
 80063e8:	2200      	movs	r2, #0
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	fa00 f009 	lsl.w	r0, r0, r9
 80063f0:	4310      	orrs	r0, r2
 80063f2:	f84a 0b04 	str.w	r0, [sl], #4
 80063f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80063fa:	459c      	cmp	ip, r3
 80063fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8006400:	d8f3      	bhi.n	80063ea <__lshift+0x6e>
 8006402:	ebac 0304 	sub.w	r3, ip, r4
 8006406:	3b15      	subs	r3, #21
 8006408:	f023 0303 	bic.w	r3, r3, #3
 800640c:	3304      	adds	r3, #4
 800640e:	f104 0015 	add.w	r0, r4, #21
 8006412:	4584      	cmp	ip, r0
 8006414:	bf38      	it	cc
 8006416:	2304      	movcc	r3, #4
 8006418:	50ca      	str	r2, [r1, r3]
 800641a:	b10a      	cbz	r2, 8006420 <__lshift+0xa4>
 800641c:	f108 0602 	add.w	r6, r8, #2
 8006420:	3e01      	subs	r6, #1
 8006422:	4638      	mov	r0, r7
 8006424:	612e      	str	r6, [r5, #16]
 8006426:	4621      	mov	r1, r4
 8006428:	f7ff fdda 	bl	8005fe0 <_Bfree>
 800642c:	4628      	mov	r0, r5
 800642e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006432:	f842 0f04 	str.w	r0, [r2, #4]!
 8006436:	3301      	adds	r3, #1
 8006438:	e7c5      	b.n	80063c6 <__lshift+0x4a>
 800643a:	3904      	subs	r1, #4
 800643c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006440:	f841 2f04 	str.w	r2, [r1, #4]!
 8006444:	459c      	cmp	ip, r3
 8006446:	d8f9      	bhi.n	800643c <__lshift+0xc0>
 8006448:	e7ea      	b.n	8006420 <__lshift+0xa4>
 800644a:	bf00      	nop
 800644c:	08007278 	.word	0x08007278
 8006450:	08007289 	.word	0x08007289

08006454 <__mcmp>:
 8006454:	690a      	ldr	r2, [r1, #16]
 8006456:	4603      	mov	r3, r0
 8006458:	6900      	ldr	r0, [r0, #16]
 800645a:	1a80      	subs	r0, r0, r2
 800645c:	b530      	push	{r4, r5, lr}
 800645e:	d10e      	bne.n	800647e <__mcmp+0x2a>
 8006460:	3314      	adds	r3, #20
 8006462:	3114      	adds	r1, #20
 8006464:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006468:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800646c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006470:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006474:	4295      	cmp	r5, r2
 8006476:	d003      	beq.n	8006480 <__mcmp+0x2c>
 8006478:	d205      	bcs.n	8006486 <__mcmp+0x32>
 800647a:	f04f 30ff 	mov.w	r0, #4294967295
 800647e:	bd30      	pop	{r4, r5, pc}
 8006480:	42a3      	cmp	r3, r4
 8006482:	d3f3      	bcc.n	800646c <__mcmp+0x18>
 8006484:	e7fb      	b.n	800647e <__mcmp+0x2a>
 8006486:	2001      	movs	r0, #1
 8006488:	e7f9      	b.n	800647e <__mcmp+0x2a>
	...

0800648c <__mdiff>:
 800648c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006490:	4689      	mov	r9, r1
 8006492:	4606      	mov	r6, r0
 8006494:	4611      	mov	r1, r2
 8006496:	4648      	mov	r0, r9
 8006498:	4614      	mov	r4, r2
 800649a:	f7ff ffdb 	bl	8006454 <__mcmp>
 800649e:	1e05      	subs	r5, r0, #0
 80064a0:	d112      	bne.n	80064c8 <__mdiff+0x3c>
 80064a2:	4629      	mov	r1, r5
 80064a4:	4630      	mov	r0, r6
 80064a6:	f7ff fd5b 	bl	8005f60 <_Balloc>
 80064aa:	4602      	mov	r2, r0
 80064ac:	b928      	cbnz	r0, 80064ba <__mdiff+0x2e>
 80064ae:	4b3f      	ldr	r3, [pc, #252]	@ (80065ac <__mdiff+0x120>)
 80064b0:	f240 2137 	movw	r1, #567	@ 0x237
 80064b4:	483e      	ldr	r0, [pc, #248]	@ (80065b0 <__mdiff+0x124>)
 80064b6:	f000 fb11 	bl	8006adc <__assert_func>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80064c0:	4610      	mov	r0, r2
 80064c2:	b003      	add	sp, #12
 80064c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c8:	bfbc      	itt	lt
 80064ca:	464b      	movlt	r3, r9
 80064cc:	46a1      	movlt	r9, r4
 80064ce:	4630      	mov	r0, r6
 80064d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80064d4:	bfba      	itte	lt
 80064d6:	461c      	movlt	r4, r3
 80064d8:	2501      	movlt	r5, #1
 80064da:	2500      	movge	r5, #0
 80064dc:	f7ff fd40 	bl	8005f60 <_Balloc>
 80064e0:	4602      	mov	r2, r0
 80064e2:	b918      	cbnz	r0, 80064ec <__mdiff+0x60>
 80064e4:	4b31      	ldr	r3, [pc, #196]	@ (80065ac <__mdiff+0x120>)
 80064e6:	f240 2145 	movw	r1, #581	@ 0x245
 80064ea:	e7e3      	b.n	80064b4 <__mdiff+0x28>
 80064ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80064f0:	6926      	ldr	r6, [r4, #16]
 80064f2:	60c5      	str	r5, [r0, #12]
 80064f4:	f109 0310 	add.w	r3, r9, #16
 80064f8:	f109 0514 	add.w	r5, r9, #20
 80064fc:	f104 0e14 	add.w	lr, r4, #20
 8006500:	f100 0b14 	add.w	fp, r0, #20
 8006504:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006508:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	46d9      	mov	r9, fp
 8006510:	f04f 0c00 	mov.w	ip, #0
 8006514:	9b01      	ldr	r3, [sp, #4]
 8006516:	f85e 0b04 	ldr.w	r0, [lr], #4
 800651a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	fa1f f38a 	uxth.w	r3, sl
 8006524:	4619      	mov	r1, r3
 8006526:	b283      	uxth	r3, r0
 8006528:	1acb      	subs	r3, r1, r3
 800652a:	0c00      	lsrs	r0, r0, #16
 800652c:	4463      	add	r3, ip
 800652e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006532:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006536:	b29b      	uxth	r3, r3
 8006538:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800653c:	4576      	cmp	r6, lr
 800653e:	f849 3b04 	str.w	r3, [r9], #4
 8006542:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006546:	d8e5      	bhi.n	8006514 <__mdiff+0x88>
 8006548:	1b33      	subs	r3, r6, r4
 800654a:	3b15      	subs	r3, #21
 800654c:	f023 0303 	bic.w	r3, r3, #3
 8006550:	3415      	adds	r4, #21
 8006552:	3304      	adds	r3, #4
 8006554:	42a6      	cmp	r6, r4
 8006556:	bf38      	it	cc
 8006558:	2304      	movcc	r3, #4
 800655a:	441d      	add	r5, r3
 800655c:	445b      	add	r3, fp
 800655e:	461e      	mov	r6, r3
 8006560:	462c      	mov	r4, r5
 8006562:	4544      	cmp	r4, r8
 8006564:	d30e      	bcc.n	8006584 <__mdiff+0xf8>
 8006566:	f108 0103 	add.w	r1, r8, #3
 800656a:	1b49      	subs	r1, r1, r5
 800656c:	f021 0103 	bic.w	r1, r1, #3
 8006570:	3d03      	subs	r5, #3
 8006572:	45a8      	cmp	r8, r5
 8006574:	bf38      	it	cc
 8006576:	2100      	movcc	r1, #0
 8006578:	440b      	add	r3, r1
 800657a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800657e:	b191      	cbz	r1, 80065a6 <__mdiff+0x11a>
 8006580:	6117      	str	r7, [r2, #16]
 8006582:	e79d      	b.n	80064c0 <__mdiff+0x34>
 8006584:	f854 1b04 	ldr.w	r1, [r4], #4
 8006588:	46e6      	mov	lr, ip
 800658a:	0c08      	lsrs	r0, r1, #16
 800658c:	fa1c fc81 	uxtah	ip, ip, r1
 8006590:	4471      	add	r1, lr
 8006592:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006596:	b289      	uxth	r1, r1
 8006598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800659c:	f846 1b04 	str.w	r1, [r6], #4
 80065a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80065a4:	e7dd      	b.n	8006562 <__mdiff+0xd6>
 80065a6:	3f01      	subs	r7, #1
 80065a8:	e7e7      	b.n	800657a <__mdiff+0xee>
 80065aa:	bf00      	nop
 80065ac:	08007278 	.word	0x08007278
 80065b0:	08007289 	.word	0x08007289

080065b4 <__d2b>:
 80065b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065b8:	460f      	mov	r7, r1
 80065ba:	2101      	movs	r1, #1
 80065bc:	ec59 8b10 	vmov	r8, r9, d0
 80065c0:	4616      	mov	r6, r2
 80065c2:	f7ff fccd 	bl	8005f60 <_Balloc>
 80065c6:	4604      	mov	r4, r0
 80065c8:	b930      	cbnz	r0, 80065d8 <__d2b+0x24>
 80065ca:	4602      	mov	r2, r0
 80065cc:	4b23      	ldr	r3, [pc, #140]	@ (800665c <__d2b+0xa8>)
 80065ce:	4824      	ldr	r0, [pc, #144]	@ (8006660 <__d2b+0xac>)
 80065d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80065d4:	f000 fa82 	bl	8006adc <__assert_func>
 80065d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80065dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065e0:	b10d      	cbz	r5, 80065e6 <__d2b+0x32>
 80065e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	f1b8 0300 	subs.w	r3, r8, #0
 80065ec:	d023      	beq.n	8006636 <__d2b+0x82>
 80065ee:	4668      	mov	r0, sp
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	f7ff fd7c 	bl	80060ee <__lo0bits>
 80065f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80065fa:	b1d0      	cbz	r0, 8006632 <__d2b+0x7e>
 80065fc:	f1c0 0320 	rsb	r3, r0, #32
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	430b      	orrs	r3, r1
 8006606:	40c2      	lsrs	r2, r0
 8006608:	6163      	str	r3, [r4, #20]
 800660a:	9201      	str	r2, [sp, #4]
 800660c:	9b01      	ldr	r3, [sp, #4]
 800660e:	61a3      	str	r3, [r4, #24]
 8006610:	2b00      	cmp	r3, #0
 8006612:	bf0c      	ite	eq
 8006614:	2201      	moveq	r2, #1
 8006616:	2202      	movne	r2, #2
 8006618:	6122      	str	r2, [r4, #16]
 800661a:	b1a5      	cbz	r5, 8006646 <__d2b+0x92>
 800661c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006620:	4405      	add	r5, r0
 8006622:	603d      	str	r5, [r7, #0]
 8006624:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006628:	6030      	str	r0, [r6, #0]
 800662a:	4620      	mov	r0, r4
 800662c:	b003      	add	sp, #12
 800662e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006632:	6161      	str	r1, [r4, #20]
 8006634:	e7ea      	b.n	800660c <__d2b+0x58>
 8006636:	a801      	add	r0, sp, #4
 8006638:	f7ff fd59 	bl	80060ee <__lo0bits>
 800663c:	9b01      	ldr	r3, [sp, #4]
 800663e:	6163      	str	r3, [r4, #20]
 8006640:	3020      	adds	r0, #32
 8006642:	2201      	movs	r2, #1
 8006644:	e7e8      	b.n	8006618 <__d2b+0x64>
 8006646:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800664a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800664e:	6038      	str	r0, [r7, #0]
 8006650:	6918      	ldr	r0, [r3, #16]
 8006652:	f7ff fd2d 	bl	80060b0 <__hi0bits>
 8006656:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800665a:	e7e5      	b.n	8006628 <__d2b+0x74>
 800665c:	08007278 	.word	0x08007278
 8006660:	08007289 	.word	0x08007289

08006664 <__ssputs_r>:
 8006664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006668:	688e      	ldr	r6, [r1, #8]
 800666a:	461f      	mov	r7, r3
 800666c:	42be      	cmp	r6, r7
 800666e:	680b      	ldr	r3, [r1, #0]
 8006670:	4682      	mov	sl, r0
 8006672:	460c      	mov	r4, r1
 8006674:	4690      	mov	r8, r2
 8006676:	d82d      	bhi.n	80066d4 <__ssputs_r+0x70>
 8006678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800667c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006680:	d026      	beq.n	80066d0 <__ssputs_r+0x6c>
 8006682:	6965      	ldr	r5, [r4, #20]
 8006684:	6909      	ldr	r1, [r1, #16]
 8006686:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800668a:	eba3 0901 	sub.w	r9, r3, r1
 800668e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006692:	1c7b      	adds	r3, r7, #1
 8006694:	444b      	add	r3, r9
 8006696:	106d      	asrs	r5, r5, #1
 8006698:	429d      	cmp	r5, r3
 800669a:	bf38      	it	cc
 800669c:	461d      	movcc	r5, r3
 800669e:	0553      	lsls	r3, r2, #21
 80066a0:	d527      	bpl.n	80066f2 <__ssputs_r+0x8e>
 80066a2:	4629      	mov	r1, r5
 80066a4:	f7ff fbd0 	bl	8005e48 <_malloc_r>
 80066a8:	4606      	mov	r6, r0
 80066aa:	b360      	cbz	r0, 8006706 <__ssputs_r+0xa2>
 80066ac:	6921      	ldr	r1, [r4, #16]
 80066ae:	464a      	mov	r2, r9
 80066b0:	f000 fa06 	bl	8006ac0 <memcpy>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80066ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066be:	81a3      	strh	r3, [r4, #12]
 80066c0:	6126      	str	r6, [r4, #16]
 80066c2:	6165      	str	r5, [r4, #20]
 80066c4:	444e      	add	r6, r9
 80066c6:	eba5 0509 	sub.w	r5, r5, r9
 80066ca:	6026      	str	r6, [r4, #0]
 80066cc:	60a5      	str	r5, [r4, #8]
 80066ce:	463e      	mov	r6, r7
 80066d0:	42be      	cmp	r6, r7
 80066d2:	d900      	bls.n	80066d6 <__ssputs_r+0x72>
 80066d4:	463e      	mov	r6, r7
 80066d6:	6820      	ldr	r0, [r4, #0]
 80066d8:	4632      	mov	r2, r6
 80066da:	4641      	mov	r1, r8
 80066dc:	f000 f9c6 	bl	8006a6c <memmove>
 80066e0:	68a3      	ldr	r3, [r4, #8]
 80066e2:	1b9b      	subs	r3, r3, r6
 80066e4:	60a3      	str	r3, [r4, #8]
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	4433      	add	r3, r6
 80066ea:	6023      	str	r3, [r4, #0]
 80066ec:	2000      	movs	r0, #0
 80066ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f2:	462a      	mov	r2, r5
 80066f4:	f000 fa36 	bl	8006b64 <_realloc_r>
 80066f8:	4606      	mov	r6, r0
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d1e0      	bne.n	80066c0 <__ssputs_r+0x5c>
 80066fe:	6921      	ldr	r1, [r4, #16]
 8006700:	4650      	mov	r0, sl
 8006702:	f7ff fb2d 	bl	8005d60 <_free_r>
 8006706:	230c      	movs	r3, #12
 8006708:	f8ca 3000 	str.w	r3, [sl]
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006712:	81a3      	strh	r3, [r4, #12]
 8006714:	f04f 30ff 	mov.w	r0, #4294967295
 8006718:	e7e9      	b.n	80066ee <__ssputs_r+0x8a>
	...

0800671c <_svfiprintf_r>:
 800671c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006720:	4698      	mov	r8, r3
 8006722:	898b      	ldrh	r3, [r1, #12]
 8006724:	061b      	lsls	r3, r3, #24
 8006726:	b09d      	sub	sp, #116	@ 0x74
 8006728:	4607      	mov	r7, r0
 800672a:	460d      	mov	r5, r1
 800672c:	4614      	mov	r4, r2
 800672e:	d510      	bpl.n	8006752 <_svfiprintf_r+0x36>
 8006730:	690b      	ldr	r3, [r1, #16]
 8006732:	b973      	cbnz	r3, 8006752 <_svfiprintf_r+0x36>
 8006734:	2140      	movs	r1, #64	@ 0x40
 8006736:	f7ff fb87 	bl	8005e48 <_malloc_r>
 800673a:	6028      	str	r0, [r5, #0]
 800673c:	6128      	str	r0, [r5, #16]
 800673e:	b930      	cbnz	r0, 800674e <_svfiprintf_r+0x32>
 8006740:	230c      	movs	r3, #12
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	f04f 30ff 	mov.w	r0, #4294967295
 8006748:	b01d      	add	sp, #116	@ 0x74
 800674a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674e:	2340      	movs	r3, #64	@ 0x40
 8006750:	616b      	str	r3, [r5, #20]
 8006752:	2300      	movs	r3, #0
 8006754:	9309      	str	r3, [sp, #36]	@ 0x24
 8006756:	2320      	movs	r3, #32
 8006758:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800675c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006760:	2330      	movs	r3, #48	@ 0x30
 8006762:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006900 <_svfiprintf_r+0x1e4>
 8006766:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800676a:	f04f 0901 	mov.w	r9, #1
 800676e:	4623      	mov	r3, r4
 8006770:	469a      	mov	sl, r3
 8006772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006776:	b10a      	cbz	r2, 800677c <_svfiprintf_r+0x60>
 8006778:	2a25      	cmp	r2, #37	@ 0x25
 800677a:	d1f9      	bne.n	8006770 <_svfiprintf_r+0x54>
 800677c:	ebba 0b04 	subs.w	fp, sl, r4
 8006780:	d00b      	beq.n	800679a <_svfiprintf_r+0x7e>
 8006782:	465b      	mov	r3, fp
 8006784:	4622      	mov	r2, r4
 8006786:	4629      	mov	r1, r5
 8006788:	4638      	mov	r0, r7
 800678a:	f7ff ff6b 	bl	8006664 <__ssputs_r>
 800678e:	3001      	adds	r0, #1
 8006790:	f000 80a7 	beq.w	80068e2 <_svfiprintf_r+0x1c6>
 8006794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006796:	445a      	add	r2, fp
 8006798:	9209      	str	r2, [sp, #36]	@ 0x24
 800679a:	f89a 3000 	ldrb.w	r3, [sl]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 809f 	beq.w	80068e2 <_svfiprintf_r+0x1c6>
 80067a4:	2300      	movs	r3, #0
 80067a6:	f04f 32ff 	mov.w	r2, #4294967295
 80067aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067ae:	f10a 0a01 	add.w	sl, sl, #1
 80067b2:	9304      	str	r3, [sp, #16]
 80067b4:	9307      	str	r3, [sp, #28]
 80067b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80067bc:	4654      	mov	r4, sl
 80067be:	2205      	movs	r2, #5
 80067c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c4:	484e      	ldr	r0, [pc, #312]	@ (8006900 <_svfiprintf_r+0x1e4>)
 80067c6:	f7f9 fd03 	bl	80001d0 <memchr>
 80067ca:	9a04      	ldr	r2, [sp, #16]
 80067cc:	b9d8      	cbnz	r0, 8006806 <_svfiprintf_r+0xea>
 80067ce:	06d0      	lsls	r0, r2, #27
 80067d0:	bf44      	itt	mi
 80067d2:	2320      	movmi	r3, #32
 80067d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067d8:	0711      	lsls	r1, r2, #28
 80067da:	bf44      	itt	mi
 80067dc:	232b      	movmi	r3, #43	@ 0x2b
 80067de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067e2:	f89a 3000 	ldrb.w	r3, [sl]
 80067e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80067e8:	d015      	beq.n	8006816 <_svfiprintf_r+0xfa>
 80067ea:	9a07      	ldr	r2, [sp, #28]
 80067ec:	4654      	mov	r4, sl
 80067ee:	2000      	movs	r0, #0
 80067f0:	f04f 0c0a 	mov.w	ip, #10
 80067f4:	4621      	mov	r1, r4
 80067f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067fa:	3b30      	subs	r3, #48	@ 0x30
 80067fc:	2b09      	cmp	r3, #9
 80067fe:	d94b      	bls.n	8006898 <_svfiprintf_r+0x17c>
 8006800:	b1b0      	cbz	r0, 8006830 <_svfiprintf_r+0x114>
 8006802:	9207      	str	r2, [sp, #28]
 8006804:	e014      	b.n	8006830 <_svfiprintf_r+0x114>
 8006806:	eba0 0308 	sub.w	r3, r0, r8
 800680a:	fa09 f303 	lsl.w	r3, r9, r3
 800680e:	4313      	orrs	r3, r2
 8006810:	9304      	str	r3, [sp, #16]
 8006812:	46a2      	mov	sl, r4
 8006814:	e7d2      	b.n	80067bc <_svfiprintf_r+0xa0>
 8006816:	9b03      	ldr	r3, [sp, #12]
 8006818:	1d19      	adds	r1, r3, #4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	9103      	str	r1, [sp, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	bfbb      	ittet	lt
 8006822:	425b      	neglt	r3, r3
 8006824:	f042 0202 	orrlt.w	r2, r2, #2
 8006828:	9307      	strge	r3, [sp, #28]
 800682a:	9307      	strlt	r3, [sp, #28]
 800682c:	bfb8      	it	lt
 800682e:	9204      	strlt	r2, [sp, #16]
 8006830:	7823      	ldrb	r3, [r4, #0]
 8006832:	2b2e      	cmp	r3, #46	@ 0x2e
 8006834:	d10a      	bne.n	800684c <_svfiprintf_r+0x130>
 8006836:	7863      	ldrb	r3, [r4, #1]
 8006838:	2b2a      	cmp	r3, #42	@ 0x2a
 800683a:	d132      	bne.n	80068a2 <_svfiprintf_r+0x186>
 800683c:	9b03      	ldr	r3, [sp, #12]
 800683e:	1d1a      	adds	r2, r3, #4
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	9203      	str	r2, [sp, #12]
 8006844:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006848:	3402      	adds	r4, #2
 800684a:	9305      	str	r3, [sp, #20]
 800684c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006910 <_svfiprintf_r+0x1f4>
 8006850:	7821      	ldrb	r1, [r4, #0]
 8006852:	2203      	movs	r2, #3
 8006854:	4650      	mov	r0, sl
 8006856:	f7f9 fcbb 	bl	80001d0 <memchr>
 800685a:	b138      	cbz	r0, 800686c <_svfiprintf_r+0x150>
 800685c:	9b04      	ldr	r3, [sp, #16]
 800685e:	eba0 000a 	sub.w	r0, r0, sl
 8006862:	2240      	movs	r2, #64	@ 0x40
 8006864:	4082      	lsls	r2, r0
 8006866:	4313      	orrs	r3, r2
 8006868:	3401      	adds	r4, #1
 800686a:	9304      	str	r3, [sp, #16]
 800686c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006870:	4824      	ldr	r0, [pc, #144]	@ (8006904 <_svfiprintf_r+0x1e8>)
 8006872:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006876:	2206      	movs	r2, #6
 8006878:	f7f9 fcaa 	bl	80001d0 <memchr>
 800687c:	2800      	cmp	r0, #0
 800687e:	d036      	beq.n	80068ee <_svfiprintf_r+0x1d2>
 8006880:	4b21      	ldr	r3, [pc, #132]	@ (8006908 <_svfiprintf_r+0x1ec>)
 8006882:	bb1b      	cbnz	r3, 80068cc <_svfiprintf_r+0x1b0>
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	3307      	adds	r3, #7
 8006888:	f023 0307 	bic.w	r3, r3, #7
 800688c:	3308      	adds	r3, #8
 800688e:	9303      	str	r3, [sp, #12]
 8006890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006892:	4433      	add	r3, r6
 8006894:	9309      	str	r3, [sp, #36]	@ 0x24
 8006896:	e76a      	b.n	800676e <_svfiprintf_r+0x52>
 8006898:	fb0c 3202 	mla	r2, ip, r2, r3
 800689c:	460c      	mov	r4, r1
 800689e:	2001      	movs	r0, #1
 80068a0:	e7a8      	b.n	80067f4 <_svfiprintf_r+0xd8>
 80068a2:	2300      	movs	r3, #0
 80068a4:	3401      	adds	r4, #1
 80068a6:	9305      	str	r3, [sp, #20]
 80068a8:	4619      	mov	r1, r3
 80068aa:	f04f 0c0a 	mov.w	ip, #10
 80068ae:	4620      	mov	r0, r4
 80068b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068b4:	3a30      	subs	r2, #48	@ 0x30
 80068b6:	2a09      	cmp	r2, #9
 80068b8:	d903      	bls.n	80068c2 <_svfiprintf_r+0x1a6>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0c6      	beq.n	800684c <_svfiprintf_r+0x130>
 80068be:	9105      	str	r1, [sp, #20]
 80068c0:	e7c4      	b.n	800684c <_svfiprintf_r+0x130>
 80068c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80068c6:	4604      	mov	r4, r0
 80068c8:	2301      	movs	r3, #1
 80068ca:	e7f0      	b.n	80068ae <_svfiprintf_r+0x192>
 80068cc:	ab03      	add	r3, sp, #12
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	462a      	mov	r2, r5
 80068d2:	4b0e      	ldr	r3, [pc, #56]	@ (800690c <_svfiprintf_r+0x1f0>)
 80068d4:	a904      	add	r1, sp, #16
 80068d6:	4638      	mov	r0, r7
 80068d8:	f7fd fe96 	bl	8004608 <_printf_float>
 80068dc:	1c42      	adds	r2, r0, #1
 80068de:	4606      	mov	r6, r0
 80068e0:	d1d6      	bne.n	8006890 <_svfiprintf_r+0x174>
 80068e2:	89ab      	ldrh	r3, [r5, #12]
 80068e4:	065b      	lsls	r3, r3, #25
 80068e6:	f53f af2d 	bmi.w	8006744 <_svfiprintf_r+0x28>
 80068ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068ec:	e72c      	b.n	8006748 <_svfiprintf_r+0x2c>
 80068ee:	ab03      	add	r3, sp, #12
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	462a      	mov	r2, r5
 80068f4:	4b05      	ldr	r3, [pc, #20]	@ (800690c <_svfiprintf_r+0x1f0>)
 80068f6:	a904      	add	r1, sp, #16
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7fe f91d 	bl	8004b38 <_printf_i>
 80068fe:	e7ed      	b.n	80068dc <_svfiprintf_r+0x1c0>
 8006900:	080073e0 	.word	0x080073e0
 8006904:	080073ea 	.word	0x080073ea
 8006908:	08004609 	.word	0x08004609
 800690c:	08006665 	.word	0x08006665
 8006910:	080073e6 	.word	0x080073e6

08006914 <__sflush_r>:
 8006914:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800691c:	0716      	lsls	r6, r2, #28
 800691e:	4605      	mov	r5, r0
 8006920:	460c      	mov	r4, r1
 8006922:	d454      	bmi.n	80069ce <__sflush_r+0xba>
 8006924:	684b      	ldr	r3, [r1, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	dc02      	bgt.n	8006930 <__sflush_r+0x1c>
 800692a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	dd48      	ble.n	80069c2 <__sflush_r+0xae>
 8006930:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006932:	2e00      	cmp	r6, #0
 8006934:	d045      	beq.n	80069c2 <__sflush_r+0xae>
 8006936:	2300      	movs	r3, #0
 8006938:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800693c:	682f      	ldr	r7, [r5, #0]
 800693e:	6a21      	ldr	r1, [r4, #32]
 8006940:	602b      	str	r3, [r5, #0]
 8006942:	d030      	beq.n	80069a6 <__sflush_r+0x92>
 8006944:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	0759      	lsls	r1, r3, #29
 800694a:	d505      	bpl.n	8006958 <__sflush_r+0x44>
 800694c:	6863      	ldr	r3, [r4, #4]
 800694e:	1ad2      	subs	r2, r2, r3
 8006950:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006952:	b10b      	cbz	r3, 8006958 <__sflush_r+0x44>
 8006954:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006956:	1ad2      	subs	r2, r2, r3
 8006958:	2300      	movs	r3, #0
 800695a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800695c:	6a21      	ldr	r1, [r4, #32]
 800695e:	4628      	mov	r0, r5
 8006960:	47b0      	blx	r6
 8006962:	1c43      	adds	r3, r0, #1
 8006964:	89a3      	ldrh	r3, [r4, #12]
 8006966:	d106      	bne.n	8006976 <__sflush_r+0x62>
 8006968:	6829      	ldr	r1, [r5, #0]
 800696a:	291d      	cmp	r1, #29
 800696c:	d82b      	bhi.n	80069c6 <__sflush_r+0xb2>
 800696e:	4a2a      	ldr	r2, [pc, #168]	@ (8006a18 <__sflush_r+0x104>)
 8006970:	410a      	asrs	r2, r1
 8006972:	07d6      	lsls	r6, r2, #31
 8006974:	d427      	bmi.n	80069c6 <__sflush_r+0xb2>
 8006976:	2200      	movs	r2, #0
 8006978:	6062      	str	r2, [r4, #4]
 800697a:	04d9      	lsls	r1, r3, #19
 800697c:	6922      	ldr	r2, [r4, #16]
 800697e:	6022      	str	r2, [r4, #0]
 8006980:	d504      	bpl.n	800698c <__sflush_r+0x78>
 8006982:	1c42      	adds	r2, r0, #1
 8006984:	d101      	bne.n	800698a <__sflush_r+0x76>
 8006986:	682b      	ldr	r3, [r5, #0]
 8006988:	b903      	cbnz	r3, 800698c <__sflush_r+0x78>
 800698a:	6560      	str	r0, [r4, #84]	@ 0x54
 800698c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800698e:	602f      	str	r7, [r5, #0]
 8006990:	b1b9      	cbz	r1, 80069c2 <__sflush_r+0xae>
 8006992:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006996:	4299      	cmp	r1, r3
 8006998:	d002      	beq.n	80069a0 <__sflush_r+0x8c>
 800699a:	4628      	mov	r0, r5
 800699c:	f7ff f9e0 	bl	8005d60 <_free_r>
 80069a0:	2300      	movs	r3, #0
 80069a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80069a4:	e00d      	b.n	80069c2 <__sflush_r+0xae>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b0      	blx	r6
 80069ac:	4602      	mov	r2, r0
 80069ae:	1c50      	adds	r0, r2, #1
 80069b0:	d1c9      	bne.n	8006946 <__sflush_r+0x32>
 80069b2:	682b      	ldr	r3, [r5, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0c6      	beq.n	8006946 <__sflush_r+0x32>
 80069b8:	2b1d      	cmp	r3, #29
 80069ba:	d001      	beq.n	80069c0 <__sflush_r+0xac>
 80069bc:	2b16      	cmp	r3, #22
 80069be:	d11e      	bne.n	80069fe <__sflush_r+0xea>
 80069c0:	602f      	str	r7, [r5, #0]
 80069c2:	2000      	movs	r0, #0
 80069c4:	e022      	b.n	8006a0c <__sflush_r+0xf8>
 80069c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ca:	b21b      	sxth	r3, r3
 80069cc:	e01b      	b.n	8006a06 <__sflush_r+0xf2>
 80069ce:	690f      	ldr	r7, [r1, #16]
 80069d0:	2f00      	cmp	r7, #0
 80069d2:	d0f6      	beq.n	80069c2 <__sflush_r+0xae>
 80069d4:	0793      	lsls	r3, r2, #30
 80069d6:	680e      	ldr	r6, [r1, #0]
 80069d8:	bf08      	it	eq
 80069da:	694b      	ldreq	r3, [r1, #20]
 80069dc:	600f      	str	r7, [r1, #0]
 80069de:	bf18      	it	ne
 80069e0:	2300      	movne	r3, #0
 80069e2:	eba6 0807 	sub.w	r8, r6, r7
 80069e6:	608b      	str	r3, [r1, #8]
 80069e8:	f1b8 0f00 	cmp.w	r8, #0
 80069ec:	dde9      	ble.n	80069c2 <__sflush_r+0xae>
 80069ee:	6a21      	ldr	r1, [r4, #32]
 80069f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80069f2:	4643      	mov	r3, r8
 80069f4:	463a      	mov	r2, r7
 80069f6:	4628      	mov	r0, r5
 80069f8:	47b0      	blx	r6
 80069fa:	2800      	cmp	r0, #0
 80069fc:	dc08      	bgt.n	8006a10 <__sflush_r+0xfc>
 80069fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a06:	81a3      	strh	r3, [r4, #12]
 8006a08:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a10:	4407      	add	r7, r0
 8006a12:	eba8 0800 	sub.w	r8, r8, r0
 8006a16:	e7e7      	b.n	80069e8 <__sflush_r+0xd4>
 8006a18:	dfbffffe 	.word	0xdfbffffe

08006a1c <_fflush_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	690b      	ldr	r3, [r1, #16]
 8006a20:	4605      	mov	r5, r0
 8006a22:	460c      	mov	r4, r1
 8006a24:	b913      	cbnz	r3, 8006a2c <_fflush_r+0x10>
 8006a26:	2500      	movs	r5, #0
 8006a28:	4628      	mov	r0, r5
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	b118      	cbz	r0, 8006a36 <_fflush_r+0x1a>
 8006a2e:	6a03      	ldr	r3, [r0, #32]
 8006a30:	b90b      	cbnz	r3, 8006a36 <_fflush_r+0x1a>
 8006a32:	f7fe fa2d 	bl	8004e90 <__sinit>
 8006a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0f3      	beq.n	8006a26 <_fflush_r+0xa>
 8006a3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a40:	07d0      	lsls	r0, r2, #31
 8006a42:	d404      	bmi.n	8006a4e <_fflush_r+0x32>
 8006a44:	0599      	lsls	r1, r3, #22
 8006a46:	d402      	bmi.n	8006a4e <_fflush_r+0x32>
 8006a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a4a:	f7fe fb38 	bl	80050be <__retarget_lock_acquire_recursive>
 8006a4e:	4628      	mov	r0, r5
 8006a50:	4621      	mov	r1, r4
 8006a52:	f7ff ff5f 	bl	8006914 <__sflush_r>
 8006a56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a58:	07da      	lsls	r2, r3, #31
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	d4e4      	bmi.n	8006a28 <_fflush_r+0xc>
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	059b      	lsls	r3, r3, #22
 8006a62:	d4e1      	bmi.n	8006a28 <_fflush_r+0xc>
 8006a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a66:	f7fe fb2b 	bl	80050c0 <__retarget_lock_release_recursive>
 8006a6a:	e7dd      	b.n	8006a28 <_fflush_r+0xc>

08006a6c <memmove>:
 8006a6c:	4288      	cmp	r0, r1
 8006a6e:	b510      	push	{r4, lr}
 8006a70:	eb01 0402 	add.w	r4, r1, r2
 8006a74:	d902      	bls.n	8006a7c <memmove+0x10>
 8006a76:	4284      	cmp	r4, r0
 8006a78:	4623      	mov	r3, r4
 8006a7a:	d807      	bhi.n	8006a8c <memmove+0x20>
 8006a7c:	1e43      	subs	r3, r0, #1
 8006a7e:	42a1      	cmp	r1, r4
 8006a80:	d008      	beq.n	8006a94 <memmove+0x28>
 8006a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a8a:	e7f8      	b.n	8006a7e <memmove+0x12>
 8006a8c:	4402      	add	r2, r0
 8006a8e:	4601      	mov	r1, r0
 8006a90:	428a      	cmp	r2, r1
 8006a92:	d100      	bne.n	8006a96 <memmove+0x2a>
 8006a94:	bd10      	pop	{r4, pc}
 8006a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a9e:	e7f7      	b.n	8006a90 <memmove+0x24>

08006aa0 <_sbrk_r>:
 8006aa0:	b538      	push	{r3, r4, r5, lr}
 8006aa2:	4d06      	ldr	r5, [pc, #24]	@ (8006abc <_sbrk_r+0x1c>)
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	602b      	str	r3, [r5, #0]
 8006aac:	f7fa fb92 	bl	80011d4 <_sbrk>
 8006ab0:	1c43      	adds	r3, r0, #1
 8006ab2:	d102      	bne.n	8006aba <_sbrk_r+0x1a>
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	b103      	cbz	r3, 8006aba <_sbrk_r+0x1a>
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	bd38      	pop	{r3, r4, r5, pc}
 8006abc:	20000410 	.word	0x20000410

08006ac0 <memcpy>:
 8006ac0:	440a      	add	r2, r1
 8006ac2:	4291      	cmp	r1, r2
 8006ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ac8:	d100      	bne.n	8006acc <memcpy+0xc>
 8006aca:	4770      	bx	lr
 8006acc:	b510      	push	{r4, lr}
 8006ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ad6:	4291      	cmp	r1, r2
 8006ad8:	d1f9      	bne.n	8006ace <memcpy+0xe>
 8006ada:	bd10      	pop	{r4, pc}

08006adc <__assert_func>:
 8006adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ade:	4614      	mov	r4, r2
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4b09      	ldr	r3, [pc, #36]	@ (8006b08 <__assert_func+0x2c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	68d8      	ldr	r0, [r3, #12]
 8006aea:	b954      	cbnz	r4, 8006b02 <__assert_func+0x26>
 8006aec:	4b07      	ldr	r3, [pc, #28]	@ (8006b0c <__assert_func+0x30>)
 8006aee:	461c      	mov	r4, r3
 8006af0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006af4:	9100      	str	r1, [sp, #0]
 8006af6:	462b      	mov	r3, r5
 8006af8:	4905      	ldr	r1, [pc, #20]	@ (8006b10 <__assert_func+0x34>)
 8006afa:	f000 f86f 	bl	8006bdc <fiprintf>
 8006afe:	f000 f87f 	bl	8006c00 <abort>
 8006b02:	4b04      	ldr	r3, [pc, #16]	@ (8006b14 <__assert_func+0x38>)
 8006b04:	e7f4      	b.n	8006af0 <__assert_func+0x14>
 8006b06:	bf00      	nop
 8006b08:	2000001c 	.word	0x2000001c
 8006b0c:	08007436 	.word	0x08007436
 8006b10:	08007408 	.word	0x08007408
 8006b14:	080073fb 	.word	0x080073fb

08006b18 <_calloc_r>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	fba1 5402 	umull	r5, r4, r1, r2
 8006b1e:	b93c      	cbnz	r4, 8006b30 <_calloc_r+0x18>
 8006b20:	4629      	mov	r1, r5
 8006b22:	f7ff f991 	bl	8005e48 <_malloc_r>
 8006b26:	4606      	mov	r6, r0
 8006b28:	b928      	cbnz	r0, 8006b36 <_calloc_r+0x1e>
 8006b2a:	2600      	movs	r6, #0
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	220c      	movs	r2, #12
 8006b32:	6002      	str	r2, [r0, #0]
 8006b34:	e7f9      	b.n	8006b2a <_calloc_r+0x12>
 8006b36:	462a      	mov	r2, r5
 8006b38:	4621      	mov	r1, r4
 8006b3a:	f7fe fa42 	bl	8004fc2 <memset>
 8006b3e:	e7f5      	b.n	8006b2c <_calloc_r+0x14>

08006b40 <__ascii_mbtowc>:
 8006b40:	b082      	sub	sp, #8
 8006b42:	b901      	cbnz	r1, 8006b46 <__ascii_mbtowc+0x6>
 8006b44:	a901      	add	r1, sp, #4
 8006b46:	b142      	cbz	r2, 8006b5a <__ascii_mbtowc+0x1a>
 8006b48:	b14b      	cbz	r3, 8006b5e <__ascii_mbtowc+0x1e>
 8006b4a:	7813      	ldrb	r3, [r2, #0]
 8006b4c:	600b      	str	r3, [r1, #0]
 8006b4e:	7812      	ldrb	r2, [r2, #0]
 8006b50:	1e10      	subs	r0, r2, #0
 8006b52:	bf18      	it	ne
 8006b54:	2001      	movne	r0, #1
 8006b56:	b002      	add	sp, #8
 8006b58:	4770      	bx	lr
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	e7fb      	b.n	8006b56 <__ascii_mbtowc+0x16>
 8006b5e:	f06f 0001 	mvn.w	r0, #1
 8006b62:	e7f8      	b.n	8006b56 <__ascii_mbtowc+0x16>

08006b64 <_realloc_r>:
 8006b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b68:	4680      	mov	r8, r0
 8006b6a:	4615      	mov	r5, r2
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	b921      	cbnz	r1, 8006b7a <_realloc_r+0x16>
 8006b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b74:	4611      	mov	r1, r2
 8006b76:	f7ff b967 	b.w	8005e48 <_malloc_r>
 8006b7a:	b92a      	cbnz	r2, 8006b88 <_realloc_r+0x24>
 8006b7c:	f7ff f8f0 	bl	8005d60 <_free_r>
 8006b80:	2400      	movs	r4, #0
 8006b82:	4620      	mov	r0, r4
 8006b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b88:	f000 f841 	bl	8006c0e <_malloc_usable_size_r>
 8006b8c:	4285      	cmp	r5, r0
 8006b8e:	4606      	mov	r6, r0
 8006b90:	d802      	bhi.n	8006b98 <_realloc_r+0x34>
 8006b92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b96:	d8f4      	bhi.n	8006b82 <_realloc_r+0x1e>
 8006b98:	4629      	mov	r1, r5
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	f7ff f954 	bl	8005e48 <_malloc_r>
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d0ec      	beq.n	8006b80 <_realloc_r+0x1c>
 8006ba6:	42b5      	cmp	r5, r6
 8006ba8:	462a      	mov	r2, r5
 8006baa:	4621      	mov	r1, r4
 8006bac:	bf28      	it	cs
 8006bae:	4632      	movcs	r2, r6
 8006bb0:	f7ff ff86 	bl	8006ac0 <memcpy>
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	4640      	mov	r0, r8
 8006bb8:	f7ff f8d2 	bl	8005d60 <_free_r>
 8006bbc:	463c      	mov	r4, r7
 8006bbe:	e7e0      	b.n	8006b82 <_realloc_r+0x1e>

08006bc0 <__ascii_wctomb>:
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	4608      	mov	r0, r1
 8006bc4:	b141      	cbz	r1, 8006bd8 <__ascii_wctomb+0x18>
 8006bc6:	2aff      	cmp	r2, #255	@ 0xff
 8006bc8:	d904      	bls.n	8006bd4 <__ascii_wctomb+0x14>
 8006bca:	228a      	movs	r2, #138	@ 0x8a
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd2:	4770      	bx	lr
 8006bd4:	700a      	strb	r2, [r1, #0]
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	4770      	bx	lr
	...

08006bdc <fiprintf>:
 8006bdc:	b40e      	push	{r1, r2, r3}
 8006bde:	b503      	push	{r0, r1, lr}
 8006be0:	4601      	mov	r1, r0
 8006be2:	ab03      	add	r3, sp, #12
 8006be4:	4805      	ldr	r0, [pc, #20]	@ (8006bfc <fiprintf+0x20>)
 8006be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bea:	6800      	ldr	r0, [r0, #0]
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	f000 f83f 	bl	8006c70 <_vfiprintf_r>
 8006bf2:	b002      	add	sp, #8
 8006bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bf8:	b003      	add	sp, #12
 8006bfa:	4770      	bx	lr
 8006bfc:	2000001c 	.word	0x2000001c

08006c00 <abort>:
 8006c00:	b508      	push	{r3, lr}
 8006c02:	2006      	movs	r0, #6
 8006c04:	f000 fa08 	bl	8007018 <raise>
 8006c08:	2001      	movs	r0, #1
 8006c0a:	f7fa fa6b 	bl	80010e4 <_exit>

08006c0e <_malloc_usable_size_r>:
 8006c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c12:	1f18      	subs	r0, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	bfbc      	itt	lt
 8006c18:	580b      	ldrlt	r3, [r1, r0]
 8006c1a:	18c0      	addlt	r0, r0, r3
 8006c1c:	4770      	bx	lr

08006c1e <__sfputc_r>:
 8006c1e:	6893      	ldr	r3, [r2, #8]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	b410      	push	{r4}
 8006c26:	6093      	str	r3, [r2, #8]
 8006c28:	da08      	bge.n	8006c3c <__sfputc_r+0x1e>
 8006c2a:	6994      	ldr	r4, [r2, #24]
 8006c2c:	42a3      	cmp	r3, r4
 8006c2e:	db01      	blt.n	8006c34 <__sfputc_r+0x16>
 8006c30:	290a      	cmp	r1, #10
 8006c32:	d103      	bne.n	8006c3c <__sfputc_r+0x1e>
 8006c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c38:	f000 b932 	b.w	8006ea0 <__swbuf_r>
 8006c3c:	6813      	ldr	r3, [r2, #0]
 8006c3e:	1c58      	adds	r0, r3, #1
 8006c40:	6010      	str	r0, [r2, #0]
 8006c42:	7019      	strb	r1, [r3, #0]
 8006c44:	4608      	mov	r0, r1
 8006c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <__sfputs_r>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	4606      	mov	r6, r0
 8006c50:	460f      	mov	r7, r1
 8006c52:	4614      	mov	r4, r2
 8006c54:	18d5      	adds	r5, r2, r3
 8006c56:	42ac      	cmp	r4, r5
 8006c58:	d101      	bne.n	8006c5e <__sfputs_r+0x12>
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	e007      	b.n	8006c6e <__sfputs_r+0x22>
 8006c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c62:	463a      	mov	r2, r7
 8006c64:	4630      	mov	r0, r6
 8006c66:	f7ff ffda 	bl	8006c1e <__sfputc_r>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	d1f3      	bne.n	8006c56 <__sfputs_r+0xa>
 8006c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c70 <_vfiprintf_r>:
 8006c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c74:	460d      	mov	r5, r1
 8006c76:	b09d      	sub	sp, #116	@ 0x74
 8006c78:	4614      	mov	r4, r2
 8006c7a:	4698      	mov	r8, r3
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	b118      	cbz	r0, 8006c88 <_vfiprintf_r+0x18>
 8006c80:	6a03      	ldr	r3, [r0, #32]
 8006c82:	b90b      	cbnz	r3, 8006c88 <_vfiprintf_r+0x18>
 8006c84:	f7fe f904 	bl	8004e90 <__sinit>
 8006c88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c8a:	07d9      	lsls	r1, r3, #31
 8006c8c:	d405      	bmi.n	8006c9a <_vfiprintf_r+0x2a>
 8006c8e:	89ab      	ldrh	r3, [r5, #12]
 8006c90:	059a      	lsls	r2, r3, #22
 8006c92:	d402      	bmi.n	8006c9a <_vfiprintf_r+0x2a>
 8006c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c96:	f7fe fa12 	bl	80050be <__retarget_lock_acquire_recursive>
 8006c9a:	89ab      	ldrh	r3, [r5, #12]
 8006c9c:	071b      	lsls	r3, r3, #28
 8006c9e:	d501      	bpl.n	8006ca4 <_vfiprintf_r+0x34>
 8006ca0:	692b      	ldr	r3, [r5, #16]
 8006ca2:	b99b      	cbnz	r3, 8006ccc <_vfiprintf_r+0x5c>
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f000 f938 	bl	8006f1c <__swsetup_r>
 8006cac:	b170      	cbz	r0, 8006ccc <_vfiprintf_r+0x5c>
 8006cae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cb0:	07dc      	lsls	r4, r3, #31
 8006cb2:	d504      	bpl.n	8006cbe <_vfiprintf_r+0x4e>
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb8:	b01d      	add	sp, #116	@ 0x74
 8006cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbe:	89ab      	ldrh	r3, [r5, #12]
 8006cc0:	0598      	lsls	r0, r3, #22
 8006cc2:	d4f7      	bmi.n	8006cb4 <_vfiprintf_r+0x44>
 8006cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cc6:	f7fe f9fb 	bl	80050c0 <__retarget_lock_release_recursive>
 8006cca:	e7f3      	b.n	8006cb4 <_vfiprintf_r+0x44>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cd0:	2320      	movs	r3, #32
 8006cd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cda:	2330      	movs	r3, #48	@ 0x30
 8006cdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006e8c <_vfiprintf_r+0x21c>
 8006ce0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ce4:	f04f 0901 	mov.w	r9, #1
 8006ce8:	4623      	mov	r3, r4
 8006cea:	469a      	mov	sl, r3
 8006cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cf0:	b10a      	cbz	r2, 8006cf6 <_vfiprintf_r+0x86>
 8006cf2:	2a25      	cmp	r2, #37	@ 0x25
 8006cf4:	d1f9      	bne.n	8006cea <_vfiprintf_r+0x7a>
 8006cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8006cfa:	d00b      	beq.n	8006d14 <_vfiprintf_r+0xa4>
 8006cfc:	465b      	mov	r3, fp
 8006cfe:	4622      	mov	r2, r4
 8006d00:	4629      	mov	r1, r5
 8006d02:	4630      	mov	r0, r6
 8006d04:	f7ff ffa2 	bl	8006c4c <__sfputs_r>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	f000 80a7 	beq.w	8006e5c <_vfiprintf_r+0x1ec>
 8006d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d10:	445a      	add	r2, fp
 8006d12:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d14:	f89a 3000 	ldrb.w	r3, [sl]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 809f 	beq.w	8006e5c <_vfiprintf_r+0x1ec>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f04f 32ff 	mov.w	r2, #4294967295
 8006d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d28:	f10a 0a01 	add.w	sl, sl, #1
 8006d2c:	9304      	str	r3, [sp, #16]
 8006d2e:	9307      	str	r3, [sp, #28]
 8006d30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d34:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d36:	4654      	mov	r4, sl
 8006d38:	2205      	movs	r2, #5
 8006d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d3e:	4853      	ldr	r0, [pc, #332]	@ (8006e8c <_vfiprintf_r+0x21c>)
 8006d40:	f7f9 fa46 	bl	80001d0 <memchr>
 8006d44:	9a04      	ldr	r2, [sp, #16]
 8006d46:	b9d8      	cbnz	r0, 8006d80 <_vfiprintf_r+0x110>
 8006d48:	06d1      	lsls	r1, r2, #27
 8006d4a:	bf44      	itt	mi
 8006d4c:	2320      	movmi	r3, #32
 8006d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d52:	0713      	lsls	r3, r2, #28
 8006d54:	bf44      	itt	mi
 8006d56:	232b      	movmi	r3, #43	@ 0x2b
 8006d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d62:	d015      	beq.n	8006d90 <_vfiprintf_r+0x120>
 8006d64:	9a07      	ldr	r2, [sp, #28]
 8006d66:	4654      	mov	r4, sl
 8006d68:	2000      	movs	r0, #0
 8006d6a:	f04f 0c0a 	mov.w	ip, #10
 8006d6e:	4621      	mov	r1, r4
 8006d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d74:	3b30      	subs	r3, #48	@ 0x30
 8006d76:	2b09      	cmp	r3, #9
 8006d78:	d94b      	bls.n	8006e12 <_vfiprintf_r+0x1a2>
 8006d7a:	b1b0      	cbz	r0, 8006daa <_vfiprintf_r+0x13a>
 8006d7c:	9207      	str	r2, [sp, #28]
 8006d7e:	e014      	b.n	8006daa <_vfiprintf_r+0x13a>
 8006d80:	eba0 0308 	sub.w	r3, r0, r8
 8006d84:	fa09 f303 	lsl.w	r3, r9, r3
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	9304      	str	r3, [sp, #16]
 8006d8c:	46a2      	mov	sl, r4
 8006d8e:	e7d2      	b.n	8006d36 <_vfiprintf_r+0xc6>
 8006d90:	9b03      	ldr	r3, [sp, #12]
 8006d92:	1d19      	adds	r1, r3, #4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	9103      	str	r1, [sp, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bfbb      	ittet	lt
 8006d9c:	425b      	neglt	r3, r3
 8006d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8006da2:	9307      	strge	r3, [sp, #28]
 8006da4:	9307      	strlt	r3, [sp, #28]
 8006da6:	bfb8      	it	lt
 8006da8:	9204      	strlt	r2, [sp, #16]
 8006daa:	7823      	ldrb	r3, [r4, #0]
 8006dac:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dae:	d10a      	bne.n	8006dc6 <_vfiprintf_r+0x156>
 8006db0:	7863      	ldrb	r3, [r4, #1]
 8006db2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006db4:	d132      	bne.n	8006e1c <_vfiprintf_r+0x1ac>
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	1d1a      	adds	r2, r3, #4
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	9203      	str	r2, [sp, #12]
 8006dbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006dc2:	3402      	adds	r4, #2
 8006dc4:	9305      	str	r3, [sp, #20]
 8006dc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e9c <_vfiprintf_r+0x22c>
 8006dca:	7821      	ldrb	r1, [r4, #0]
 8006dcc:	2203      	movs	r2, #3
 8006dce:	4650      	mov	r0, sl
 8006dd0:	f7f9 f9fe 	bl	80001d0 <memchr>
 8006dd4:	b138      	cbz	r0, 8006de6 <_vfiprintf_r+0x176>
 8006dd6:	9b04      	ldr	r3, [sp, #16]
 8006dd8:	eba0 000a 	sub.w	r0, r0, sl
 8006ddc:	2240      	movs	r2, #64	@ 0x40
 8006dde:	4082      	lsls	r2, r0
 8006de0:	4313      	orrs	r3, r2
 8006de2:	3401      	adds	r4, #1
 8006de4:	9304      	str	r3, [sp, #16]
 8006de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dea:	4829      	ldr	r0, [pc, #164]	@ (8006e90 <_vfiprintf_r+0x220>)
 8006dec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006df0:	2206      	movs	r2, #6
 8006df2:	f7f9 f9ed 	bl	80001d0 <memchr>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d03f      	beq.n	8006e7a <_vfiprintf_r+0x20a>
 8006dfa:	4b26      	ldr	r3, [pc, #152]	@ (8006e94 <_vfiprintf_r+0x224>)
 8006dfc:	bb1b      	cbnz	r3, 8006e46 <_vfiprintf_r+0x1d6>
 8006dfe:	9b03      	ldr	r3, [sp, #12]
 8006e00:	3307      	adds	r3, #7
 8006e02:	f023 0307 	bic.w	r3, r3, #7
 8006e06:	3308      	adds	r3, #8
 8006e08:	9303      	str	r3, [sp, #12]
 8006e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e0c:	443b      	add	r3, r7
 8006e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e10:	e76a      	b.n	8006ce8 <_vfiprintf_r+0x78>
 8006e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e16:	460c      	mov	r4, r1
 8006e18:	2001      	movs	r0, #1
 8006e1a:	e7a8      	b.n	8006d6e <_vfiprintf_r+0xfe>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	3401      	adds	r4, #1
 8006e20:	9305      	str	r3, [sp, #20]
 8006e22:	4619      	mov	r1, r3
 8006e24:	f04f 0c0a 	mov.w	ip, #10
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e2e:	3a30      	subs	r2, #48	@ 0x30
 8006e30:	2a09      	cmp	r2, #9
 8006e32:	d903      	bls.n	8006e3c <_vfiprintf_r+0x1cc>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0c6      	beq.n	8006dc6 <_vfiprintf_r+0x156>
 8006e38:	9105      	str	r1, [sp, #20]
 8006e3a:	e7c4      	b.n	8006dc6 <_vfiprintf_r+0x156>
 8006e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e40:	4604      	mov	r4, r0
 8006e42:	2301      	movs	r3, #1
 8006e44:	e7f0      	b.n	8006e28 <_vfiprintf_r+0x1b8>
 8006e46:	ab03      	add	r3, sp, #12
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	462a      	mov	r2, r5
 8006e4c:	4b12      	ldr	r3, [pc, #72]	@ (8006e98 <_vfiprintf_r+0x228>)
 8006e4e:	a904      	add	r1, sp, #16
 8006e50:	4630      	mov	r0, r6
 8006e52:	f7fd fbd9 	bl	8004608 <_printf_float>
 8006e56:	4607      	mov	r7, r0
 8006e58:	1c78      	adds	r0, r7, #1
 8006e5a:	d1d6      	bne.n	8006e0a <_vfiprintf_r+0x19a>
 8006e5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e5e:	07d9      	lsls	r1, r3, #31
 8006e60:	d405      	bmi.n	8006e6e <_vfiprintf_r+0x1fe>
 8006e62:	89ab      	ldrh	r3, [r5, #12]
 8006e64:	059a      	lsls	r2, r3, #22
 8006e66:	d402      	bmi.n	8006e6e <_vfiprintf_r+0x1fe>
 8006e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e6a:	f7fe f929 	bl	80050c0 <__retarget_lock_release_recursive>
 8006e6e:	89ab      	ldrh	r3, [r5, #12]
 8006e70:	065b      	lsls	r3, r3, #25
 8006e72:	f53f af1f 	bmi.w	8006cb4 <_vfiprintf_r+0x44>
 8006e76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e78:	e71e      	b.n	8006cb8 <_vfiprintf_r+0x48>
 8006e7a:	ab03      	add	r3, sp, #12
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	462a      	mov	r2, r5
 8006e80:	4b05      	ldr	r3, [pc, #20]	@ (8006e98 <_vfiprintf_r+0x228>)
 8006e82:	a904      	add	r1, sp, #16
 8006e84:	4630      	mov	r0, r6
 8006e86:	f7fd fe57 	bl	8004b38 <_printf_i>
 8006e8a:	e7e4      	b.n	8006e56 <_vfiprintf_r+0x1e6>
 8006e8c:	080073e0 	.word	0x080073e0
 8006e90:	080073ea 	.word	0x080073ea
 8006e94:	08004609 	.word	0x08004609
 8006e98:	08006c4d 	.word	0x08006c4d
 8006e9c:	080073e6 	.word	0x080073e6

08006ea0 <__swbuf_r>:
 8006ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea2:	460e      	mov	r6, r1
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	b118      	cbz	r0, 8006eb2 <__swbuf_r+0x12>
 8006eaa:	6a03      	ldr	r3, [r0, #32]
 8006eac:	b90b      	cbnz	r3, 8006eb2 <__swbuf_r+0x12>
 8006eae:	f7fd ffef 	bl	8004e90 <__sinit>
 8006eb2:	69a3      	ldr	r3, [r4, #24]
 8006eb4:	60a3      	str	r3, [r4, #8]
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	071a      	lsls	r2, r3, #28
 8006eba:	d501      	bpl.n	8006ec0 <__swbuf_r+0x20>
 8006ebc:	6923      	ldr	r3, [r4, #16]
 8006ebe:	b943      	cbnz	r3, 8006ed2 <__swbuf_r+0x32>
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f000 f82a 	bl	8006f1c <__swsetup_r>
 8006ec8:	b118      	cbz	r0, 8006ed2 <__swbuf_r+0x32>
 8006eca:	f04f 37ff 	mov.w	r7, #4294967295
 8006ece:	4638      	mov	r0, r7
 8006ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	6922      	ldr	r2, [r4, #16]
 8006ed6:	1a98      	subs	r0, r3, r2
 8006ed8:	6963      	ldr	r3, [r4, #20]
 8006eda:	b2f6      	uxtb	r6, r6
 8006edc:	4283      	cmp	r3, r0
 8006ede:	4637      	mov	r7, r6
 8006ee0:	dc05      	bgt.n	8006eee <__swbuf_r+0x4e>
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f7ff fd99 	bl	8006a1c <_fflush_r>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d1ed      	bne.n	8006eca <__swbuf_r+0x2a>
 8006eee:	68a3      	ldr	r3, [r4, #8]
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	60a3      	str	r3, [r4, #8]
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	6022      	str	r2, [r4, #0]
 8006efa:	701e      	strb	r6, [r3, #0]
 8006efc:	6962      	ldr	r2, [r4, #20]
 8006efe:	1c43      	adds	r3, r0, #1
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d004      	beq.n	8006f0e <__swbuf_r+0x6e>
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	07db      	lsls	r3, r3, #31
 8006f08:	d5e1      	bpl.n	8006ece <__swbuf_r+0x2e>
 8006f0a:	2e0a      	cmp	r6, #10
 8006f0c:	d1df      	bne.n	8006ece <__swbuf_r+0x2e>
 8006f0e:	4621      	mov	r1, r4
 8006f10:	4628      	mov	r0, r5
 8006f12:	f7ff fd83 	bl	8006a1c <_fflush_r>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d0d9      	beq.n	8006ece <__swbuf_r+0x2e>
 8006f1a:	e7d6      	b.n	8006eca <__swbuf_r+0x2a>

08006f1c <__swsetup_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4b29      	ldr	r3, [pc, #164]	@ (8006fc4 <__swsetup_r+0xa8>)
 8006f20:	4605      	mov	r5, r0
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	460c      	mov	r4, r1
 8006f26:	b118      	cbz	r0, 8006f30 <__swsetup_r+0x14>
 8006f28:	6a03      	ldr	r3, [r0, #32]
 8006f2a:	b90b      	cbnz	r3, 8006f30 <__swsetup_r+0x14>
 8006f2c:	f7fd ffb0 	bl	8004e90 <__sinit>
 8006f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f34:	0719      	lsls	r1, r3, #28
 8006f36:	d422      	bmi.n	8006f7e <__swsetup_r+0x62>
 8006f38:	06da      	lsls	r2, r3, #27
 8006f3a:	d407      	bmi.n	8006f4c <__swsetup_r+0x30>
 8006f3c:	2209      	movs	r2, #9
 8006f3e:	602a      	str	r2, [r5, #0]
 8006f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f44:	81a3      	strh	r3, [r4, #12]
 8006f46:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4a:	e033      	b.n	8006fb4 <__swsetup_r+0x98>
 8006f4c:	0758      	lsls	r0, r3, #29
 8006f4e:	d512      	bpl.n	8006f76 <__swsetup_r+0x5a>
 8006f50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f52:	b141      	cbz	r1, 8006f66 <__swsetup_r+0x4a>
 8006f54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f58:	4299      	cmp	r1, r3
 8006f5a:	d002      	beq.n	8006f62 <__swsetup_r+0x46>
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f7fe feff 	bl	8005d60 <_free_r>
 8006f62:	2300      	movs	r3, #0
 8006f64:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f6c:	81a3      	strh	r3, [r4, #12]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	6063      	str	r3, [r4, #4]
 8006f72:	6923      	ldr	r3, [r4, #16]
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	f043 0308 	orr.w	r3, r3, #8
 8006f7c:	81a3      	strh	r3, [r4, #12]
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	b94b      	cbnz	r3, 8006f96 <__swsetup_r+0x7a>
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f8c:	d003      	beq.n	8006f96 <__swsetup_r+0x7a>
 8006f8e:	4621      	mov	r1, r4
 8006f90:	4628      	mov	r0, r5
 8006f92:	f000 f883 	bl	800709c <__smakebuf_r>
 8006f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f9a:	f013 0201 	ands.w	r2, r3, #1
 8006f9e:	d00a      	beq.n	8006fb6 <__swsetup_r+0x9a>
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	60a2      	str	r2, [r4, #8]
 8006fa4:	6962      	ldr	r2, [r4, #20]
 8006fa6:	4252      	negs	r2, r2
 8006fa8:	61a2      	str	r2, [r4, #24]
 8006faa:	6922      	ldr	r2, [r4, #16]
 8006fac:	b942      	cbnz	r2, 8006fc0 <__swsetup_r+0xa4>
 8006fae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006fb2:	d1c5      	bne.n	8006f40 <__swsetup_r+0x24>
 8006fb4:	bd38      	pop	{r3, r4, r5, pc}
 8006fb6:	0799      	lsls	r1, r3, #30
 8006fb8:	bf58      	it	pl
 8006fba:	6962      	ldrpl	r2, [r4, #20]
 8006fbc:	60a2      	str	r2, [r4, #8]
 8006fbe:	e7f4      	b.n	8006faa <__swsetup_r+0x8e>
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	e7f7      	b.n	8006fb4 <__swsetup_r+0x98>
 8006fc4:	2000001c 	.word	0x2000001c

08006fc8 <_raise_r>:
 8006fc8:	291f      	cmp	r1, #31
 8006fca:	b538      	push	{r3, r4, r5, lr}
 8006fcc:	4605      	mov	r5, r0
 8006fce:	460c      	mov	r4, r1
 8006fd0:	d904      	bls.n	8006fdc <_raise_r+0x14>
 8006fd2:	2316      	movs	r3, #22
 8006fd4:	6003      	str	r3, [r0, #0]
 8006fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006fde:	b112      	cbz	r2, 8006fe6 <_raise_r+0x1e>
 8006fe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fe4:	b94b      	cbnz	r3, 8006ffa <_raise_r+0x32>
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 f830 	bl	800704c <_getpid_r>
 8006fec:	4622      	mov	r2, r4
 8006fee:	4601      	mov	r1, r0
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ff6:	f000 b817 	b.w	8007028 <_kill_r>
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d00a      	beq.n	8007014 <_raise_r+0x4c>
 8006ffe:	1c59      	adds	r1, r3, #1
 8007000:	d103      	bne.n	800700a <_raise_r+0x42>
 8007002:	2316      	movs	r3, #22
 8007004:	6003      	str	r3, [r0, #0]
 8007006:	2001      	movs	r0, #1
 8007008:	e7e7      	b.n	8006fda <_raise_r+0x12>
 800700a:	2100      	movs	r1, #0
 800700c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007010:	4620      	mov	r0, r4
 8007012:	4798      	blx	r3
 8007014:	2000      	movs	r0, #0
 8007016:	e7e0      	b.n	8006fda <_raise_r+0x12>

08007018 <raise>:
 8007018:	4b02      	ldr	r3, [pc, #8]	@ (8007024 <raise+0xc>)
 800701a:	4601      	mov	r1, r0
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	f7ff bfd3 	b.w	8006fc8 <_raise_r>
 8007022:	bf00      	nop
 8007024:	2000001c 	.word	0x2000001c

08007028 <_kill_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d07      	ldr	r5, [pc, #28]	@ (8007048 <_kill_r+0x20>)
 800702c:	2300      	movs	r3, #0
 800702e:	4604      	mov	r4, r0
 8007030:	4608      	mov	r0, r1
 8007032:	4611      	mov	r1, r2
 8007034:	602b      	str	r3, [r5, #0]
 8007036:	f7fa f845 	bl	80010c4 <_kill>
 800703a:	1c43      	adds	r3, r0, #1
 800703c:	d102      	bne.n	8007044 <_kill_r+0x1c>
 800703e:	682b      	ldr	r3, [r5, #0]
 8007040:	b103      	cbz	r3, 8007044 <_kill_r+0x1c>
 8007042:	6023      	str	r3, [r4, #0]
 8007044:	bd38      	pop	{r3, r4, r5, pc}
 8007046:	bf00      	nop
 8007048:	20000410 	.word	0x20000410

0800704c <_getpid_r>:
 800704c:	f7fa b832 	b.w	80010b4 <_getpid>

08007050 <__swhatbuf_r>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	460c      	mov	r4, r1
 8007054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007058:	2900      	cmp	r1, #0
 800705a:	b096      	sub	sp, #88	@ 0x58
 800705c:	4615      	mov	r5, r2
 800705e:	461e      	mov	r6, r3
 8007060:	da0d      	bge.n	800707e <__swhatbuf_r+0x2e>
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007068:	f04f 0100 	mov.w	r1, #0
 800706c:	bf14      	ite	ne
 800706e:	2340      	movne	r3, #64	@ 0x40
 8007070:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007074:	2000      	movs	r0, #0
 8007076:	6031      	str	r1, [r6, #0]
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	b016      	add	sp, #88	@ 0x58
 800707c:	bd70      	pop	{r4, r5, r6, pc}
 800707e:	466a      	mov	r2, sp
 8007080:	f000 f848 	bl	8007114 <_fstat_r>
 8007084:	2800      	cmp	r0, #0
 8007086:	dbec      	blt.n	8007062 <__swhatbuf_r+0x12>
 8007088:	9901      	ldr	r1, [sp, #4]
 800708a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800708e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007092:	4259      	negs	r1, r3
 8007094:	4159      	adcs	r1, r3
 8007096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800709a:	e7eb      	b.n	8007074 <__swhatbuf_r+0x24>

0800709c <__smakebuf_r>:
 800709c:	898b      	ldrh	r3, [r1, #12]
 800709e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070a0:	079d      	lsls	r5, r3, #30
 80070a2:	4606      	mov	r6, r0
 80070a4:	460c      	mov	r4, r1
 80070a6:	d507      	bpl.n	80070b8 <__smakebuf_r+0x1c>
 80070a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	6123      	str	r3, [r4, #16]
 80070b0:	2301      	movs	r3, #1
 80070b2:	6163      	str	r3, [r4, #20]
 80070b4:	b003      	add	sp, #12
 80070b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070b8:	ab01      	add	r3, sp, #4
 80070ba:	466a      	mov	r2, sp
 80070bc:	f7ff ffc8 	bl	8007050 <__swhatbuf_r>
 80070c0:	9f00      	ldr	r7, [sp, #0]
 80070c2:	4605      	mov	r5, r0
 80070c4:	4639      	mov	r1, r7
 80070c6:	4630      	mov	r0, r6
 80070c8:	f7fe febe 	bl	8005e48 <_malloc_r>
 80070cc:	b948      	cbnz	r0, 80070e2 <__smakebuf_r+0x46>
 80070ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070d2:	059a      	lsls	r2, r3, #22
 80070d4:	d4ee      	bmi.n	80070b4 <__smakebuf_r+0x18>
 80070d6:	f023 0303 	bic.w	r3, r3, #3
 80070da:	f043 0302 	orr.w	r3, r3, #2
 80070de:	81a3      	strh	r3, [r4, #12]
 80070e0:	e7e2      	b.n	80070a8 <__smakebuf_r+0xc>
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	6020      	str	r0, [r4, #0]
 80070e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ea:	81a3      	strh	r3, [r4, #12]
 80070ec:	9b01      	ldr	r3, [sp, #4]
 80070ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80070f2:	b15b      	cbz	r3, 800710c <__smakebuf_r+0x70>
 80070f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070f8:	4630      	mov	r0, r6
 80070fa:	f000 f81d 	bl	8007138 <_isatty_r>
 80070fe:	b128      	cbz	r0, 800710c <__smakebuf_r+0x70>
 8007100:	89a3      	ldrh	r3, [r4, #12]
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	81a3      	strh	r3, [r4, #12]
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	431d      	orrs	r5, r3
 8007110:	81a5      	strh	r5, [r4, #12]
 8007112:	e7cf      	b.n	80070b4 <__smakebuf_r+0x18>

08007114 <_fstat_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4d07      	ldr	r5, [pc, #28]	@ (8007134 <_fstat_r+0x20>)
 8007118:	2300      	movs	r3, #0
 800711a:	4604      	mov	r4, r0
 800711c:	4608      	mov	r0, r1
 800711e:	4611      	mov	r1, r2
 8007120:	602b      	str	r3, [r5, #0]
 8007122:	f7fa f82f 	bl	8001184 <_fstat>
 8007126:	1c43      	adds	r3, r0, #1
 8007128:	d102      	bne.n	8007130 <_fstat_r+0x1c>
 800712a:	682b      	ldr	r3, [r5, #0]
 800712c:	b103      	cbz	r3, 8007130 <_fstat_r+0x1c>
 800712e:	6023      	str	r3, [r4, #0]
 8007130:	bd38      	pop	{r3, r4, r5, pc}
 8007132:	bf00      	nop
 8007134:	20000410 	.word	0x20000410

08007138 <_isatty_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	4d06      	ldr	r5, [pc, #24]	@ (8007154 <_isatty_r+0x1c>)
 800713c:	2300      	movs	r3, #0
 800713e:	4604      	mov	r4, r0
 8007140:	4608      	mov	r0, r1
 8007142:	602b      	str	r3, [r5, #0]
 8007144:	f7fa f82e 	bl	80011a4 <_isatty>
 8007148:	1c43      	adds	r3, r0, #1
 800714a:	d102      	bne.n	8007152 <_isatty_r+0x1a>
 800714c:	682b      	ldr	r3, [r5, #0]
 800714e:	b103      	cbz	r3, 8007152 <_isatty_r+0x1a>
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	20000410 	.word	0x20000410

08007158 <_init>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	bf00      	nop
 800715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715e:	bc08      	pop	{r3}
 8007160:	469e      	mov	lr, r3
 8007162:	4770      	bx	lr

08007164 <_fini>:
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	bf00      	nop
 8007168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716a:	bc08      	pop	{r3}
 800716c:	469e      	mov	lr, r3
 800716e:	4770      	bx	lr
